
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Avalonia.Accelerate.Appearance.csproj
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <AvaloniaXaml Remove="Skins\Cyberpunk\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Cyberpunk\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Dark\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Dark\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Forest Green\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Forest Green\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\High Contrast\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\High Contrast\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Light\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Light\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Material Design 3\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Material Design 3\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Purple Haze\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Purple Haze\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Windows 11 Modern\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Windows 11 Modern\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Zen Garden\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Zen Garden\ControlThemes\TextBox.axaml" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="Skins\Cyberpunk\theme.json" />
    <None Remove="Skins\Dark\ControlThemes\Assets\jackrabbit.png" />
    <None Remove="Skins\Dark\theme.json" />
    <None Remove="Skins\Forest Green\theme.json" />
    <None Remove="Skins\High Contrast\theme.json" />
    <None Remove="Skins\Light\theme.json" />
    <None Remove="Skins\Material Design 3\theme.json" />
    <None Remove="Skins\ModernIce\theme.json" />
    <None Remove="Skins\Ocean Blue\theme.json" />
    <None Remove="Skins\Purple Haze\theme.json" />
    <None Remove="Skins\RetroTerminal\theme.json" />
    <None Remove="Skins\Windows 11 Modern\theme.json" />
    <None Remove="Skins\Zen Garden\theme.json" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Skins\Cyberpunk\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Cyberpunk\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Cyberpunk\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\Assets\jackrabbit.png">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Light\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Light\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Light\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.1" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.1" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.1" />
    <PackageReference Include="Avalonia.ReactiveUI" Version="11.3.1" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.5" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.5" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="9.0.5" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Avalonia.Accelerate.Icons\Avalonia.Accelerate.Icons.csproj" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaXaml Update="Skins\Cyberpunk\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaXaml>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Controls\QuickSkinSwitcher.axaml.cs">
      <DependentUpon>QuickSkinSwitcher.axaml</DependentUpon>
    </Compile>
    <Compile Update="Views\SkinSettingsDialog.axaml.cs">
      <DependentUpon>SkinSettingsDialog.axaml</DependentUpon>
    </Compile>
  </ItemGroup>

</Project>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Controls\QuickSkinSwitcher.axaml
================================================================================

<UserControl
    x:Class="Avalonia.Accelerate.Appearance.Controls.QuickSkinSwitcher"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons="clr-namespace:Avalonia.Accelerate.Icons;assembly=Avalonia.Accelerate.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:Avalonia.Accelerate.Appearance.ViewModels"
    d:DesignHeight="40"
    d:DesignWidth="200"
    x:DataType="vm:QuickSkinSwitcherViewModel"
    mc:Ignorable="d">

    <Border
        Padding="8,4"
        Background="{DynamicResource BackgroundLightBrush}"
        BorderBrush="{DynamicResource BorderBrush}"
        BorderThickness="1"
        CornerRadius="4">
        <StackPanel Orientation="Horizontal" Spacing="8">
            <Path
                Width="16"
                Height="16"
                VerticalAlignment="Center"
                Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                Fill="{DynamicResource AccentBlueBrush}"
                Stretch="Uniform" />

            <ComboBox
                MinWidth="120"
                Background="{DynamicResource BackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                Foreground="{DynamicResource TextPrimaryBrush}"
                ItemsSource="{Binding AvailableThemes}"
                SelectedItem="{Binding SelectedTheme}"
                ToolTip.Tip="Quick theme switcher">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Ellipse
                                Width="12"
                                Height="12"
                                VerticalAlignment="Center"
                                Fill="{Binding PreviewColor}" />
                            <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                        </StackPanel>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
    </Border>
</UserControl>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Controls\QuickSkinSwitcher.axaml.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.ViewModels;
using Avalonia.Controls;

namespace Avalonia.Accelerate.Appearance.Controls;

/// <summary>
/// Represents a user control that provides a quick theme switching functionality
/// for Avalonia applications. This control is designed to integrate seamlessly
/// with the Avalonia UI framework and is backed by the <see cref="QuickSkinSwitcherViewModel"/>.
/// </summary>
public partial class QuickSkinSwitcher : UserControl
{
    /// <summary>
    /// Initializes a new instance of the <see cref="QuickSkinSwitcher"/> class.
    /// This constructor sets up the control by initializing its components and
    /// assigning a new instance of <see cref="QuickSkinSwitcherViewModel"/> as its data context.
    /// </summary>
    public QuickSkinSwitcher()
    {
        InitializeComponent();
        
    }
    /// 
    public QuickSkinSwitcher(ISkinManager skinManager)
    {
        InitializeComponent();
        DataContext = new QuickSkinSwitcherViewModel(skinManager);
    }

    public QuickSkinSwitcher(QuickSkinSwitcherViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }

}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Extensions\AppBuilderExtensions.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Accelerate.Appearance.Services;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace Avalonia.Accelerate.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for configuring and integrating the AvaloniaThemeManager 
    /// into an Avalonia application using the <see cref="AppBuilder"/>.
    /// </summary>
    /// <remarks>
    /// This class contains methods to enable the AvaloniaThemeManager with default or custom configurations.
    /// It simplifies the setup process by allowing developers to chain theme manager configuration
    /// into the application initialization pipeline.
    /// </remarks>
    public static class AppBuilderExtensions
    {
        /// <summary>
        /// Static service provider holder for accessing services throughout the application
        /// </summary>
        private static IServiceProvider? _serviceProvider;

        /// <summary>
        /// Action to be executed when application is ready
        /// </summary>
        private static Action? _initializationAction;

        /// <summary>
        /// Gets the current service provider
        /// </summary>
        public static IServiceProvider ServiceProvider
        {
            get => _serviceProvider ?? throw new InvalidOperationException("Service provider not initialized. Ensure UseSkinManager() was called during application setup.");
            private set => _serviceProvider = value;
        }

        /// <summary>
        /// Adds AvaloniaThemeManager to the application with dependency injection support
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <param name="configureServices">Optional service configuration action</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseSkinManager(this AppBuilder builder, Action<IServiceCollection>? configureServices = null, Action<IServiceProvider>? onBuilt = null)
        {
            return builder.AfterSetup(appBuilder =>
            {
                // Set up dependency injection
                var services = new ServiceCollection();

                // Add theme manager services
                services.AddSkinManagerServices();
                services.AddSingleton<IApplication>(_ => (IApplication)(Avalonia.Application.Current ?? throw new InvalidOperationException("Application.Current is not available.")));
                services.AddTransient<IStylesCollection, AvaloniaStylesWrapper>();
                services.AddSingleton<IThemeLoaderService, SkinLoaderService>();
                services.AddSingleton<ISkinManager, SkinManager>();
                // Allow additional service configuration
                configureServices?.Invoke(services);

                // Build and store the service provider
                ServiceProvider = services.BuildServiceProvider();
                onBuilt?.Invoke(ServiceProvider); // Notify caller — they can assign App.Services here if they want


                // Store initialization action to be called when application is ready
                _initializationAction = () =>
                {
                    try
                    {
                        var skinManager = (SkinManager)ServiceProvider.GetRequiredService<ISkinManager>();
                        SkinManager.Instance = skinManager;
                        skinManager.LoadSavedTheme();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error initializing theme manager: {ex.Message}");
                    }
                };
            });
        }

        /// <summary>
        /// Adds AvaloniaThemeManager with custom configuration (legacy method for backward compatibility)
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <param name="configure">Configuration action</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseSkinManager(this AppBuilder builder, System.Action<SkinManager> configure)
        {
            return builder.AfterSetup(appBuilder =>
            {
                // Set up dependency injection
                var services = new ServiceCollection();
                services.AddSkinManagerServices();
                ServiceProvider = services.BuildServiceProvider();
                
                // Store initialization action to be called when application is ready
                _initializationAction = () =>
                {
                    try
                    {
                        var skinManager = ServiceProvider.GetRequiredService<ISkinManager>() as SkinManager;
                        if (skinManager != null)
                        {
                            configure(skinManager);
                            skinManager.LoadSavedTheme();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error configuring theme manager: {ex.Message}");
                    }
                };
            });
        }

        /// <summary>
        /// Internal method to be called by the Application when it's ready to initialize the theme manager
        /// This should be called from Application.OnFrameworkInitializationCompleted()
        /// </summary>
        public static void InitializeSkinManager()
        {
            _initializationAction?.Invoke();
            _initializationAction = null; // Clear after execution
        }

        /// <summary>
        /// Gets a service from the application's service provider
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <returns>The service instance</returns>
        /// <exception cref="InvalidOperationException">Thrown when the service provider is not available</exception>
        public static T GetRequiredService<T>() where T : notnull
        {
            return ServiceProvider.GetRequiredService<T>();
        }

        /// <summary>
        /// Gets a service from the application's service provider
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <returns>The service instance, or null if not found</returns>
        public static T? GetService<T>() where T : class
        {
            try
            {
                return ServiceProvider.GetService<T>();
            }
            catch (InvalidOperationException)
            {
                return null;
            }
        }

        /// <summary>
        /// Extension method for Application to get services (for compatibility)
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <param name="app">The application instance</param>
        /// <returns>The service instance</returns>
        public static T GetRequiredService<T>(this Application app) where T : notnull
        {
            return GetRequiredService<T>();
        }

        /// <summary>
        /// Extension method for Application to get services (for compatibility)
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <param name="app">The application instance</param>
        /// <returns>The service instance, or null if not found</returns>
        public static T? GetService<T>(this Application app) where T : class
        {
            return GetService<T>();
        }

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Extensions\ApplicationExtensions.cs
================================================================================

using Avalonia.Markup.Xaml.Styling;

namespace Avalonia.Accelerate.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for the <see cref="Avalonia.Application"/> class to integrate AvaloniaThemeManager functionality.
    /// </summary>
    public static class ApplicationExtensions
    {
        /// <summary>
        /// Include AvaloniaThemeManager themes in your application
        /// </summary>
        /// <param name="app">The Application instance</param>
        /// <returns>The Application instance for method chaining</returns>
        public static Application IncludeThemeManagerStyles(this Application app)
        {
            // Include the theme manager's default styles
            app.Styles.Add(new StyleInclude(new System.Uri("avares://Avalonia.Accelerate.Appearance/"))
            {
                Source = new System.Uri("avares://Avalonia.Accelerate.Appearance/Skins/CustomThemes.axaml")
            });

            return app;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Extensions\ServiceCollectionExtension.cs
================================================================================

using Avalonia;
using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Accelerate.Appearance.Services;
using Avalonia.Accelerate.Appearance.Services.ValidationRules;
using Avalonia.Accelerate.Appearance.ViewModels;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Platform;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Avalonia.Accelerate.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for registering skin manager services in an Avalonia application.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds skin manager and related services to the service collection.
        /// </summary>
        /// <param name="services">The service collection to add services to.</param>
        /// <returns>The updated service collection.</returns>
        public static IServiceCollection AddSkinManagerServices(this IServiceCollection services)
        {
            // Logging (you can customize levels elsewhere if needed)
            services.AddLogging();


            // Application abstraction
            services.AddSingleton<IApplication, ApplicationWrapper>();

            // Core services
            services.AddSingleton<IThemeLoaderService, SkinLoaderService>();
            services.AddSingleton<ISkinManager, SkinManager>();

            // Skin inheritance manager
            services.AddSingleton<SkinInheritanceManager>();

            // Validation rules
            services.AddSingleton<ISkinValidationRule, BorderValidationRule>();
            services.AddSingleton<ISkinValidationRule, ColorContrastValidationRule>();
            services.AddSingleton<ISkinValidationRule, NameValidationRule>();
            services.AddSingleton<ISkinValidationRule, AccessibilityValidationRule>();

            // ViewModels
            services.AddTransient<SkinSettingsViewModel>();
            services.AddTransient<QuickSkinSwitcherViewModel>();

            return services;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Interfaces\IApplication.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;

namespace Avalonia.Accelerate.Appearance.Interfaces
{
    public interface IApplication
    {
        IResourceDictionary Resources { get; }
        IApplicationLifetime? ApplicationLifetime { get; }
        IStylesCollection AppStyles { get; }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Interfaces\ISkinManager.cs
================================================================================

using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Interfaces;

/// <summary>
/// 
/// </summary>
public interface ISkinManager
{
    /// <summary>
    /// 
    /// </summary>
    Skin? CurrentSkin { get; }
    /// <summary>
    /// 
    /// </summary>
    event EventHandler? SkinChanged;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="skin"></param>
    void RegisterSkin(string? name, Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    Skin? GetSkin(string? name);
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    List<string> GetAvailableSkinNames();
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skinName"></param>
    void ApplySkin(string? skinName);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skin"></param>
    void ApplySkin(Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skinName"></param>
    void SaveSelectedSkin(string? skinName);
    /// <summary>
    /// 
    /// </summary>
    void LoadSavedTheme();
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Interfaces\ISkinValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Interfaces
{
    /// <summary>
    /// 
    /// </summary>
    public interface ISkinValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        SkinValidationResult Validate(Skin skin);
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Interfaces\IStylesCollection.cs
================================================================================

using Avalonia.Styling;

namespace Avalonia.Accelerate.Appearance.Interfaces
{
    /// <summary>
    /// 
    /// </summary>
    public interface IStylesCollection : IEnumerable<IStyle>
    {
        void Add(IStyle style);
        bool Remove(IStyle style);
        void Clear();
        int Count { get; }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\ApplicationWrapper.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;

namespace Avalonia.Accelerate.Appearance.Model
{
    public class ApplicationWrapper : IApplication
    {
        private readonly Application _application;
        private readonly IStylesCollection _stylesWrapper;

        public ApplicationWrapper()
        {
            _application = Application.Current ?? throw new InvalidOperationException("Application.Current must not be null.");
            _stylesWrapper = new AvaloniaStylesWrapper(_application.Styles);
        }

        public ApplicationWrapper(Application application)
        {
            _application = application ?? throw new ArgumentNullException(nameof(application));
            // Remove the asterisks - they're syntax errors
            _stylesWrapper = new AvaloniaStylesWrapper(application.Styles);
        }

        public IResourceDictionary Resources => _application.Resources;
        public IApplicationLifetime? ApplicationLifetime => _application.ApplicationLifetime;
        public IStylesCollection AppStyles => _stylesWrapper;
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\AppSettings.cs
================================================================================

using Newtonsoft.Json;

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// Represents the application settings for the Avalonia Skin Manager.
    /// Provides functionality to load, save, and manage theme-related settings.
    /// </summary>
    public class AppSettings
    {
        private const string SettingsFileName = "appsettings.json";
        private static readonly string SettingsFilePath;
        private static AppSettings? _instance;

        /// <summary>
        /// Gets or sets the name of the currently selected theme.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the theme name. The default value is "Dark".
        /// </value>
        /// <remarks>
        /// This property is used to store the name of the theme selected by the user.
        /// It can be updated dynamically and is persisted using the <see cref="AppSettings.Save"/> method.
        /// </remarks>
        public string? Theme { get; set; } = "Dark";

        // Add other settings as needed
        /// <summary>
        /// Gets or sets a value indicating whether the application should use the system's default theme.
        /// </summary>
        /// <value>
        /// <c>true</c> if the application should use the system's theme; otherwise, <c>false</c>.
        /// </value>
        public bool UseSystemTheme { get; set; } = false;

        // Update the static constructor in AppSettings.cs
        static AppSettings()
        {
            string appDataFolder;

            try
            {
                // Try to use a more appropriate app data folder
                appDataFolder = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                    "Avalonia.Accelerate.Appearance");
            }
            catch
            {
                // Fallback to current directory if permissions issue
                appDataFolder = Path.Combine(AppContext.BaseDirectory, "Settings");
            }

            if (!Directory.Exists(appDataFolder))
            {
                try
                {
                    Directory.CreateDirectory(appDataFolder);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Warning: Could not create settings directory: {ex.Message}");
                    // Fallback to temp directory
                    appDataFolder = Path.GetTempPath();
                }
            }

            SettingsFilePath = Path.Combine(appDataFolder, SettingsFileName);
        }

        /// <summary>
        /// Gets the singleton instance of the <see cref="AppSettings"/> class.
        /// </summary>
        /// <remarks>
        /// This property ensures that only one instance of <see cref="AppSettings"/> exists throughout the application.
        /// If the instance is not already initialized, it will be loaded using the <c>Load</c> method.
        /// </remarks>
        public static AppSettings Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = Load();
                }
                return _instance;
            }
        }

        private static AppSettings Load()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    string json = File.ReadAllText(SettingsFilePath);
                    var settings = JsonConvert.DeserializeObject<AppSettings>(json);
                    if (settings != null)
                        return settings;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading settings: {ex.Message}");
            }

            // Return default settings if loading fails
            return new AppSettings();
        }

        /// <summary>
        /// Saves the current application settings to a file.
        /// </summary>
        /// <remarks>
        /// This method serializes the current instance of <see cref="AppSettings"/> into a JSON format
        /// and writes it to the file specified by the settings file path. If an error occurs during
        /// the save operation, it is logged to the console.
        /// </remarks>
        /// <exception cref="System.IO.IOException">
        /// Thrown when an I/O error occurs while writing to the file.
        /// </exception>
        /// <exception cref="Newtonsoft.Json.JsonException">
        /// Thrown when an error occurs during JSON serialization.
        /// </exception>
        public void Save()
        {
            try
            {
                string json = JsonConvert.SerializeObject(this, Formatting.Indented);
                File.WriteAllText(SettingsFilePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving settings: {ex.Message}");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\AvaloniaStylesWrapper.cs
================================================================================

using System.Collections;
using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Styling;

namespace Avalonia.Accelerate.Appearance.Model
{
    public class AvaloniaStylesWrapper : IStylesCollection
    {
        private readonly Styles _styles;

        public AvaloniaStylesWrapper(Styles styles)
        {
            _styles = styles ?? throw new ArgumentNullException(nameof(styles));
        }

        public void Add(IStyle style)
        {
            _styles.Add(style);
        }

        public bool Remove(IStyle style)
        {
            return _styles.Remove(style);
        }

        public void Clear()
        {
            _styles.Clear();
        }

        // Fix: Make this a property, not a method, and delegate to the actual Styles collection
        public int Count => _styles.Count;

        public IEnumerator<IStyle> GetEnumerator()
        {
            return _styles.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\InheritableSkin.cs
================================================================================

// Skin/ThemeInheritance.cs
using Avalonia.Media;
using System.Text.Json;

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// Represents a theme that can inherit from a base theme and override specific properties.
    /// </summary>
    public class InheritableSkin : Skin
    {
        private readonly HashSet<string> _setProperties = new();

        /// <summary>
        /// Gets or sets the name of the base theme this theme inherits from.
        /// </summary>
        public string? BaseSkinName { get; set; }

        /// <summary>
        /// Gets or sets the collection of property overrides for this theme.
        /// </summary>
        public Dictionary<string, object> PropertyOverrides { get; set; } = new();

        /// <summary>
        /// Initializes a new instance of the InheritableSkin class.
        /// </summary>
        public InheritableSkin()
        {
            // Don't call base constructor to avoid setting default values
            // Initialize collections that are required
            ControlThemeUris = new Dictionary<string, string>();
            StyleUris = new Dictionary<string, string>();
            Typography = new TypographyScale();
            PropertyOverrides = new Dictionary<string, object>();
        }

        // Override property setters to track which properties have been explicitly set
        public new Color PrimaryColor
        {
            get => base.PrimaryColor;
            set
            {
                base.PrimaryColor = value;
                _setProperties.Add(nameof(PrimaryColor));
            }
        }

        public new Color SecondaryColor
        {
            get => base.SecondaryColor;
            set
            {
                base.SecondaryColor = value;
                _setProperties.Add(nameof(SecondaryColor));
            }
        }

        public new Color AccentColor
        {
            get => base.AccentColor;
            set
            {
                base.AccentColor = value;
                _setProperties.Add(nameof(AccentColor));
            }
        }

        public new Color PrimaryBackground
        {
            get => base.PrimaryBackground;
            set
            {
                base.PrimaryBackground = value;
                _setProperties.Add(nameof(PrimaryBackground));
            }
        }

        public new Color SecondaryBackground
        {
            get => base.SecondaryBackground;
            set
            {
                base.SecondaryBackground = value;
                _setProperties.Add(nameof(SecondaryBackground));
            }
        }

        public new Color PrimaryTextColor
        {
            get => base.PrimaryTextColor;
            set
            {
                base.PrimaryTextColor = value;
                _setProperties.Add(nameof(PrimaryTextColor));
            }
        }

        public new Color SecondaryTextColor
        {
            get => base.SecondaryTextColor;
            set
            {
                base.SecondaryTextColor = value;
                _setProperties.Add(nameof(SecondaryTextColor));
            }
        }

        public new FontFamily FontFamily
        {
            get => base.FontFamily;
            set
            {
                base.FontFamily = value;
                _setProperties.Add(nameof(FontFamily));
            }
        }

        public new double FontSizeSmall
        {
            get => base.FontSizeSmall;
            set
            {
                base.FontSizeSmall = value;
                _setProperties.Add(nameof(FontSizeSmall));
            }
        }

        public new double FontSizeMedium
        {
            get => base.FontSizeMedium;
            set
            {
                base.FontSizeMedium = value;
                _setProperties.Add(nameof(FontSizeMedium));
            }
        }

        public new double FontSizeLarge
        {
            get => base.FontSizeLarge;
            set
            {
                base.FontSizeLarge = value;
                _setProperties.Add(nameof(FontSizeLarge));
            }
        }

        public new FontWeight FontWeight
        {
            get => base.FontWeight;
            set
            {
                base.FontWeight = value;
                _setProperties.Add(nameof(FontWeight));
            }
        }

        public new Color BorderColor
        {
            get => base.BorderColor;
            set
            {
                base.BorderColor = value;
                _setProperties.Add(nameof(BorderColor));
            }
        }

        public new Thickness BorderThickness
        {
            get => base.BorderThickness;
            set
            {
                base.BorderThickness = value;
                _setProperties.Add(nameof(BorderThickness));
            }
        }

        public new double BorderRadius
        {
            get => base.BorderRadius;
            set
            {
                base.BorderRadius = value;
                _setProperties.Add(nameof(BorderRadius));
            }
        }

        public new Color ErrorColor
        {
            get => base.ErrorColor;
            set
            {
                base.ErrorColor = value;
                _setProperties.Add(nameof(ErrorColor));
            }
        }

        public new Color WarningColor
        {
            get => base.WarningColor;
            set
            {
                base.WarningColor = value;
                _setProperties.Add(nameof(WarningColor));
            }
        }

        public new Color SuccessColor
        {
            get => base.SuccessColor;
            set
            {
                base.SuccessColor = value;
                _setProperties.Add(nameof(SuccessColor));
            }
        }

        public new string? Name
        {
            get => base.Name;
            set
            {
                base.Name = value;
                _setProperties.Add(nameof(Name));
            }
        }

        /// <summary>
        /// Creates a resolved skin by applying inheritance and overrides.
        /// </summary>
        /// <param name="baseTheme">The base theme to inherit from.</param>
        /// <returns>A fully resolved Skin with all properties applied.</returns>
        public Skin CreateResolvedSkin(Skin? baseTheme = null)
        {
            var resolved = new Skin();

            // Start with base theme if provided
            if (baseTheme != null)
            {
                CopyPropertiesFrom(resolved, baseTheme);
            }

            // Apply current theme's explicitly set properties only
            CopySetPropertiesFrom(resolved, this);

            // Apply property overrides
            ApplyOverrides(resolved);

            return resolved;
        }

        private void CopyPropertiesFrom(Skin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }

        private void CopySetPropertiesFrom(Skin target, InheritableSkin source)
        {
            // Only copy properties that have been explicitly set
            if (_setProperties.Contains(nameof(PrimaryColor)))
                target.PrimaryColor = source.PrimaryColor;
            if (_setProperties.Contains(nameof(SecondaryColor)))
                target.SecondaryColor = source.SecondaryColor;
            if (_setProperties.Contains(nameof(AccentColor)))
                target.AccentColor = source.AccentColor;
            if (_setProperties.Contains(nameof(PrimaryBackground)))
                target.PrimaryBackground = source.PrimaryBackground;
            if (_setProperties.Contains(nameof(SecondaryBackground)))
                target.SecondaryBackground = source.SecondaryBackground;
            if (_setProperties.Contains(nameof(PrimaryTextColor)))
                target.PrimaryTextColor = source.PrimaryTextColor;
            if (_setProperties.Contains(nameof(SecondaryTextColor)))
                target.SecondaryTextColor = source.SecondaryTextColor;
            if (_setProperties.Contains(nameof(FontFamily)))
                target.FontFamily = source.FontFamily;
            if (_setProperties.Contains(nameof(FontSizeSmall)))
                target.FontSizeSmall = source.FontSizeSmall;
            if (_setProperties.Contains(nameof(FontSizeMedium)))
                target.FontSizeMedium = source.FontSizeMedium;
            if (_setProperties.Contains(nameof(FontSizeLarge)))
                target.FontSizeLarge = source.FontSizeLarge;
            if (_setProperties.Contains(nameof(FontWeight)))
                target.FontWeight = source.FontWeight;
            if (_setProperties.Contains(nameof(BorderColor)))
                target.BorderColor = source.BorderColor;
            if (_setProperties.Contains(nameof(BorderThickness)))
                target.BorderThickness = source.BorderThickness;
            if (_setProperties.Contains(nameof(BorderRadius)))
                target.BorderRadius = source.BorderRadius;
            if (_setProperties.Contains(nameof(ErrorColor)))
                target.ErrorColor = source.ErrorColor;
            if (_setProperties.Contains(nameof(WarningColor)))
                target.WarningColor = source.WarningColor;
            if (_setProperties.Contains(nameof(SuccessColor)))
                target.SuccessColor = source.SuccessColor;
            if (_setProperties.Contains(nameof(Name)))
                target.Name = source.Name;
        }

        private void ApplyOverrides(Skin target)
        {
            foreach (var kvp in PropertyOverrides)
            {
                var property = typeof(Skin).GetProperty(kvp.Key);
                if (property != null && property.CanWrite)
                {
                    try
                    {
                        var value = ConvertValue(kvp.Value, property.PropertyType);
                        property.SetValue(target, value);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Failed to apply override for {kvp.Key}: {ex.Message}");
                    }
                }
            }
        }

        // Update the ConvertValue method in InheritableSkin.cs
        private object? ConvertValue(object? value, Type targetType)
        {
            if (value == null) return null;

            if (targetType == typeof(Color) && value is string colorString)
            {
                return Color.Parse(colorString);
            }

            if (targetType == typeof(FontFamily) && value is string fontString)
            {
                return new FontFamily(fontString);
            }

            if (targetType == typeof(FontWeight) && value is string fontWeightString)
            {
                return Enum.TryParse<FontWeight>(fontWeightString, out var weight)
                    ? weight
                    : FontWeight.Normal;
            }

            if (targetType == typeof(Thickness))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new Thickness(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        return Thickness.Parse(element.GetString() ?? "0");
                    }
                    else if (element.ValueKind == JsonValueKind.Object)
                    {
                        var left = element.TryGetProperty("left", out var leftProp) ? leftProp.GetDouble() : 0;
                        var top = element.TryGetProperty("top", out var topProp) ? topProp.GetDouble() : 0;
                        var right = element.TryGetProperty("right", out var rightProp) ? rightProp.GetDouble() : 0;
                        var bottom = element.TryGetProperty("bottom", out var bottomProp) ? bottomProp.GetDouble() : 0;
                        return new Thickness(left, top, right, bottom);
                    }
                }
                else if (value is string thicknessString)
                {
                    return Thickness.Parse(thicknessString);
                }
            }

            if (targetType == typeof(CornerRadius))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new CornerRadius(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        var radiusString = element.GetString() ?? "0";
                        return double.TryParse(radiusString, out var radius)
                            ? new CornerRadius(radius)
                            : new CornerRadius(0);
                    }
                }
                else if (value is string radiusString)
                {
                    return double.TryParse(radiusString, out var radius)
                        ? new CornerRadius(radius)
                        : new CornerRadius(0);
                }
            }

            // Try standard type conversion as fallback
            try
            {
                return Convert.ChangeType(value, targetType);
            }
            catch
            {
                return targetType.IsValueType ? Activator.CreateInstance(targetType) : null;
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\SerializableSkin.cs
================================================================================

using Avalonia.Media;
using Newtonsoft.Json;

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableSkin
    {
        /// <summary>
        /// Gets or sets the name of the theme.
        /// </summary>
        /// <remarks>
        /// This property represents the unique identifier or display name of the theme.
        /// It is a required field and must not be null, empty, or whitespace.
        /// </remarks>
        public string Name { get; set; } = "";
        /// <summary>
        /// Gets or sets a description of the theme, providing additional context or details about its purpose or design.
        /// </summary>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the version of the theme.
        /// </summary>
        /// <remarks>
        /// This property indicates the version of the theme, which can be useful for compatibility checks
        /// or identifying updates to the theme.
        /// </remarks>
        public string Version { get; set; } = "1.0";
        /// <summary>
        /// Gets or sets the author of the theme.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the theme's author.
        /// </value>
        public string Author { get; set; } = "";
        /// <summary>
        /// Gets or sets the date and time when the theme was created.
        /// </summary>
        /// <value>
        /// A <see cref="DateTime"/> representing the creation date and time of the theme.
        /// </value>
        public DateTime CreatedDate { get; set; } = DateTime.Now;

        // Colors as hex strings for JSON serialization
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryColor { get; set; } = "#343B48";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryColor { get; set; } = "#3D4654";
        /// <summary>
        /// 
        /// </summary>
        public string AccentColor { get; set; } = "#3498DB";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryBackground { get; set; } = "#2C313D";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryBackground { get; set; } = "#464F62";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryTextColor { get; set; } = "#FFFFFF";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryTextColor { get; set; } = "#CCCCCC";
        /// <summary>
        /// 
        /// </summary>
        public string BorderColor { get; set; } = "#5D6778";
        /// <summary>
        /// 
        /// </summary>
        public string ErrorColor { get; set; } = "#E74C3C";
        /// <summary>
        /// 
        /// </summary>
        public string WarningColor { get; set; } = "#F39C12";
        /// <summary>
        /// 
        /// </summary>
        public string SuccessColor { get; set; } = "#2ECC71";


        // Typography
        /// <summary>
        /// 
        /// </summary>
        public string FontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeSmall { get; set; } = 10;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public string FontWeight { get; set; } = "Normal";

        // Layout
        /// <summary>
        /// 
        /// </summary>
        public double BorderRadius { get; set; } = 4;
        /// <summary>
        /// 
        /// </summary>
        public SerializableThickness BorderThickness { get; set; } = new() { Left = 1, Top = 1, Right = 1, Bottom = 1 };

        // Advanced typography (optional)
        /// <summary>
        /// 
        /// </summary>
        public SerializableTypography? AdvancedTypography { get; set; }

        // Inheritance (optional)
        /// <summary>
        /// 
        /// </summary>
        [JsonIgnore]
        public SerializableSkin? BaseSkin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public Dictionary<string, object>? PropertyOverrides { get; set; }

        /// <summary>
        /// Gets or sets the list of control theme file paths relative to the skin base directory.
        /// </summary>
        public List<string>? ControlThemes { get; set; }
        /// <summary>
        /// Optional named assets like logos or backgrounds.
        /// </summary>
        public Dictionary<string, string>? Assets { get; set; }
        /// <summary>
        /// Name of the base skin (for inheritance), serialized for persistence.
        /// </summary>
        public string? BaseSkinName { get; set; }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class ThemeConverterExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="skin"></param>
        /// <returns></returns>
        public static Skin ToSkin(this SerializableSkin skin)
        {
            return new Skin
            {
                Name = skin.Name,
                PrimaryColor = Color.Parse(skin.PrimaryColor),
                SecondaryColor = Color.Parse(skin.SecondaryColor),
                AccentColor = Color.Parse(skin.AccentColor),
                PrimaryBackground = Color.Parse(skin.PrimaryBackground),
                SecondaryBackground = Color.Parse(skin.SecondaryBackground),
                PrimaryTextColor = Color.Parse(skin.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(skin.SecondaryTextColor),
                BorderColor = Color.Parse(skin.BorderColor),
                ErrorColor = Color.Parse(skin.ErrorColor),
                WarningColor = Color.Parse(skin.WarningColor),
                SuccessColor = Color.Parse(skin.SuccessColor),
                FontFamily = new FontFamily(skin.FontFamily),
                FontSizeSmall = skin.FontSizeSmall,
                FontSizeMedium = skin.FontSizeMedium,
                FontSizeLarge = skin.FontSizeLarge,
                FontWeight = Enum.TryParse<FontWeight>(skin.FontWeight, true, out var fw) ? fw : FontWeight.Normal,
                BorderRadius = skin.BorderRadius,
                BorderThickness = new Thickness(
                    skin.BorderThickness.Left,
                    skin.BorderThickness.Top,
                    skin.BorderThickness.Right,
                    skin.BorderThickness.Bottom
                ),
                Typography =
                    new TypographyScale
                    {
                        DisplayLarge = skin.AdvancedTypography?.DisplayLarge ?? 57,
                        DisplayMedium = skin.AdvancedTypography?.DisplayMedium ?? 45,
                        DisplaySmall = skin.AdvancedTypography?.DisplaySmall ?? 36,
                        HeadlineLarge = skin.AdvancedTypography?.HeadlineLarge ?? 32,
                        HeadlineMedium = skin.AdvancedTypography?.HeadlineMedium ?? 28,
                        HeadlineSmall = skin.AdvancedTypography?.HeadlineSmall ?? 24,
                        TitleLarge = skin.AdvancedTypography?.TitleLarge ?? 22,
                        TitleMedium = skin.AdvancedTypography?.TitleMedium ?? 16,
                        TitleSmall = skin.AdvancedTypography?.TitleSmall ?? 14,
                        LabelLarge = skin.AdvancedTypography?.LabelLarge ?? 14,
                        LabelMedium = skin.AdvancedTypography?.LabelMedium ?? 12,
                        LabelSmall = skin.AdvancedTypography?.LabelSmall ?? 11,
                        BodyLarge = skin.AdvancedTypography?.BodyLarge ?? 16,
                        BodyMedium = skin.AdvancedTypography?.BodyMedium ?? 14,
                        BodySmall = skin.AdvancedTypography?.BodySmall ?? 12,
                    },
                HeaderFontFamily = new FontFamily(skin.AdvancedTypography?.HeaderFontFamily ?? skin.FontFamily),
                BodyFontFamily = new FontFamily(skin.AdvancedTypography?.BodyFontFamily ?? skin.FontFamily),
                MonospaceFontFamily =
                    new FontFamily(skin.AdvancedTypography?.MonospaceFontFamily ??
                                   "Consolas, Monaco, 'Courier New', monospace"),
                LineHeight = skin.AdvancedTypography?.LineHeight ?? 1.5,
                LetterSpacing = skin.AdvancedTypography?.LetterSpacing ?? 0,
                EnableLigatures = skin.AdvancedTypography?.EnableLigatures ?? true,
                ControlThemeUris = skin.ControlThemes?.ToDictionary(x => x, x => x) ?? new(),
                StyleUris = skin.PropertyOverrides?.ToDictionary(x => x.Key, x => x.Value?.ToString()) ?? new(),
                AssetUris = skin.Assets?.ToDictionary(x => x.Key, x => x.Value) ?? new()
            };
            
        }
    }

}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\SerializableThickness.cs
================================================================================

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableThickness
    {
        /// <summary>
        /// 
        /// </summary>
        public double Left { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Top { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Right { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Bottom { get; set; }

    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\SerializableTypography.cs
================================================================================

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableTypography
    {
        /// <summary>
        /// 
        /// </summary>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// 
        /// </summary>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// 
        /// </summary>
        public double DisplaySmall { get; set; } = 36;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineSmall { get; set; } = 24;
        /// <summary>
        /// 
        /// </summary>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// 
        /// </summary>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double TitleSmall { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double LabelSmall { get; set; } = 11;
        /// <summary>
        /// 
        /// </summary>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double BodySmall { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>

        /// <summary>
        /// 
        /// </summary>
        public string HeaderFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string BodyFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string MonospaceFontFamily { get; set; } = "Consolas, Monaco, 'Courier New', monospace";
        /// <summary>
        /// 
        /// </summary>
        public double LineHeight { get; set; } = 1.5;
        /// <summary>
        /// 
        /// </summary>
        public double LetterSpacing { get; set; } = 0;
        /// <summary>
        /// 
        /// </summary>
        public bool EnableLigatures { get; set; } = true;
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\Skin.cs
================================================================================

using Avalonia.Media;

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// Represents a customizable theme skin for an Avalonia application, defining colors, fonts, and other visual properties.
    /// </summary>
    /// <remarks>
    /// The <see cref="Skin"/> class provides a set of properties to define the appearance of an application, 
    /// including primary and secondary colors, background colors, text colors, font settings, and additional UI properties.
    /// It also includes functionality to convert colors to brushes and a default constructor for initializing a dark theme.
    /// </remarks>
    public class Skin
    {
        // Basic colors
        /// <summary>
        /// Gets or sets the primary color of the theme skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used as the main color for UI elements and serves as a foundation
        /// for the overall theme design. The default value for the dark theme is GunMetal Dark (#343B48).
        /// </remarks>
        public Color PrimaryColor { get; set; }
        /// <summary>
        /// Gets or sets the secondary color used in the theme skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used for medium-tone elements within the theme.
        /// The default value for the dark theme is <c>#3D4654</c> (GunMetal Medium).
        /// </remarks>
        public Color SecondaryColor { get; set; }
        /// <summary>
        /// Gets or sets the accent color of the theme.
        /// </summary>
        /// <remarks>
        /// The accent color is used to highlight key elements in the user interface,
        /// providing a visually distinct color that complements the primary and secondary colors.
        /// </remarks>
        public Color AccentColor { get; set; }
        // Backgrounds
        /// <summary>
        /// Gets or sets the primary background color of the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary background color.
        /// </value>
        public Color PrimaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the secondary background color of the skin.
        /// </summary>
        /// <remarks>
        /// This property defines the secondary background color used in the theme. 
        /// It is typically a lighter shade of the primary background color to provide contrast and visual hierarchy.
        /// </remarks>
        public Color SecondaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the primary text color used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary text color. 
        /// The default value is white (<c>#FFFFFF</c>).
        /// </value>
        public Color PrimaryTextColor { get; set; }
        /// <summary>
        /// Gets or sets the color used for secondary text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the secondary text color. The default value is a light gray color (#CCCCCC).
        /// </value>
        public Color SecondaryTextColor { get; set; }
        // Font properties
        /// <summary>
        /// Gets or sets the font family used for text rendering in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="FontFamily"/> representing the font family. The default value is "Segoe UI, San Francisco, Helvetica, Arial, sans-serif".
        /// </value>
        public FontFamily FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font size for small text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small text elements. The default value is 10.
        /// </value>
        public double FontSizeSmall { get; set; }
        /// <summary>
        /// Gets or sets the medium font size used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the medium font size.
        /// </value>
        public double FontSizeMedium { get; set; }
        /// <summary>
        /// Gets or sets the font size for large text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large text elements. 
        /// The default value is 16.
        /// </value>
        public double FontSizeLarge { get; set; }
        /// <summary>
        /// Gets or sets the font weight used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="FontWeight"/> value that specifies the weight of the font.
        /// The default value is <see cref="FontWeight.Normal"/>.
        /// </value>
        public FontWeight FontWeight { get; set; }
        /// <summary>
        /// Gets or sets the color of the border in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the border color.
        /// </value>
        public Color BorderColor { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the border for the theme skin.
        /// </summary>
        /// <value>
        /// A <see cref="Thickness"/> structure that specifies the thickness of the border.
        /// </value>
        public Thickness BorderThickness { get; set; }
        /// <summary>
        /// Gets or sets the border radius applied to UI elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the radius of the border corners, in device-independent units (DIPs).
        /// </value>
        public double BorderRadius { get; set; }
        // Additional UI properties
        /// <summary>
        /// Gets or sets the color used to represent error states in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the error color. The default value is typically a shade of red.
        /// </value>
        public Color ErrorColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent warnings in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the warning color. The default value is "#F39C12".
        /// </value>
        public Color WarningColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent success states in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the success color.
        /// </value>
        public Color SuccessColor { get; set; }
        // Name of the skin
        /// <summary>
        /// Gets or sets the name of the skin.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the skin. 
        /// The default value is "Dark".
        /// </value>
        public string? Name { get; set; }
        // Constructor with default values
        // URIs to ControlTheme resources mapped by control type or key
        /// <summary>
        /// Gets or sets the dictionary of control theme resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// Keys typically represent control types or identifiers, and values are the associated resource URIs (e.g., avares URIs).
        /// </remarks>
        public Dictionary<string, string> ControlThemeUris { get; set; } = new();
        // URIs to general Style resources mapped by key
        /// <summary>
        /// Gets or sets the dictionary of style resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// These styles can define visual behavior for multiple controls or layout elements.
        /// </remarks>
        public Dictionary<string, string> StyleUris { get; set; } = new();
        // Extended typography information such as font scaling and weight map
        /// <summary>
        /// Gets or sets the typography scale for the skin.
        /// </summary>
        /// <value>
        /// A <see cref="TypographyScale"/> object used to define consistent typography sizing and scaling for various text styles.
        /// </value>
        public TypographyScale Typography { get; set; } = new();
        // Additional font families for specific text roles
        /// <summary>
        /// Gets or sets the font family used for headers.
        /// </summary>
        public FontFamily HeaderFontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font family used for body text.
        /// </summary>
        public FontFamily BodyFontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font family used for monospace content (e.g., code blocks).
        /// </summary>
        public FontFamily MonospaceFontFamily { get; set; }
        // Line height and spacing for typographic elements
        /// <summary>
        /// Gets or sets the line height multiplier used in text layout.
        /// </summary>
        /// <remarks>
        /// This is typically a multiplier on the font size to determine the vertical spacing between lines.
        /// </remarks>
        public double LineHeight { get; set; } = 1.5;

        /// <summary>
        /// Gets or sets the letter spacing used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing additional space between letters in DIPs. Default is 0.
        /// </value>
        public double LetterSpacing { get; set; } = 0;
        /// <summary>
        /// Gets or sets a value indicating whether ligatures are enabled in text rendering.
        /// </summary>
        /// <value>
        /// <c>true</c> to enable ligatures; otherwise, <c>false</c>.
        /// </value>
        public bool EnableLigatures { get; set; } = true;
        /// <summary>
        /// Dictionary of named asset URIs (images, SVGs, etc.).
        /// </summary>
        public Dictionary<string, string> AssetUris { get; set; } = new();
        /// <summary>
        /// 
        /// </summary>
        public InheritableSkin? BaseSkin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public Skin()
        {
            // Set default values for Dark theme
            PrimaryColor = Color.Parse("#343B48");        // GunMetal Dark
            SecondaryColor = Color.Parse("#3D4654");      // GunMetal Medium
            AccentColor = Color.Parse("#3498DB");         // Accent Blue
            PrimaryBackground = Color.Parse("#2C313D");   // Dark background
            SecondaryBackground = Color.Parse("#464F62"); // GunMetal Light
            PrimaryTextColor = Color.Parse("#FFFFFF");
            SecondaryTextColor = Color.Parse("#CCCCCC");
            FontFamily = new FontFamily("Segoe UI, San Francisco, Helvetica, Arial, sans-serif");
            FontSizeSmall = 10;
            FontSizeMedium = 12;
            FontSizeLarge = 16;
            FontWeight = FontWeight.Normal;
            BorderColor = Color.Parse("#5D6778");
            BorderThickness = new Thickness(1);
            BorderRadius = 4;
            ErrorColor = Color.Parse("#E74C3C");
            WarningColor = Color.Parse("#F39C12");
            SuccessColor = Color.Parse("#2ECC71");
            HeaderFontFamily = FontFamily;
            BodyFontFamily = FontFamily;
            MonospaceFontFamily = new FontFamily("Consolas, Monaco, 'Courier New', monospace");
            BaseSkin = null;
            Name = "Dark";
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseSkin"></param>
        public void InheritFrom(Skin baseSkin)
        {
            PrimaryColor = PrimaryColor == default ? baseSkin.PrimaryColor : PrimaryColor;
            SecondaryColor = SecondaryColor == default ? baseSkin.SecondaryColor : SecondaryColor;
            AccentColor = AccentColor == default ? baseSkin.AccentColor : AccentColor;
            PrimaryBackground = PrimaryBackground == default ? baseSkin.PrimaryBackground : PrimaryBackground;
            SecondaryBackground = SecondaryBackground == default ? baseSkin.SecondaryBackground : SecondaryBackground;
            PrimaryTextColor = PrimaryTextColor == default ? baseSkin.PrimaryTextColor : PrimaryTextColor;
            SecondaryTextColor = SecondaryTextColor == default ? baseSkin.SecondaryTextColor : SecondaryTextColor;
            BorderColor = BorderColor == default ? baseSkin.BorderColor : BorderColor;
            ErrorColor = ErrorColor == default ? baseSkin.ErrorColor : ErrorColor;
            WarningColor = WarningColor == default ? baseSkin.WarningColor : WarningColor;
            SuccessColor = SuccessColor == default ? baseSkin.SuccessColor : SuccessColor;

            FontFamily ??= baseSkin.FontFamily;
            HeaderFontFamily ??= baseSkin.HeaderFontFamily;
            BodyFontFamily ??= baseSkin.BodyFontFamily;
            MonospaceFontFamily ??= baseSkin.MonospaceFontFamily;

            FontSizeSmall = FontSizeSmall == 0 ? baseSkin.FontSizeSmall : FontSizeSmall;
            FontSizeMedium = FontSizeMedium == 0 ? baseSkin.FontSizeMedium : FontSizeMedium;
            FontSizeLarge = FontSizeLarge == 0 ? baseSkin.FontSizeLarge : FontSizeLarge;
            FontWeight = FontWeight == default ? baseSkin.FontWeight : FontWeight;

            BorderRadius = BorderRadius == 0 ? baseSkin.BorderRadius : BorderRadius;
            BorderThickness = BorderThickness == default ? baseSkin.BorderThickness : BorderThickness;

            LineHeight = LineHeight == 0 ? baseSkin.LineHeight : LineHeight;
            LetterSpacing = LetterSpacing == 0 ? baseSkin.LetterSpacing : LetterSpacing;
            // Typography scale
            Typography ??= new TypographyScale();
            Typography.ApplyFallbacksFrom(baseSkin.Typography);

            // Merge control theme URIs and styles (child overrides take precedence)
            foreach (var kvp in baseSkin.ControlThemeUris)
                ControlThemeUris.TryAdd(kvp.Key, kvp.Value);

            foreach (var kvp in baseSkin.StyleUris)
                StyleUris.TryAdd(kvp.Key, kvp.Value);
        }
        // Creates a brush from a color
        /// <summary>
        /// Converts the specified <see cref="Color"/> to a <see cref="SolidColorBrush"/>.
        /// </summary>
        /// <param name="color">The <see cref="Color"/> to convert.</param>
        /// <returns>A <see cref="SolidColorBrush"/> representing the specified color.</returns>
        public static SolidColorBrush ToBrush(Color color)
        {
            return new SolidColorBrush(color);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\SkinImportResult.cs
================================================================================

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SkinImportResult
    {
        /// <summary>
        /// 
        /// </summary>
        public Skin? Skin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public bool Success { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public string? ErrorMessage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public List<string> Warnings { get; set; } = new();
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\SkinValidationResult.cs
================================================================================

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// Represents the result of theme validation.
    /// </summary>
    public class SkinValidationResult
    {
        /// <summary>
        /// Gets or sets a value indicating whether the theme validation was successful.
        /// </summary>
        /// <value>
        /// <c>true</c> if the theme validation passed without errors; otherwise, <c>false</c>.
        /// </value>
        public bool IsValid { get; set; }
        /// <summary>
        /// Gets or sets the list of error messages encountered during theme validation.
        /// </summary>
        /// <value>
        /// A <see cref="List{T}"/> of <see cref="string"/> representing the validation errors.
        /// </value>
        public List<string> Errors { get; set; } = new();
        /// <summary>
        /// Gets or sets the list of warnings encountered during theme validation.
        /// </summary>
        /// <value>
        /// A list of warning messages that provide additional information about potential issues
        /// in the theme that do not necessarily invalidate it.
        /// </value>
        public List<string> Warnings { get; set; } = new();

        /// <summary>
        /// Adds an error message to the list of validation errors.
        /// </summary>
        /// <param name="error">The error message to add.</param>
        public void AddError(string error) => Errors.Add(error);
        /// <summary>
        /// Adds a warning message to the list of validation warnings.
        /// </summary>
        /// <param name="warning">The warning message to add.</param>
        public void AddWarning(string warning) => Warnings.Add(warning);
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Model\TypographyScale.cs
================================================================================

// Skin/TypographySystem.cs

namespace Avalonia.Accelerate.Appearance.Model
{
    /// <summary>
    /// Defines typography scale and settings for themes.
    /// </summary>
    public class TypographyScale
    {
        // Display sizes (largest)
        /// <summary>
        /// Gets or sets the size of the largest display typography.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the largest display typography. 
        /// The default value is 57.
        /// </value>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// Gets or sets the medium display typography size.
        /// </summary>
        /// <value>
        /// The size of the medium display typography, typically used for prominent text elements.
        /// The default value is 45.
        /// </value>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// Gets or sets the size of the "Display Small" typography, typically used for smaller display text.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the "Display Small" typography. The default value is 36.
        /// </value>
        public double DisplaySmall { get; set; } = 36;

        // Headline sizes
        /// <summary>
        /// Gets or sets the font size for large headlines in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large headlines. 
        /// The default value is 32.
        /// </value>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// Gets or sets the font size for medium-sized headlines in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized headlines, typically used for emphasizing content
        /// that is less prominent than large headlines but more significant than small headlines.
        /// The default value is 28.
        /// </value>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// Gets or sets the font size for small headline text in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small headline text. 
        /// The default value is 24.
        /// </value>
        public double HeadlineSmall { get; set; } = 24;

        // Title sizes
        /// <summary>
        /// Gets or sets the font size for large titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for large titles, typically used for prominent headings or titles.
        /// The default value is 22.
        /// </value>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// Gets or sets the font size for medium-sized titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized titles, typically used for medium emphasis text elements.
        /// The default value is 16.
        /// </value>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for small titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for small titles, typically used for less prominent headings or titles.
        /// The default value is 14.
        /// </value>
        public double TitleSmall { get; set; } = 14;

        // Label sizes
        /// <summary>
        /// Gets or sets the font size for large labels in the typography scale.
        /// </summary>
        /// <value>
        /// The size of the font for large labels, typically used for prominent labeling.
        /// The default value is 14.
        /// </value>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for medium-sized labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized labels. The default value is 12.
        /// </value>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// Gets or sets the font size for small labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for small labels. The default value is 11.
        /// </value>
        public double LabelSmall { get; set; } = 11;

        // Body sizes
        /// <summary>
        /// Gets or sets the font size for large body text.
        /// </summary>
        /// <value>
        /// The font size for large body text, typically used for primary content areas.
        /// Default value is 16.
        /// </value>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for medium body text in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for medium body text. 
        /// The default value is 14.
        /// </value>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for small body text.
        /// </summary>
        /// <value>
        /// The font size for small body text, typically used for less prominent content.
        /// </value>
        public double BodySmall { get; set; } = 12;

        /// <summary>
        /// Applies a scale factor to all typography sizes.
        /// </summary>
        public void ApplyScale(double scaleFactor)
        {
            DisplayLarge *= scaleFactor;
            DisplayMedium *= scaleFactor;
            DisplaySmall *= scaleFactor;
            HeadlineLarge *= scaleFactor;
            HeadlineMedium *= scaleFactor;
            HeadlineSmall *= scaleFactor;
            TitleLarge *= scaleFactor;
            TitleMedium *= scaleFactor;
            TitleSmall *= scaleFactor;
            LabelLarge *= scaleFactor;
            LabelMedium *= scaleFactor;
            LabelSmall *= scaleFactor;
            BodyLarge *= scaleFactor;
            BodyMedium *= scaleFactor;
            BodySmall *= scaleFactor;
        }

        // Add these methods to TypographyScale.cs
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public TypographyScale Clone()
        {
            return new TypographyScale
            {
                DisplayLarge = DisplayLarge,
                DisplayMedium = DisplayMedium,
                DisplaySmall = DisplaySmall,
                HeadlineLarge = HeadlineLarge,
                HeadlineMedium = HeadlineMedium,
                HeadlineSmall = HeadlineSmall,
                TitleLarge = TitleLarge,
                TitleMedium = TitleMedium,
                TitleSmall = TitleSmall,
                LabelLarge = LabelLarge,
                LabelMedium = LabelMedium,
                LabelSmall = LabelSmall,
                BodyLarge = BodyLarge,
                BodyMedium = BodyMedium,
                BodySmall = BodySmall
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public void Reset()
        {
            DisplayLarge = 57;
            DisplayMedium = 45;
            DisplaySmall = 36;
            HeadlineLarge = 32;
            HeadlineMedium = 28;
            HeadlineSmall = 24;
            TitleLarge = 22;
            TitleMedium = 16;
            TitleSmall = 14;
            LabelLarge = 14;
            LabelMedium = 12;
            LabelSmall = 11;
            BodyLarge = 16;
            BodyMedium = 14;
            BodySmall = 12;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ValidateScale()
        {
            return DisplayLarge > DisplayMedium &&
                   DisplayMedium > DisplaySmall &&
                   HeadlineLarge > HeadlineMedium &&
                   HeadlineMedium > HeadlineSmall &&
                   TitleLarge > TitleMedium &&
                   TitleMedium > TitleSmall &&
                   BodyLarge > BodyMedium &&
                   BodyMedium > BodySmall;
        }

        public void ApplyFallbacksFrom(TypographyScale fallback)
        {
            DisplayLarge = DisplayLarge == 0 ? fallback.DisplayLarge : DisplayLarge;
            DisplayMedium = DisplayMedium == 0 ? fallback.DisplayMedium : DisplayMedium;
            DisplaySmall = DisplaySmall == 0 ? fallback.DisplaySmall : DisplaySmall;
            HeadlineLarge = HeadlineLarge == 0 ? fallback.HeadlineLarge : HeadlineLarge;
            HeadlineMedium = HeadlineMedium == 0 ? fallback.HeadlineMedium : HeadlineMedium;
            HeadlineSmall = HeadlineSmall == 0 ? fallback.HeadlineSmall : HeadlineSmall;
            TitleLarge = TitleLarge == 0 ? fallback.TitleLarge : TitleLarge;
            TitleMedium = TitleMedium == 0 ? fallback.TitleMedium : TitleMedium;
            TitleSmall = TitleSmall == 0 ? fallback.TitleSmall : TitleSmall;
            LabelLarge = LabelLarge == 0 ? fallback.LabelLarge : LabelLarge;
            LabelMedium = LabelMedium == 0 ? fallback.LabelMedium : LabelMedium;
            LabelSmall = LabelSmall == 0 ? fallback.LabelSmall : LabelSmall;
            BodyLarge = BodyLarge == 0 ? fallback.BodyLarge : BodyLarge;
            BodyMedium = BodyMedium == 0 ? fallback.BodyMedium : BodyMedium;
            BodySmall = BodySmall == 0 ? fallback.BodySmall : BodySmall;
        }

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\obj\Avalonia.Accelerate.Appearance.csproj.nuget.dgspec.json
================================================================================

{
  "format": 1,
  "restore": {
    "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj": {}
  },
  "projects": {
    "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj",
        "projectName": "Avalonia.Accelerate.Appearance",
        "projectPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj",
        "packagesPath": "C:\\Users\\jonms\\.nuget\\packages",
        "outputPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "C:\\Program Files\\dotnet\\library-packs": {},
          "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\": {},
          "https://api.nuget.org/v3/index.json": {},
          "https://nuget.pkg.github.com/Cyberitas/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj": {
                "projectPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.200"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "Avalonia": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Desktop": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Fonts.Inter": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.ReactiveUI": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Microsoft.Extensions.DependencyInjection": {
              "target": "Package",
              "version": "[9.0.5, )"
            },
            "Microsoft.Extensions.Logging": {
              "target": "Package",
              "version": "[9.0.5, )"
            },
            "Microsoft.Extensions.Logging.Console": {
              "target": "Package",
              "version": "[9.0.5, )"
            },
            "Newtonsoft.Json": {
              "target": "Package",
              "version": "[13.0.3, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.204/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj",
        "projectName": "Avalonia.Accelerate.Icons",
        "projectPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj",
        "packagesPath": "C:\\Users\\jonms\\.nuget\\packages",
        "outputPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "C:\\Program Files\\dotnet\\library-packs": {},
          "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\": {},
          "https://api.nuget.org/v3/index.json": {},
          "https://nuget.pkg.github.com/Cyberitas/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.200"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "Avalonia": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Desktop": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Diagnostics": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Fonts.Inter": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.ReactiveUI": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Avalonia.Themes.Fluent": {
              "target": "Package",
              "version": "[11.3.1, )"
            },
            "Microsoft.Extensions.DependencyInjection": {
              "target": "Package",
              "version": "[9.0.5, )"
            },
            "Microsoft.Extensions.Logging": {
              "target": "Package",
              "version": "[9.0.5, )"
            },
            "Microsoft.Extensions.Logging.Console": {
              "target": "Package",
              "version": "[9.0.5, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.204/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\obj\project.assets.json
================================================================================

{
  "version": 3,
  "targets": {
    "net8.0": {
      "Avalonia/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia.BuildServices": "0.0.31",
          "Avalonia.Remote.Protocol": "11.3.1",
          "MicroCom.Runtime": "0.11.0"
        },
        "compile": {
          "ref/net8.0/Avalonia.Base.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Controls.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.DesignerSupport.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Dialogs.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Markup.Xaml.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Markup.dll": {
            "related": ".Xaml.xml;.xml"
          },
          "ref/net8.0/Avalonia.Metal.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.MicroCom.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.OpenGL.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.Vulkan.dll": {
            "related": ".xml"
          },
          "ref/net8.0/Avalonia.dll": {
            "related": ".Base.xml;.Controls.xml;.DesignerSupport.xml;.Dialogs.xml;.Markup.Xaml.xml;.Markup.xml;.Metal.xml;.MicroCom.xml;.OpenGL.xml;.Vulkan.xml;.xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Base.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Controls.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.DesignerSupport.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Dialogs.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Markup.Xaml.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Markup.dll": {
            "related": ".Xaml.xml;.xml"
          },
          "lib/net8.0/Avalonia.Metal.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.MicroCom.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.OpenGL.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Vulkan.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.dll": {
            "related": ".Base.xml;.Controls.xml;.DesignerSupport.xml;.Dialogs.xml;.Markup.Xaml.xml;.Markup.xml;.Metal.xml;.MicroCom.xml;.OpenGL.xml;.Vulkan.xml;.xml"
          }
        },
        "build": {
          "buildTransitive/Avalonia.props": {},
          "buildTransitive/Avalonia.targets": {}
        }
      },
      "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
        "type": "package",
        "runtimeTargets": {
          "runtimes/win-arm64/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/av_libglesv2.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "Avalonia.BuildServices/0.0.31": {
        "type": "package",
        "build": {
          "buildTransitive/Avalonia.BuildServices.targets": {}
        }
      },
      "Avalonia.Controls.ColorPicker/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Remote.Protocol": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Desktop/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Native": "11.3.1",
          "Avalonia.Skia": "11.3.1",
          "Avalonia.Win32": "11.3.1",
          "Avalonia.X11": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Diagnostics/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Controls.ColorPicker": "11.3.1",
          "Avalonia.Themes.Simple": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Fonts.Inter/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.FreeDesktop/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Tmds.DBus.Protocol": "0.21.2"
        },
        "compile": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Native/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Native.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Native.dll": {
            "related": ".xml"
          }
        },
        "runtimeTargets": {
          "runtimes/osx/native/libAvaloniaNative.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "Avalonia.ReactiveUI/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "ReactiveUI": "20.1.1",
          "System.Reactive": "6.0.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.ReactiveUI.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.ReactiveUI.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Remote.Protocol/11.3.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Skia/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "HarfBuzzSharp": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.Linux": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.WebAssembly": "8.3.1.1",
          "SkiaSharp": "2.88.9",
          "SkiaSharp.NativeAssets.Linux": "2.88.9",
          "SkiaSharp.NativeAssets.WebAssembly": "2.88.9"
        },
        "compile": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Themes.Fluent/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Themes.Simple/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "related": ".xml"
          }
        }
      },
      "Avalonia.Win32/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Angle.Windows.Natives": "2.1.25547.20250602"
        },
        "compile": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "related": ".Automation.xml;.xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "related": ".xml"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "related": ".Automation.xml;.xml"
          }
        }
      },
      "Avalonia.X11/11.3.1": {
        "type": "package",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.FreeDesktop": "11.3.1",
          "Avalonia.Skia": "11.3.1"
        },
        "compile": {
          "lib/net8.0/Avalonia.X11.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Avalonia.X11.dll": {
            "related": ".xml"
          }
        }
      },
      "DynamicData/8.4.1": {
        "type": "package",
        "dependencies": {
          "System.Reactive": "6.0.0"
        },
        "compile": {
          "lib/net8.0/DynamicData.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/DynamicData.dll": {
            "related": ".xml"
          }
        }
      },
      "HarfBuzzSharp/8.3.1.1": {
        "type": "package",
        "dependencies": {
          "HarfBuzzSharp.NativeAssets.Win32": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.macOS": "8.3.1.1"
        },
        "compile": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "related": ".pdb"
          }
        },
        "runtime": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "related": ".pdb"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-arm"
          },
          "runtimes/linux-arm64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-arm64"
          },
          "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-loongarch64"
          },
          "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-arm"
          },
          "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-arm64"
          },
          "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-loongarch64"
          },
          "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-riscv64"
          },
          "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-x64"
          },
          "runtimes/linux-riscv64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-riscv64"
          },
          "runtimes/linux-x64/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-x64"
          },
          "runtimes/linux-x86/native/libHarfBuzzSharp.so": {
            "assetType": "native",
            "rid": "linux-x86"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/osx/native/libHarfBuzzSharp.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "build": {
          "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.props": {},
          "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.targets": {}
        }
      },
      "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win-arm64/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/libHarfBuzzSharp.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "MicroCom.Runtime/0.11.0": {
        "type": "package",
        "compile": {
          "lib/net5.0/MicroCom.Runtime.dll": {}
        },
        "runtime": {
          "lib/net5.0/MicroCom.Runtime.dll": {}
        }
      },
      "Microsoft.Extensions.Configuration/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netstandard2.0/Microsoft.Extensions.Configuration.Binder.targets": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.5": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "System.Diagnostics.DiagnosticSource": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/Microsoft.Extensions.Logging.Abstractions.targets": {}
        }
      },
      "Microsoft.Extensions.Logging.Configuration/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Configuration": "9.0.5",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Configuration.Binder": "9.0.5",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "Microsoft.Extensions.Options.ConfigurationExtensions": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Configuration.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Configuration.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Console/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging.Configuration": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "System.Text.Json": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Console.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Console.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Options/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/Microsoft.Extensions.Options.targets": {}
        }
      },
      "Microsoft.Extensions.Options.ConfigurationExtensions/9.0.5": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Configuration.Binder": "9.0.5",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Primitives/9.0.5": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "type": "package",
        "compile": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        }
      },
      "ReactiveUI/20.1.1": {
        "type": "package",
        "dependencies": {
          "DynamicData": "8.4.1",
          "Splat": "15.1.1",
          "System.ComponentModel.Annotations": "5.0.0"
        },
        "compile": {
          "lib/net8.0/ReactiveUI.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/ReactiveUI.dll": {
            "related": ".xml"
          }
        }
      },
      "SkiaSharp/2.88.9": {
        "type": "package",
        "dependencies": {
          "SkiaSharp.NativeAssets.Win32": "2.88.9",
          "SkiaSharp.NativeAssets.macOS": "2.88.9"
        },
        "compile": {
          "lib/net6.0/SkiaSharp.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/SkiaSharp.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "SkiaSharp.NativeAssets.Linux/2.88.9": {
        "type": "package",
        "dependencies": {
          "SkiaSharp": "2.88.9"
        },
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-arm"
          },
          "runtimes/linux-arm64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-arm64"
          },
          "runtimes/linux-musl-x64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-musl-x64"
          },
          "runtimes/linux-x64/native/libSkiaSharp.so": {
            "assetType": "native",
            "rid": "linux-x64"
          }
        }
      },
      "SkiaSharp.NativeAssets.macOS/2.88.9": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/osx/native/libSkiaSharp.dylib": {
            "assetType": "native",
            "rid": "osx"
          }
        }
      },
      "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
        "type": "package",
        "compile": {
          "lib/netstandard1.0/_._": {}
        },
        "runtime": {
          "lib/netstandard1.0/_._": {}
        },
        "build": {
          "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props": {},
          "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets": {}
        }
      },
      "SkiaSharp.NativeAssets.Win32/2.88.9": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win-arm64/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-arm64"
          },
          "runtimes/win-x64/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-x64"
          },
          "runtimes/win-x86/native/libSkiaSharp.dll": {
            "assetType": "native",
            "rid": "win-x86"
          }
        }
      },
      "Splat/15.1.1": {
        "type": "package",
        "compile": {
          "lib/net8.0/Splat.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Splat.dll": {
            "related": ".xml"
          }
        }
      },
      "System.ComponentModel.Annotations/5.0.0": {
        "type": "package",
        "compile": {
          "ref/netstandard2.1/System.ComponentModel.Annotations.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/System.ComponentModel.Annotations.dll": {
            "related": ".xml"
          }
        }
      },
      "System.Diagnostics.DiagnosticSource/9.0.5": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "System.IO.Pipelines/9.0.5": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        }
      },
      "System.Reactive/6.0.1": {
        "type": "package",
        "compile": {
          "lib/net6.0/System.Reactive.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Reactive.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "System.Text.Encodings.Web/9.0.5": {
        "type": "package",
        "compile": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "assetType": "runtime",
            "rid": "browser"
          }
        }
      },
      "System.Text.Json/9.0.5": {
        "type": "package",
        "dependencies": {
          "System.IO.Pipelines": "9.0.5",
          "System.Text.Encodings.Web": "9.0.5"
        },
        "compile": {
          "lib/net8.0/System.Text.Json.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/System.Text.Json.targets": {}
        }
      },
      "Tmds.DBus.Protocol/0.21.2": {
        "type": "package",
        "dependencies": {
          "System.IO.Pipelines": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {}
        },
        "runtime": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {}
        }
      },
      "Avalonia.Accelerate.Icons/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Desktop": "11.3.1",
          "Avalonia.Diagnostics": "11.3.1",
          "Avalonia.Fonts.Inter": "11.3.1",
          "Avalonia.ReactiveUI": "11.3.1",
          "Avalonia.Themes.Fluent": "11.3.1",
          "Microsoft.Extensions.DependencyInjection": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Console": "9.0.5"
        },
        "compile": {
          "bin/placeholder/Avalonia.Accelerate.Icons.dll": {}
        },
        "runtime": {
          "bin/placeholder/Avalonia.Accelerate.Icons.dll": {}
        }
      }
    }
  },
  "libraries": {
    "Avalonia/11.3.1": {
      "sha512": "XHZAj64Ywp3su68NBckeccY1N4Cig8J/iTzMEszWDnAWQbH8xgHftcr+DhS7PrANM/uXyFGP9n4+4v3vhJDeWA==",
      "type": "package",
      "path": "avalonia/11.3.1",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "analyzers/dotnet/cs/Avalonia.Analyzers.dll",
        "analyzers/dotnet/cs/Avalonia.Generators.dll",
        "avalonia.11.3.1.nupkg.sha512",
        "avalonia.nuspec",
        "build/Avalonia.Generators.props",
        "build/Avalonia.props",
        "build/Avalonia.targets",
        "build/AvaloniaBuildTasks.props",
        "build/AvaloniaBuildTasks.targets",
        "build/AvaloniaItemSchema.xaml",
        "build/AvaloniaPrivateApis.targets",
        "build/AvaloniaRules.Project.xml",
        "build/AvaloniaSingleProject.targets",
        "build/AvaloniaVersion.props",
        "buildTransitive/Avalonia.Generators.props",
        "buildTransitive/Avalonia.props",
        "buildTransitive/Avalonia.targets",
        "buildTransitive/AvaloniaBuildTasks.props",
        "buildTransitive/AvaloniaBuildTasks.targets",
        "buildTransitive/AvaloniaItemSchema.xaml",
        "buildTransitive/AvaloniaPrivateApis.targets",
        "buildTransitive/AvaloniaRules.Project.xml",
        "buildTransitive/AvaloniaSingleProject.targets",
        "lib/net6.0/Avalonia.Base.dll",
        "lib/net6.0/Avalonia.Base.xml",
        "lib/net6.0/Avalonia.Controls.dll",
        "lib/net6.0/Avalonia.Controls.xml",
        "lib/net6.0/Avalonia.DesignerSupport.dll",
        "lib/net6.0/Avalonia.DesignerSupport.xml",
        "lib/net6.0/Avalonia.Dialogs.dll",
        "lib/net6.0/Avalonia.Dialogs.xml",
        "lib/net6.0/Avalonia.Markup.Xaml.dll",
        "lib/net6.0/Avalonia.Markup.Xaml.xml",
        "lib/net6.0/Avalonia.Markup.dll",
        "lib/net6.0/Avalonia.Markup.xml",
        "lib/net6.0/Avalonia.Metal.dll",
        "lib/net6.0/Avalonia.Metal.xml",
        "lib/net6.0/Avalonia.MicroCom.dll",
        "lib/net6.0/Avalonia.MicroCom.xml",
        "lib/net6.0/Avalonia.OpenGL.dll",
        "lib/net6.0/Avalonia.OpenGL.xml",
        "lib/net6.0/Avalonia.Vulkan.dll",
        "lib/net6.0/Avalonia.Vulkan.xml",
        "lib/net6.0/Avalonia.dll",
        "lib/net6.0/Avalonia.xml",
        "lib/net8.0/Avalonia.Base.dll",
        "lib/net8.0/Avalonia.Base.xml",
        "lib/net8.0/Avalonia.Controls.dll",
        "lib/net8.0/Avalonia.Controls.xml",
        "lib/net8.0/Avalonia.DesignerSupport.dll",
        "lib/net8.0/Avalonia.DesignerSupport.xml",
        "lib/net8.0/Avalonia.Dialogs.dll",
        "lib/net8.0/Avalonia.Dialogs.xml",
        "lib/net8.0/Avalonia.Markup.Xaml.dll",
        "lib/net8.0/Avalonia.Markup.Xaml.xml",
        "lib/net8.0/Avalonia.Markup.dll",
        "lib/net8.0/Avalonia.Markup.xml",
        "lib/net8.0/Avalonia.Metal.dll",
        "lib/net8.0/Avalonia.Metal.xml",
        "lib/net8.0/Avalonia.MicroCom.dll",
        "lib/net8.0/Avalonia.MicroCom.xml",
        "lib/net8.0/Avalonia.OpenGL.dll",
        "lib/net8.0/Avalonia.OpenGL.xml",
        "lib/net8.0/Avalonia.Vulkan.dll",
        "lib/net8.0/Avalonia.Vulkan.xml",
        "lib/net8.0/Avalonia.dll",
        "lib/net8.0/Avalonia.xml",
        "lib/netstandard2.0/Avalonia.Base.dll",
        "lib/netstandard2.0/Avalonia.Base.xml",
        "lib/netstandard2.0/Avalonia.Controls.dll",
        "lib/netstandard2.0/Avalonia.Controls.xml",
        "lib/netstandard2.0/Avalonia.DesignerSupport.dll",
        "lib/netstandard2.0/Avalonia.DesignerSupport.xml",
        "lib/netstandard2.0/Avalonia.Dialogs.dll",
        "lib/netstandard2.0/Avalonia.Dialogs.xml",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.dll",
        "lib/netstandard2.0/Avalonia.Markup.Xaml.xml",
        "lib/netstandard2.0/Avalonia.Markup.dll",
        "lib/netstandard2.0/Avalonia.Markup.xml",
        "lib/netstandard2.0/Avalonia.Metal.dll",
        "lib/netstandard2.0/Avalonia.Metal.xml",
        "lib/netstandard2.0/Avalonia.MicroCom.dll",
        "lib/netstandard2.0/Avalonia.MicroCom.xml",
        "lib/netstandard2.0/Avalonia.OpenGL.dll",
        "lib/netstandard2.0/Avalonia.OpenGL.xml",
        "lib/netstandard2.0/Avalonia.Vulkan.dll",
        "lib/netstandard2.0/Avalonia.Vulkan.xml",
        "lib/netstandard2.0/Avalonia.dll",
        "lib/netstandard2.0/Avalonia.xml",
        "ref/net6.0/Avalonia.Base.dll",
        "ref/net6.0/Avalonia.Base.xml",
        "ref/net6.0/Avalonia.Controls.dll",
        "ref/net6.0/Avalonia.Controls.xml",
        "ref/net6.0/Avalonia.DesignerSupport.dll",
        "ref/net6.0/Avalonia.DesignerSupport.xml",
        "ref/net6.0/Avalonia.Dialogs.dll",
        "ref/net6.0/Avalonia.Dialogs.xml",
        "ref/net6.0/Avalonia.Markup.Xaml.dll",
        "ref/net6.0/Avalonia.Markup.Xaml.xml",
        "ref/net6.0/Avalonia.Markup.dll",
        "ref/net6.0/Avalonia.Markup.xml",
        "ref/net6.0/Avalonia.Metal.dll",
        "ref/net6.0/Avalonia.Metal.xml",
        "ref/net6.0/Avalonia.MicroCom.dll",
        "ref/net6.0/Avalonia.MicroCom.xml",
        "ref/net6.0/Avalonia.OpenGL.dll",
        "ref/net6.0/Avalonia.OpenGL.xml",
        "ref/net6.0/Avalonia.Vulkan.dll",
        "ref/net6.0/Avalonia.Vulkan.xml",
        "ref/net6.0/Avalonia.dll",
        "ref/net6.0/Avalonia.xml",
        "ref/net8.0/Avalonia.Base.dll",
        "ref/net8.0/Avalonia.Base.xml",
        "ref/net8.0/Avalonia.Controls.dll",
        "ref/net8.0/Avalonia.Controls.xml",
        "ref/net8.0/Avalonia.DesignerSupport.dll",
        "ref/net8.0/Avalonia.DesignerSupport.xml",
        "ref/net8.0/Avalonia.Dialogs.dll",
        "ref/net8.0/Avalonia.Dialogs.xml",
        "ref/net8.0/Avalonia.Markup.Xaml.dll",
        "ref/net8.0/Avalonia.Markup.Xaml.xml",
        "ref/net8.0/Avalonia.Markup.dll",
        "ref/net8.0/Avalonia.Markup.xml",
        "ref/net8.0/Avalonia.Metal.dll",
        "ref/net8.0/Avalonia.Metal.xml",
        "ref/net8.0/Avalonia.MicroCom.dll",
        "ref/net8.0/Avalonia.MicroCom.xml",
        "ref/net8.0/Avalonia.OpenGL.dll",
        "ref/net8.0/Avalonia.OpenGL.xml",
        "ref/net8.0/Avalonia.Vulkan.dll",
        "ref/net8.0/Avalonia.Vulkan.xml",
        "ref/net8.0/Avalonia.dll",
        "ref/net8.0/Avalonia.xml",
        "ref/netstandard2.0/Avalonia.Base.dll",
        "ref/netstandard2.0/Avalonia.Base.xml",
        "ref/netstandard2.0/Avalonia.Controls.dll",
        "ref/netstandard2.0/Avalonia.Controls.xml",
        "ref/netstandard2.0/Avalonia.DesignerSupport.dll",
        "ref/netstandard2.0/Avalonia.DesignerSupport.xml",
        "ref/netstandard2.0/Avalonia.Dialogs.dll",
        "ref/netstandard2.0/Avalonia.Dialogs.xml",
        "ref/netstandard2.0/Avalonia.Markup.Xaml.dll",
        "ref/netstandard2.0/Avalonia.Markup.Xaml.xml",
        "ref/netstandard2.0/Avalonia.Markup.dll",
        "ref/netstandard2.0/Avalonia.Markup.xml",
        "ref/netstandard2.0/Avalonia.Metal.dll",
        "ref/netstandard2.0/Avalonia.Metal.xml",
        "ref/netstandard2.0/Avalonia.MicroCom.dll",
        "ref/netstandard2.0/Avalonia.MicroCom.xml",
        "ref/netstandard2.0/Avalonia.OpenGL.dll",
        "ref/netstandard2.0/Avalonia.OpenGL.xml",
        "ref/netstandard2.0/Avalonia.Vulkan.dll",
        "ref/netstandard2.0/Avalonia.Vulkan.xml",
        "ref/netstandard2.0/Avalonia.dll",
        "ref/netstandard2.0/Avalonia.xml",
        "tools/net461/designer/Avalonia.Designer.HostApp.exe",
        "tools/netstandard2.0/Avalonia.Build.Tasks.dll",
        "tools/netstandard2.0/designer/Avalonia.Designer.HostApp.dll"
      ]
    },
    "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
      "sha512": "ZL0VLc4s9rvNNFt19Pxm5UNAkmKNylugAwJPX9ulXZ6JWs/l6XZihPWWTyezaoNOVyEPU8YbURtW7XMAtqXH5A==",
      "type": "package",
      "path": "avalonia.angle.windows.natives/2.1.25547.20250602",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE",
        "avalonia.angle.windows.natives.2.1.25547.20250602.nupkg.sha512",
        "avalonia.angle.windows.natives.nuspec",
        "runtimes/win-arm64/native/av_libglesv2.dll",
        "runtimes/win-x64/native/av_libglesv2.dll",
        "runtimes/win-x86/native/av_libglesv2.dll"
      ]
    },
    "Avalonia.BuildServices/0.0.31": {
      "sha512": "KmCN6Hc+45q4OnF10ge450yVUvWuxU6bdQiyKqiSvrHKpahNrEdk0kG6Ip6GHk2SKOCttGQuA206JVdkldEENg==",
      "type": "package",
      "path": "avalonia.buildservices/0.0.31",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.buildservices.0.0.31.nupkg.sha512",
        "avalonia.buildservices.nuspec",
        "build/Avalonia.BuildServices.targets",
        "buildTransitive/Avalonia.BuildServices.targets",
        "tools/netstandard2.0/Avalonia.BuildServices.Collector.dll",
        "tools/netstandard2.0/Avalonia.BuildServices.dll",
        "tools/netstandard2.0/runtimeconfig.json"
      ]
    },
    "Avalonia.Controls.ColorPicker/11.3.1": {
      "sha512": "+JXaqgsYtEhvi8KFYtdVriHX0P1f1PAdzNckYGbUc7s3COTLdtVRxAfbQ77SKIMx9nJu5H73X4A7y2EPB5pXdQ==",
      "type": "package",
      "path": "avalonia.controls.colorpicker/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.controls.colorpicker.11.3.1.nupkg.sha512",
        "avalonia.controls.colorpicker.nuspec",
        "lib/net6.0/Avalonia.Controls.ColorPicker.dll",
        "lib/net6.0/Avalonia.Controls.ColorPicker.xml",
        "lib/net8.0/Avalonia.Controls.ColorPicker.dll",
        "lib/net8.0/Avalonia.Controls.ColorPicker.xml",
        "lib/netstandard2.0/Avalonia.Controls.ColorPicker.dll",
        "lib/netstandard2.0/Avalonia.Controls.ColorPicker.xml"
      ]
    },
    "Avalonia.Desktop/11.3.1": {
      "sha512": "uFldiNKdZIGGR49CglbWW1xx9aSfJBDf0Yx2jtntZxXQlew1edF8/JEja8tmDgcFjdsrz2HZtIpDbg4ilCjcZQ==",
      "type": "package",
      "path": "avalonia.desktop/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.desktop.11.3.1.nupkg.sha512",
        "avalonia.desktop.nuspec",
        "lib/net6.0/Avalonia.Desktop.dll",
        "lib/net6.0/Avalonia.Desktop.xml",
        "lib/net8.0/Avalonia.Desktop.dll",
        "lib/net8.0/Avalonia.Desktop.xml",
        "lib/netstandard2.0/Avalonia.Desktop.dll",
        "lib/netstandard2.0/Avalonia.Desktop.xml"
      ]
    },
    "Avalonia.Diagnostics/11.3.1": {
      "sha512": "/Jw6JgaJJRc3Y3f+je/WnyXgYixDLq/u74qW2isDC7s1/1nmRJR14oklF6Gc6cIVhLFw0JbFJEn6ZHSOwKAsLg==",
      "type": "package",
      "path": "avalonia.diagnostics/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.diagnostics.11.3.1.nupkg.sha512",
        "avalonia.diagnostics.nuspec",
        "lib/net6.0/Avalonia.Diagnostics.dll",
        "lib/net6.0/Avalonia.Diagnostics.xml",
        "lib/net8.0/Avalonia.Diagnostics.dll",
        "lib/net8.0/Avalonia.Diagnostics.xml",
        "lib/netstandard2.0/Avalonia.Diagnostics.dll",
        "lib/netstandard2.0/Avalonia.Diagnostics.xml"
      ]
    },
    "Avalonia.Fonts.Inter/11.3.1": {
      "sha512": "H/K3IGbo4Eo1jYTCk64mVBECX1TnSfNwVDwVhPoHVkpb6QVZmBB1UilImMLpBYtAYG49O4JILhB5p/rdfeCjZw==",
      "type": "package",
      "path": "avalonia.fonts.inter/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.fonts.inter.11.3.1.nupkg.sha512",
        "avalonia.fonts.inter.nuspec",
        "lib/net6.0/Avalonia.Fonts.Inter.dll",
        "lib/net6.0/Avalonia.Fonts.Inter.xml",
        "lib/net8.0/Avalonia.Fonts.Inter.dll",
        "lib/net8.0/Avalonia.Fonts.Inter.xml",
        "lib/netstandard2.0/Avalonia.Fonts.Inter.dll",
        "lib/netstandard2.0/Avalonia.Fonts.Inter.xml"
      ]
    },
    "Avalonia.FreeDesktop/11.3.1": {
      "sha512": "OXR5lDGz0ACWrvyJPisiLk6j97L8keDxKXFbSI6t4gfM9QiqIcBF7aATbEMx1d4oiey3tH5DgcpzVmop5jmvFA==",
      "type": "package",
      "path": "avalonia.freedesktop/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.freedesktop.11.3.1.nupkg.sha512",
        "avalonia.freedesktop.nuspec",
        "lib/net6.0/Avalonia.FreeDesktop.dll",
        "lib/net6.0/Avalonia.FreeDesktop.xml",
        "lib/net8.0/Avalonia.FreeDesktop.dll",
        "lib/net8.0/Avalonia.FreeDesktop.xml",
        "lib/netstandard2.0/Avalonia.FreeDesktop.dll",
        "lib/netstandard2.0/Avalonia.FreeDesktop.xml"
      ]
    },
    "Avalonia.Native/11.3.1": {
      "sha512": "Ts4PWrpql5mowsxAks/WBI/VheU329CwPE12grEZD46moOhmrQ/tuX8ge8lyAhhVy8h8LFC5KImdDIkhlbeVzQ==",
      "type": "package",
      "path": "avalonia.native/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.native.11.3.1.nupkg.sha512",
        "avalonia.native.nuspec",
        "lib/net6.0/Avalonia.Native.dll",
        "lib/net6.0/Avalonia.Native.xml",
        "lib/net8.0/Avalonia.Native.dll",
        "lib/net8.0/Avalonia.Native.xml",
        "lib/netstandard2.0/Avalonia.Native.dll",
        "lib/netstandard2.0/Avalonia.Native.xml",
        "runtimes/osx/native/libAvaloniaNative.dylib"
      ]
    },
    "Avalonia.ReactiveUI/11.3.1": {
      "sha512": "grTLYdDqx27wKCqY+eh0RnTJjHQhFfCC0dgAgQpIT3pghXH3FQTUbGMOYE8h+GCNg0xxsPCNvZ5bqc6ekRvzoQ==",
      "type": "package",
      "path": "avalonia.reactiveui/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.reactiveui.11.3.1.nupkg.sha512",
        "avalonia.reactiveui.nuspec",
        "lib/net6.0/Avalonia.ReactiveUI.dll",
        "lib/net6.0/Avalonia.ReactiveUI.xml",
        "lib/net8.0/Avalonia.ReactiveUI.dll",
        "lib/net8.0/Avalonia.ReactiveUI.xml",
        "lib/netstandard2.0/Avalonia.ReactiveUI.dll",
        "lib/netstandard2.0/Avalonia.ReactiveUI.xml"
      ]
    },
    "Avalonia.Remote.Protocol/11.3.1": {
      "sha512": "IujOppxgsmjNP2oCas++LWNUTqwzSko7ey60+0tHfy7Q6vnTmtL+0vQidtmoKYea/NYvWqIw+YxLUY3XRwYhSQ==",
      "type": "package",
      "path": "avalonia.remote.protocol/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.remote.protocol.11.3.1.nupkg.sha512",
        "avalonia.remote.protocol.nuspec",
        "lib/net6.0/Avalonia.Remote.Protocol.dll",
        "lib/net6.0/Avalonia.Remote.Protocol.xml",
        "lib/net8.0/Avalonia.Remote.Protocol.dll",
        "lib/net8.0/Avalonia.Remote.Protocol.xml",
        "lib/netstandard2.0/Avalonia.Remote.Protocol.dll",
        "lib/netstandard2.0/Avalonia.Remote.Protocol.xml"
      ]
    },
    "Avalonia.Skia/11.3.1": {
      "sha512": "VSBecGRgd3xtBwFzWNuoSVP1gUO+BV9zX1zTUrw/ftdZKmtOe8m3VT7u2TCBvUSD6nJrSNe6JXHE585kCQFjcQ==",
      "type": "package",
      "path": "avalonia.skia/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.skia.11.3.1.nupkg.sha512",
        "avalonia.skia.nuspec",
        "lib/net6.0/Avalonia.Skia.dll",
        "lib/net6.0/Avalonia.Skia.xml",
        "lib/net8.0/Avalonia.Skia.dll",
        "lib/net8.0/Avalonia.Skia.xml",
        "lib/netstandard2.0/Avalonia.Skia.dll",
        "lib/netstandard2.0/Avalonia.Skia.xml"
      ]
    },
    "Avalonia.Themes.Fluent/11.3.1": {
      "sha512": "3ImtHxSaG1RGk3uY3+dLoAlxrmE3Y2QzqMbIaQgsdEbFxUqKvl2m32Yg/yw00+2nrMy2KGQLL9tkbnvHPWp5OA==",
      "type": "package",
      "path": "avalonia.themes.fluent/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.themes.fluent.11.3.1.nupkg.sha512",
        "avalonia.themes.fluent.nuspec",
        "lib/net6.0/Avalonia.Themes.Fluent.dll",
        "lib/net6.0/Avalonia.Themes.Fluent.xml",
        "lib/net8.0/Avalonia.Themes.Fluent.dll",
        "lib/net8.0/Avalonia.Themes.Fluent.xml",
        "lib/netstandard2.0/Avalonia.Themes.Fluent.dll",
        "lib/netstandard2.0/Avalonia.Themes.Fluent.xml"
      ]
    },
    "Avalonia.Themes.Simple/11.3.1": {
      "sha512": "bUr8cN1Wu9NUro/RHZZkBJdv08+KVtqSUGBMNQZLjyYhxQtgrAo5tTsqWPOjPCCKcIcH+db3VOktWlPfGvz8Fw==",
      "type": "package",
      "path": "avalonia.themes.simple/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.themes.simple.11.3.1.nupkg.sha512",
        "avalonia.themes.simple.nuspec",
        "lib/net6.0/Avalonia.Themes.Simple.dll",
        "lib/net6.0/Avalonia.Themes.Simple.xml",
        "lib/net8.0/Avalonia.Themes.Simple.dll",
        "lib/net8.0/Avalonia.Themes.Simple.xml",
        "lib/netstandard2.0/Avalonia.Themes.Simple.dll",
        "lib/netstandard2.0/Avalonia.Themes.Simple.xml"
      ]
    },
    "Avalonia.Win32/11.3.1": {
      "sha512": "H0jcthY+CHXJq/l/uVLG1SloNowp/6buIxuIv3J8RKiVW6L2XD2uv89KP/n1c2SMQrklvRdwPzOV8WGsYNv85w==",
      "type": "package",
      "path": "avalonia.win32/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.win32.11.3.1.nupkg.sha512",
        "avalonia.win32.nuspec",
        "lib/net6.0/Avalonia.Win32.Automation.dll",
        "lib/net6.0/Avalonia.Win32.Automation.xml",
        "lib/net6.0/Avalonia.Win32.dll",
        "lib/net6.0/Avalonia.Win32.xml",
        "lib/net8.0/Avalonia.Win32.Automation.dll",
        "lib/net8.0/Avalonia.Win32.Automation.xml",
        "lib/net8.0/Avalonia.Win32.dll",
        "lib/net8.0/Avalonia.Win32.xml",
        "lib/netstandard2.0/Avalonia.Win32.Automation.dll",
        "lib/netstandard2.0/Avalonia.Win32.Automation.xml",
        "lib/netstandard2.0/Avalonia.Win32.dll",
        "lib/netstandard2.0/Avalonia.Win32.xml"
      ]
    },
    "Avalonia.X11/11.3.1": {
      "sha512": "Ldr9zW6BFlHvPUpc9UYUKtrtUJzgfZ8ggnp8NWBBZEs0iqIQmZbk9cYJcAxpsL9P1w1MKiaaOBYAKeSxHUJgJA==",
      "type": "package",
      "path": "avalonia.x11/11.3.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "avalonia.x11.11.3.1.nupkg.sha512",
        "avalonia.x11.nuspec",
        "lib/net6.0/Avalonia.X11.dll",
        "lib/net6.0/Avalonia.X11.xml",
        "lib/net8.0/Avalonia.X11.dll",
        "lib/net8.0/Avalonia.X11.xml",
        "lib/netstandard2.0/Avalonia.X11.dll",
        "lib/netstandard2.0/Avalonia.X11.xml"
      ]
    },
    "DynamicData/8.4.1": {
      "sha512": "Mn1+fU/jqxgONEJq8KLQPGWEi7g/hUVTbjZyn4QM0sWWDAVOHPO9WjXWORSykwdfg/6S3GM15qsfz+2EvO+QAQ==",
      "type": "package",
      "path": "dynamicdata/8.4.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE/LICENSE",
        "README.md",
        "dynamicdata.8.4.1.nupkg.sha512",
        "dynamicdata.nuspec",
        "lib/net462/DynamicData.dll",
        "lib/net462/DynamicData.xml",
        "lib/net6.0/DynamicData.dll",
        "lib/net6.0/DynamicData.xml",
        "lib/net7.0/DynamicData.dll",
        "lib/net7.0/DynamicData.xml",
        "lib/net8.0/DynamicData.dll",
        "lib/net8.0/DynamicData.xml",
        "lib/netstandard2.0/DynamicData.dll",
        "lib/netstandard2.0/DynamicData.xml",
        "logo.png"
      ]
    },
    "HarfBuzzSharp/8.3.1.1": {
      "sha512": "tLZN66oe/uiRPTZfrCU4i8ScVGwqHNh5MHrXj0yVf4l7Mz0FhTGnQ71RGySROTmdognAs0JtluHkL41pIabWuQ==",
      "type": "package",
      "path": "harfbuzzsharp/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "harfbuzzsharp.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nuspec",
        "icon.png",
        "lib/net462/HarfBuzzSharp.dll",
        "lib/net462/HarfBuzzSharp.pdb",
        "lib/net6.0/HarfBuzzSharp.dll",
        "lib/net6.0/HarfBuzzSharp.pdb",
        "lib/net8.0-android34.0/HarfBuzzSharp.dll",
        "lib/net8.0-android34.0/HarfBuzzSharp.pdb",
        "lib/net8.0-android34.0/HarfBuzzSharp.xml",
        "lib/net8.0-ios17.0/HarfBuzzSharp.dll",
        "lib/net8.0-ios17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-maccatalyst17.0/HarfBuzzSharp.dll",
        "lib/net8.0-maccatalyst17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-macos14.0/HarfBuzzSharp.dll",
        "lib/net8.0-macos14.0/HarfBuzzSharp.pdb",
        "lib/net8.0-tizen7.0/HarfBuzzSharp.dll",
        "lib/net8.0-tizen7.0/HarfBuzzSharp.pdb",
        "lib/net8.0-tvos17.0/HarfBuzzSharp.dll",
        "lib/net8.0-tvos17.0/HarfBuzzSharp.pdb",
        "lib/net8.0-windows10.0.19041/HarfBuzzSharp.dll",
        "lib/net8.0-windows10.0.19041/HarfBuzzSharp.pdb",
        "lib/net8.0/HarfBuzzSharp.dll",
        "lib/net8.0/HarfBuzzSharp.pdb",
        "lib/netstandard2.0/HarfBuzzSharp.dll",
        "lib/netstandard2.0/HarfBuzzSharp.pdb",
        "lib/netstandard2.1/HarfBuzzSharp.dll",
        "lib/netstandard2.1/HarfBuzzSharp.pdb"
      ]
    },
    "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
      "sha512": "3EZ1mpIiKWRLL5hUYA82ZHteeDIVaEA/Z0rA/wU6tjx6crcAkJnBPwDXZugBSfo8+J3EznvRJf49uMsqYfKrHg==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.linux/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.Linux.targets",
        "harfbuzzsharp.nativeassets.linux.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.linux.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/linux-arm/native/libHarfBuzzSharp.so",
        "runtimes/linux-arm64/native/libHarfBuzzSharp.so",
        "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so",
        "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so",
        "runtimes/linux-riscv64/native/libHarfBuzzSharp.so",
        "runtimes/linux-x64/native/libHarfBuzzSharp.so",
        "runtimes/linux-x86/native/libHarfBuzzSharp.so"
      ]
    },
    "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
      "sha512": "jbtCsgftcaFLCA13tVKo5iWdElJScrulLTKJre36O4YQTIlwDtPPqhRZNk+Y0vv4D1gxbscasGRucUDfS44ofQ==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.macos/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.macOS.targets",
        "buildTransitive/net8.0-macos14.0/HarfBuzzSharp.NativeAssets.macOS.targets",
        "harfbuzzsharp.nativeassets.macos.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.macos.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0-macos14.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/osx/native/libHarfBuzzSharp.dylib"
      ]
    },
    "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
      "sha512": "loJweK2u/mH/3C2zBa0ggJlITIszOkK64HLAZB7FUT670dTg965whLFYHDQo69NmC4+d9UN0icLC9VHidXaVCA==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.webassembly/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.props",
        "buildTransitive/netstandard1.0/HarfBuzzSharp.NativeAssets.WebAssembly.targets",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/2.0.23/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/2.0.6/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.12/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.34/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/mt,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/mt/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/st,simd/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.56/st/libHarfBuzzSharp.a",
        "buildTransitive/netstandard1.0/libHarfBuzzSharp.a/3.1.7/libHarfBuzzSharp.a",
        "harfbuzzsharp.nativeassets.webassembly.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.webassembly.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._"
      ]
    },
    "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
      "sha512": "UsJtQsfAJoFDZrXc4hCUfRPMqccfKZ0iumJ/upcUjz/cmsTgVFGNEL5yaJWmkqsuFYdMWbj/En5/kS4PFl9hBA==",
      "type": "package",
      "path": "harfbuzzsharp.nativeassets.win32/8.3.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "README.md",
        "THIRD-PARTY-NOTICES.txt",
        "buildTransitive/net462/HarfBuzzSharp.NativeAssets.Win32.targets",
        "harfbuzzsharp.nativeassets.win32.8.3.1.1.nupkg.sha512",
        "harfbuzzsharp.nativeassets.win32.nuspec",
        "icon.png",
        "lib/net462/_._",
        "lib/net6.0-windows10.0.19041/_._",
        "lib/net6.0/_._",
        "lib/net8.0-windows10.0.19041/_._",
        "lib/net8.0/_._",
        "lib/netstandard2.0/_._",
        "lib/netstandard2.1/_._",
        "runtimes/win-arm64/native/libHarfBuzzSharp.dll",
        "runtimes/win-x64/native/libHarfBuzzSharp.dll",
        "runtimes/win-x86/native/libHarfBuzzSharp.dll"
      ]
    },
    "MicroCom.Runtime/0.11.0": {
      "sha512": "MEnrZ3UIiH40hjzMDsxrTyi8dtqB5ziv3iBeeU4bXsL/7NLSal9F1lZKpK+tfBRnUoDSdtcW3KufE4yhATOMCA==",
      "type": "package",
      "path": "microcom.runtime/0.11.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/MicroCom.Runtime.dll",
        "lib/netstandard2.0/MicroCom.Runtime.dll",
        "microcom.runtime.0.11.0.nupkg.sha512",
        "microcom.runtime.nuspec"
      ]
    },
    "Microsoft.Extensions.Configuration/9.0.5": {
      "sha512": "uYXLg2Gt8KUH5nT3u+TBpg9VrRcN5+2zPmIjqEHR4kOoBwsbtMDncEJw9HiLvZqGgIo2TR4oraibAoy5hXn2bQ==",
      "type": "package",
      "path": "microsoft.extensions.configuration/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Configuration.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Configuration.targets",
        "lib/net462/Microsoft.Extensions.Configuration.dll",
        "lib/net462/Microsoft.Extensions.Configuration.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.xml",
        "lib/net9.0/Microsoft.Extensions.Configuration.dll",
        "lib/net9.0/Microsoft.Extensions.Configuration.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.xml",
        "microsoft.extensions.configuration.9.0.5.nupkg.sha512",
        "microsoft.extensions.configuration.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.5": {
      "sha512": "ew0G6gIznnyAkbIa67wXspkDFcVektjN3xaDAfBDIPbWph+rbuGaaohFxUSGw28ht7wdcWtTtElKnzfkcDDbOQ==",
      "type": "package",
      "path": "microsoft.extensions.configuration.abstractions/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Configuration.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Configuration.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net9.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net9.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "microsoft.extensions.configuration.abstractions.9.0.5.nupkg.sha512",
        "microsoft.extensions.configuration.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.5": {
      "sha512": "7pQ4Tkyofm8DFWFhqn9ZmG8qSAC2VitWleATj5qob9V9KtoxCVdwRtmiVl/ha3WAgjkEfW++JLWXox9MJwMgkg==",
      "type": "package",
      "path": "microsoft.extensions.configuration.binder/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/cs/Microsoft.Extensions.Configuration.Binder.SourceGeneration.dll",
        "analyzers/dotnet/cs/cs/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/de/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/es/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/fr/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/it/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/ja/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/ko/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/pl/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/pt-BR/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/ru/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/tr/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/zh-Hans/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "analyzers/dotnet/cs/zh-Hant/Microsoft.Extensions.Configuration.Binder.SourceGeneration.resources.dll",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Configuration.Binder.targets",
        "lib/net462/Microsoft.Extensions.Configuration.Binder.dll",
        "lib/net462/Microsoft.Extensions.Configuration.Binder.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.Binder.xml",
        "lib/net9.0/Microsoft.Extensions.Configuration.Binder.dll",
        "lib/net9.0/Microsoft.Extensions.Configuration.Binder.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Binder.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Binder.xml",
        "microsoft.extensions.configuration.binder.9.0.5.nupkg.sha512",
        "microsoft.extensions.configuration.binder.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection/9.0.5": {
      "sha512": "N1Mn0T/tUBPoLL+Fzsp+VCEtneUhhxc1//Dx3BeuQ8AX+XrMlYCfnp2zgpEXnTCB7053CLdiqVWPZ7mEX6MPjg==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net9.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net9.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.xml",
        "microsoft.extensions.dependencyinjection.9.0.5.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.5": {
      "sha512": "cjnRtsEAzU73aN6W7vkWy8Phj5t3Xm78HSqgrbh/O4Q9SK/yN73wZVa21QQY6amSLQRQ/M8N+koGnY6PuvKQsw==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net9.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net9.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "microsoft.extensions.dependencyinjection.abstractions.9.0.5.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging/9.0.5": {
      "sha512": "rQU61lrgvpE/UgcAd4E56HPxUIkX/VUQCxWmwDTLLVeuwRDYTL0q/FLGfAW17cGTKyCh7ywYAEnY3sTEvURsfg==",
      "type": "package",
      "path": "microsoft.extensions.logging/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.targets",
        "lib/net462/Microsoft.Extensions.Logging.dll",
        "lib/net462/Microsoft.Extensions.Logging.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.xml",
        "lib/net9.0/Microsoft.Extensions.Logging.dll",
        "lib/net9.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.xml",
        "microsoft.extensions.logging.9.0.5.nupkg.sha512",
        "microsoft.extensions.logging.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.5": {
      "sha512": "pP1PADCrIxMYJXxFmTVbAgEU7GVpjK5i0/tyfU9DiE0oXQy3JWQaOVgCkrCiePLgS8b5sghM3Fau3EeHiVWbCg==",
      "type": "package",
      "path": "microsoft.extensions.logging.abstractions/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net462/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net8.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net9.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net9.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "microsoft.extensions.logging.abstractions.9.0.5.nupkg.sha512",
        "microsoft.extensions.logging.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Configuration/9.0.5": {
      "sha512": "WgYTJ1/dxdzqaYYMrgC6cZXJVmaoxUmWgsvR9Kg5ZARpy0LMw7fZIZMIiVuaxhItwwFIW0ruhAN+Er2/oVZgmQ==",
      "type": "package",
      "path": "microsoft.extensions.logging.configuration/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Configuration.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Configuration.targets",
        "lib/net462/Microsoft.Extensions.Logging.Configuration.dll",
        "lib/net462/Microsoft.Extensions.Logging.Configuration.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Configuration.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Configuration.xml",
        "lib/net9.0/Microsoft.Extensions.Logging.Configuration.dll",
        "lib/net9.0/Microsoft.Extensions.Logging.Configuration.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Configuration.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Configuration.xml",
        "microsoft.extensions.logging.configuration.9.0.5.nupkg.sha512",
        "microsoft.extensions.logging.configuration.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Console/9.0.5": {
      "sha512": "0BqgvX5y34GOrsJeAypny53OoBnXjyjQCpanrpm7dZawKv5KFk7Tqbu7LFVsRu2T0tLpQ2YHMciMiAWtp+o/Bw==",
      "type": "package",
      "path": "microsoft.extensions.logging.console/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Console.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Console.targets",
        "lib/net462/Microsoft.Extensions.Logging.Console.dll",
        "lib/net462/Microsoft.Extensions.Logging.Console.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Console.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Console.xml",
        "lib/net9.0/Microsoft.Extensions.Logging.Console.dll",
        "lib/net9.0/Microsoft.Extensions.Logging.Console.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Console.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Console.xml",
        "microsoft.extensions.logging.console.9.0.5.nupkg.sha512",
        "microsoft.extensions.logging.console.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options/9.0.5": {
      "sha512": "vPdJQU8YLOUSSK8NL0RmwcXJr2E0w8xH559PGQl4JYsglgilZr9LZnqV2zdgk+XR05+kuvhBEZKoDVd46o7NqA==",
      "type": "package",
      "path": "microsoft.extensions.options/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Options.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Options.targets",
        "buildTransitive/net462/Microsoft.Extensions.Options.targets",
        "buildTransitive/net8.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Options.targets",
        "lib/net462/Microsoft.Extensions.Options.dll",
        "lib/net462/Microsoft.Extensions.Options.xml",
        "lib/net8.0/Microsoft.Extensions.Options.dll",
        "lib/net8.0/Microsoft.Extensions.Options.xml",
        "lib/net9.0/Microsoft.Extensions.Options.dll",
        "lib/net9.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Options.xml",
        "microsoft.extensions.options.9.0.5.nupkg.sha512",
        "microsoft.extensions.options.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options.ConfigurationExtensions/9.0.5": {
      "sha512": "CJbAVdovKPFh2FoKxesu20odRVSbL/vtvzzObnG+5u38sOfzRS2Ncy25id0TjYUGQzMhNnJUHgTUzTMDl/3c9g==",
      "type": "package",
      "path": "microsoft.extensions.options.configurationextensions/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Options.ConfigurationExtensions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Options.ConfigurationExtensions.targets",
        "lib/net462/Microsoft.Extensions.Options.ConfigurationExtensions.dll",
        "lib/net462/Microsoft.Extensions.Options.ConfigurationExtensions.xml",
        "lib/net8.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll",
        "lib/net8.0/Microsoft.Extensions.Options.ConfigurationExtensions.xml",
        "lib/net9.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll",
        "lib/net9.0/Microsoft.Extensions.Options.ConfigurationExtensions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.ConfigurationExtensions.xml",
        "microsoft.extensions.options.configurationextensions.9.0.5.nupkg.sha512",
        "microsoft.extensions.options.configurationextensions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Primitives/9.0.5": {
      "sha512": "b4OAv1qE1C9aM+ShWJu3rlo/WjDwa/I30aIPXqDWSKXTtKl1Wwh6BZn+glH5HndGVVn3C6ZAPQj5nv7/7HJNBQ==",
      "type": "package",
      "path": "microsoft.extensions.primitives/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Primitives.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Primitives.targets",
        "lib/net462/Microsoft.Extensions.Primitives.dll",
        "lib/net462/Microsoft.Extensions.Primitives.xml",
        "lib/net8.0/Microsoft.Extensions.Primitives.dll",
        "lib/net8.0/Microsoft.Extensions.Primitives.xml",
        "lib/net9.0/Microsoft.Extensions.Primitives.dll",
        "lib/net9.0/Microsoft.Extensions.Primitives.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.xml",
        "microsoft.extensions.primitives.9.0.5.nupkg.sha512",
        "microsoft.extensions.primitives.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Newtonsoft.Json/13.0.3": {
      "sha512": "HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "type": "package",
      "path": "newtonsoft.json/13.0.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.md",
        "README.md",
        "lib/net20/Newtonsoft.Json.dll",
        "lib/net20/Newtonsoft.Json.xml",
        "lib/net35/Newtonsoft.Json.dll",
        "lib/net35/Newtonsoft.Json.xml",
        "lib/net40/Newtonsoft.Json.dll",
        "lib/net40/Newtonsoft.Json.xml",
        "lib/net45/Newtonsoft.Json.dll",
        "lib/net45/Newtonsoft.Json.xml",
        "lib/net6.0/Newtonsoft.Json.dll",
        "lib/net6.0/Newtonsoft.Json.xml",
        "lib/netstandard1.0/Newtonsoft.Json.dll",
        "lib/netstandard1.0/Newtonsoft.Json.xml",
        "lib/netstandard1.3/Newtonsoft.Json.dll",
        "lib/netstandard1.3/Newtonsoft.Json.xml",
        "lib/netstandard2.0/Newtonsoft.Json.dll",
        "lib/netstandard2.0/Newtonsoft.Json.xml",
        "newtonsoft.json.13.0.3.nupkg.sha512",
        "newtonsoft.json.nuspec",
        "packageIcon.png"
      ]
    },
    "ReactiveUI/20.1.1": {
      "sha512": "9hNPknWjijnaSWs6auypoXqUptPZcRpUypF+cf1zD50fgW+SEoQda502N3fVZ2eWPcaiUad+z6GaLwOWmUVHNw==",
      "type": "package",
      "path": "reactiveui/20.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE/LICENSE",
        "README.md",
        "lib/net462/ReactiveUI.dll",
        "lib/net462/ReactiveUI.xml",
        "lib/net472/ReactiveUI.dll",
        "lib/net472/ReactiveUI.xml",
        "lib/net6.0-windows10.0.17763/ReactiveUI.dll",
        "lib/net6.0-windows10.0.17763/ReactiveUI.xml",
        "lib/net6.0-windows10.0.19041/ReactiveUI.dll",
        "lib/net6.0-windows10.0.19041/ReactiveUI.xml",
        "lib/net6.0/ReactiveUI.dll",
        "lib/net6.0/ReactiveUI.xml",
        "lib/net8.0-android34.0/ReactiveUI.dll",
        "lib/net8.0-android34.0/ReactiveUI.xml",
        "lib/net8.0-ios17.2/ReactiveUI.dll",
        "lib/net8.0-ios17.2/ReactiveUI.xml",
        "lib/net8.0-maccatalyst17.2/ReactiveUI.dll",
        "lib/net8.0-maccatalyst17.2/ReactiveUI.xml",
        "lib/net8.0-macos14.2/ReactiveUI.dll",
        "lib/net8.0-macos14.2/ReactiveUI.xml",
        "lib/net8.0-tvos17.2/ReactiveUI.dll",
        "lib/net8.0-tvos17.2/ReactiveUI.xml",
        "lib/net8.0-windows10.0.17763/ReactiveUI.dll",
        "lib/net8.0-windows10.0.17763/ReactiveUI.xml",
        "lib/net8.0-windows10.0.19041/ReactiveUI.dll",
        "lib/net8.0-windows10.0.19041/ReactiveUI.xml",
        "lib/net8.0/ReactiveUI.dll",
        "lib/net8.0/ReactiveUI.xml",
        "lib/netstandard2.0/ReactiveUI.dll",
        "lib/netstandard2.0/ReactiveUI.xml",
        "logo.png",
        "reactiveui.20.1.1.nupkg.sha512",
        "reactiveui.nuspec"
      ]
    },
    "SkiaSharp/2.88.9": {
      "sha512": "3MD5VHjXXieSHCleRLuaTXmL2pD0mB7CcOB1x2kA1I4bhptf4e3R27iM93264ZYuAq6mkUyX5XbcxnZvMJYc1Q==",
      "type": "package",
      "path": "skiasharp/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "interactive-extensions/dotnet/SkiaSharp.DotNet.Interactive.dll",
        "lib/monoandroid1.0/SkiaSharp.dll",
        "lib/monoandroid1.0/SkiaSharp.pdb",
        "lib/monoandroid1.0/SkiaSharp.xml",
        "lib/net462/SkiaSharp.dll",
        "lib/net462/SkiaSharp.pdb",
        "lib/net462/SkiaSharp.xml",
        "lib/net6.0-android30.0/SkiaSharp.dll",
        "lib/net6.0-android30.0/SkiaSharp.pdb",
        "lib/net6.0-android30.0/SkiaSharp.xml",
        "lib/net6.0-ios13.6/SkiaSharp.dll",
        "lib/net6.0-ios13.6/SkiaSharp.pdb",
        "lib/net6.0-ios13.6/SkiaSharp.xml",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.dll",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.pdb",
        "lib/net6.0-maccatalyst13.5/SkiaSharp.xml",
        "lib/net6.0-macos10.15/SkiaSharp.dll",
        "lib/net6.0-macos10.15/SkiaSharp.pdb",
        "lib/net6.0-macos10.15/SkiaSharp.xml",
        "lib/net6.0-tizen7.0/SkiaSharp.dll",
        "lib/net6.0-tizen7.0/SkiaSharp.pdb",
        "lib/net6.0-tizen7.0/SkiaSharp.xml",
        "lib/net6.0-tvos13.4/SkiaSharp.dll",
        "lib/net6.0-tvos13.4/SkiaSharp.pdb",
        "lib/net6.0-tvos13.4/SkiaSharp.xml",
        "lib/net6.0/SkiaSharp.dll",
        "lib/net6.0/SkiaSharp.pdb",
        "lib/net6.0/SkiaSharp.xml",
        "lib/netcoreapp3.1/SkiaSharp.dll",
        "lib/netcoreapp3.1/SkiaSharp.pdb",
        "lib/netcoreapp3.1/SkiaSharp.xml",
        "lib/netstandard1.3/SkiaSharp.dll",
        "lib/netstandard1.3/SkiaSharp.pdb",
        "lib/netstandard1.3/SkiaSharp.xml",
        "lib/netstandard2.0/SkiaSharp.dll",
        "lib/netstandard2.0/SkiaSharp.pdb",
        "lib/netstandard2.0/SkiaSharp.xml",
        "lib/netstandard2.1/SkiaSharp.dll",
        "lib/netstandard2.1/SkiaSharp.pdb",
        "lib/netstandard2.1/SkiaSharp.xml",
        "lib/tizen40/SkiaSharp.dll",
        "lib/tizen40/SkiaSharp.pdb",
        "lib/tizen40/SkiaSharp.xml",
        "lib/uap10.0.10240/SkiaSharp.dll",
        "lib/uap10.0.10240/SkiaSharp.pdb",
        "lib/uap10.0.10240/SkiaSharp.xml",
        "lib/uap10.0.16299/SkiaSharp.dll",
        "lib/uap10.0.16299/SkiaSharp.pdb",
        "lib/uap10.0.16299/SkiaSharp.xml",
        "lib/xamarinios1.0/SkiaSharp.dll",
        "lib/xamarinios1.0/SkiaSharp.pdb",
        "lib/xamarinios1.0/SkiaSharp.xml",
        "lib/xamarinmac2.0/SkiaSharp.dll",
        "lib/xamarinmac2.0/SkiaSharp.pdb",
        "lib/xamarinmac2.0/SkiaSharp.xml",
        "lib/xamarintvos1.0/SkiaSharp.dll",
        "lib/xamarintvos1.0/SkiaSharp.pdb",
        "lib/xamarintvos1.0/SkiaSharp.xml",
        "lib/xamarinwatchos1.0/SkiaSharp.dll",
        "lib/xamarinwatchos1.0/SkiaSharp.pdb",
        "lib/xamarinwatchos1.0/SkiaSharp.xml",
        "skiasharp.2.88.9.nupkg.sha512",
        "skiasharp.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.Linux/2.88.9": {
      "sha512": "cWSaJKVPWAaT/WIn9c8T5uT/l4ETwHxNJTkEOtNKjphNo8AW6TF9O32aRkxqw3l8GUdUo66Bu7EiqtFh/XG0Zg==",
      "type": "package",
      "path": "skiasharp.nativeassets.linux/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.Linux.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.Linux.targets",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "runtimes/linux-arm/native/libSkiaSharp.so",
        "runtimes/linux-arm64/native/libSkiaSharp.so",
        "runtimes/linux-musl-x64/native/libSkiaSharp.so",
        "runtimes/linux-x64/native/libSkiaSharp.so",
        "skiasharp.nativeassets.linux.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.linux.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.macOS/2.88.9": {
      "sha512": "Nv5spmKc4505Ep7oUoJ5vp3KweFpeNqxpyGDWyeEPTX2uR6S6syXIm3gj75dM0YJz7NPvcix48mR5laqs8dPuA==",
      "type": "package",
      "path": "skiasharp.nativeassets.macos/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.macOS.targets",
        "build/net6.0-macos10.15/SkiaSharp.NativeAssets.macOS.targets",
        "build/xamarinmac2.0/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/net6.0-macos10.15/SkiaSharp.NativeAssets.macOS.targets",
        "buildTransitive/xamarinmac2.0/SkiaSharp.NativeAssets.macOS.targets",
        "lib/net462/_._",
        "lib/net6.0-macos10.15/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "lib/xamarinmac2.0/_._",
        "runtimes/osx/native/libSkiaSharp.dylib",
        "skiasharp.nativeassets.macos.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.macos.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
      "sha512": "kt06RccBHSnAs2wDYdBSfsjIDbY3EpsOVqnlDgKdgvyuRA8ZFDaHRdWNx1VHjGgYzmnFCGiTJBnXFl5BqGwGnA==",
      "type": "package",
      "path": "skiasharp.nativeassets.webassembly/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props",
        "build/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets",
        "build/netstandard1.0/libSkiaSharp.a/2.0.23/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/2.0.6/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/mt,simd/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/simd/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.12/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/simd,mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/simd,st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.34/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/simd,mt/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/simd,st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.56/st/libSkiaSharp.a",
        "build/netstandard1.0/libSkiaSharp.a/3.1.7/libSkiaSharp.a",
        "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.props",
        "buildTransitive/netstandard1.0/SkiaSharp.NativeAssets.WebAssembly.targets",
        "lib/netstandard1.0/_._",
        "skiasharp.nativeassets.webassembly.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.webassembly.nuspec"
      ]
    },
    "SkiaSharp.NativeAssets.Win32/2.88.9": {
      "sha512": "wb2kYgU7iy84nQLYZwMeJXixvK++GoIuECjU4ECaUKNuflyRlJKyiRhN1MAHswvlvzuvkrjRWlK0Za6+kYQK7w==",
      "type": "package",
      "path": "skiasharp.nativeassets.win32/2.88.9",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.txt",
        "THIRD-PARTY-NOTICES.txt",
        "build/net462/SkiaSharp.NativeAssets.Win32.targets",
        "buildTransitive/net462/SkiaSharp.NativeAssets.Win32.targets",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "lib/netcoreapp3.1/_._",
        "lib/netstandard1.3/_._",
        "runtimes/win-arm64/native/libSkiaSharp.dll",
        "runtimes/win-x64/native/libSkiaSharp.dll",
        "runtimes/win-x86/native/libSkiaSharp.dll",
        "skiasharp.nativeassets.win32.2.88.9.nupkg.sha512",
        "skiasharp.nativeassets.win32.nuspec"
      ]
    },
    "Splat/15.1.1": {
      "sha512": "RHDTdF90FwVbRia2cmuIzkiVoETqnXSB2dDBBi/I35HWXqv4OKGqoMcfcd6obMvO2OmmY5PjU1M62K8LkJafAA==",
      "type": "package",
      "path": "splat/15.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE/LICENSE",
        "lib/net6.0/Splat.dll",
        "lib/net6.0/Splat.xml",
        "lib/net8.0/Splat.dll",
        "lib/net8.0/Splat.xml",
        "lib/netstandard2.0/Splat.dll",
        "lib/netstandard2.0/Splat.xml",
        "splat.15.1.1.nupkg.sha512",
        "splat.nuspec"
      ]
    },
    "System.ComponentModel.Annotations/5.0.0": {
      "sha512": "dMkqfy2el8A8/I76n2Hi1oBFEbG1SfxD2l5nhwXV3XjlnOmwxJlQbYpJH4W51odnU9sARCSAgv7S3CyAFMkpYg==",
      "type": "package",
      "path": "system.componentmodel.annotations/5.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net45/_._",
        "lib/net461/System.ComponentModel.Annotations.dll",
        "lib/netcore50/System.ComponentModel.Annotations.dll",
        "lib/netstandard1.4/System.ComponentModel.Annotations.dll",
        "lib/netstandard2.0/System.ComponentModel.Annotations.dll",
        "lib/netstandard2.1/System.ComponentModel.Annotations.dll",
        "lib/netstandard2.1/System.ComponentModel.Annotations.xml",
        "lib/portable-net45+win8/_._",
        "lib/win8/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net45/_._",
        "ref/net461/System.ComponentModel.Annotations.dll",
        "ref/net461/System.ComponentModel.Annotations.xml",
        "ref/netcore50/System.ComponentModel.Annotations.dll",
        "ref/netcore50/System.ComponentModel.Annotations.xml",
        "ref/netcore50/de/System.ComponentModel.Annotations.xml",
        "ref/netcore50/es/System.ComponentModel.Annotations.xml",
        "ref/netcore50/fr/System.ComponentModel.Annotations.xml",
        "ref/netcore50/it/System.ComponentModel.Annotations.xml",
        "ref/netcore50/ja/System.ComponentModel.Annotations.xml",
        "ref/netcore50/ko/System.ComponentModel.Annotations.xml",
        "ref/netcore50/ru/System.ComponentModel.Annotations.xml",
        "ref/netcore50/zh-hans/System.ComponentModel.Annotations.xml",
        "ref/netcore50/zh-hant/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/System.ComponentModel.Annotations.dll",
        "ref/netstandard1.1/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/de/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/es/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/fr/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/it/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/ja/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/ko/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/ru/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/zh-hans/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.1/zh-hant/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/System.ComponentModel.Annotations.dll",
        "ref/netstandard1.3/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/de/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/es/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/fr/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/it/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/ja/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/ko/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/ru/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/zh-hans/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.3/zh-hant/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/System.ComponentModel.Annotations.dll",
        "ref/netstandard1.4/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/de/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/es/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/fr/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/it/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/ja/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/ko/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/ru/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/zh-hans/System.ComponentModel.Annotations.xml",
        "ref/netstandard1.4/zh-hant/System.ComponentModel.Annotations.xml",
        "ref/netstandard2.0/System.ComponentModel.Annotations.dll",
        "ref/netstandard2.0/System.ComponentModel.Annotations.xml",
        "ref/netstandard2.1/System.ComponentModel.Annotations.dll",
        "ref/netstandard2.1/System.ComponentModel.Annotations.xml",
        "ref/portable-net45+win8/_._",
        "ref/win8/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.componentmodel.annotations.5.0.0.nupkg.sha512",
        "system.componentmodel.annotations.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Diagnostics.DiagnosticSource/9.0.5": {
      "sha512": "WoI5or8kY2VxFdDmsaRZ5yaYvvb+4MCyy66eXo79Cy1uMa7qXeGIlYmZx7R9Zy5S4xZjmqvkk2V8L6/vDwAAEA==",
      "type": "package",
      "path": "system.diagnostics.diagnosticsource/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Diagnostics.DiagnosticSource.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/System.Diagnostics.DiagnosticSource.targets",
        "lib/net462/System.Diagnostics.DiagnosticSource.dll",
        "lib/net462/System.Diagnostics.DiagnosticSource.xml",
        "lib/net8.0/System.Diagnostics.DiagnosticSource.dll",
        "lib/net8.0/System.Diagnostics.DiagnosticSource.xml",
        "lib/net9.0/System.Diagnostics.DiagnosticSource.dll",
        "lib/net9.0/System.Diagnostics.DiagnosticSource.xml",
        "lib/netstandard2.0/System.Diagnostics.DiagnosticSource.dll",
        "lib/netstandard2.0/System.Diagnostics.DiagnosticSource.xml",
        "system.diagnostics.diagnosticsource.9.0.5.nupkg.sha512",
        "system.diagnostics.diagnosticsource.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.IO.Pipelines/9.0.5": {
      "sha512": "5WXo+3MGcnYn54+1ojf+kRzKq1Q6sDUnovujNJ2ky1nl1/kP3+PMil9LPbFvZ2mkhvAGmQcY07G2sfHat/v0Fw==",
      "type": "package",
      "path": "system.io.pipelines/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.IO.Pipelines.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/System.IO.Pipelines.targets",
        "lib/net462/System.IO.Pipelines.dll",
        "lib/net462/System.IO.Pipelines.xml",
        "lib/net8.0/System.IO.Pipelines.dll",
        "lib/net8.0/System.IO.Pipelines.xml",
        "lib/net9.0/System.IO.Pipelines.dll",
        "lib/net9.0/System.IO.Pipelines.xml",
        "lib/netstandard2.0/System.IO.Pipelines.dll",
        "lib/netstandard2.0/System.IO.Pipelines.xml",
        "system.io.pipelines.9.0.5.nupkg.sha512",
        "system.io.pipelines.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Reactive/6.0.1": {
      "sha512": "rHaWtKDwCi9qJ3ObKo8LHPMuuwv33YbmQi7TcUK1C264V3MFnOr5Im7QgCTdLniztP3GJyeiSg5x8NqYJFqRmg==",
      "type": "package",
      "path": "system.reactive/6.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "build/net6.0-windows10.0.19041/_._",
        "build/net6.0/_._",
        "buildTransitive/net6.0-windows10.0.19041/_._",
        "buildTransitive/net6.0/_._",
        "icon.png",
        "lib/net472/System.Reactive.dll",
        "lib/net472/System.Reactive.xml",
        "lib/net6.0-windows10.0.19041/System.Reactive.dll",
        "lib/net6.0-windows10.0.19041/System.Reactive.xml",
        "lib/net6.0/System.Reactive.dll",
        "lib/net6.0/System.Reactive.xml",
        "lib/netstandard2.0/System.Reactive.dll",
        "lib/netstandard2.0/System.Reactive.xml",
        "lib/uap10.0.18362/System.Reactive.dll",
        "lib/uap10.0.18362/System.Reactive.pri",
        "lib/uap10.0.18362/System.Reactive.xml",
        "readme.md",
        "system.reactive.6.0.1.nupkg.sha512",
        "system.reactive.nuspec"
      ]
    },
    "System.Text.Encodings.Web/9.0.5": {
      "sha512": "HJPmqP2FsE+WVUUlTsZ4IFRSyzw40yz0ubiTnsaqm+Xo5fFZhVRvx6Zn8tLXj92/6pbre6OA4QL2A2vnCSKxJA==",
      "type": "package",
      "path": "system.text.encodings.web/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Text.Encodings.Web.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net8.0/_._",
        "buildTransitive/netcoreapp2.0/System.Text.Encodings.Web.targets",
        "lib/net462/System.Text.Encodings.Web.dll",
        "lib/net462/System.Text.Encodings.Web.xml",
        "lib/net8.0/System.Text.Encodings.Web.dll",
        "lib/net8.0/System.Text.Encodings.Web.xml",
        "lib/net9.0/System.Text.Encodings.Web.dll",
        "lib/net9.0/System.Text.Encodings.Web.xml",
        "lib/netstandard2.0/System.Text.Encodings.Web.dll",
        "lib/netstandard2.0/System.Text.Encodings.Web.xml",
        "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll",
        "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.xml",
        "runtimes/browser/lib/net9.0/System.Text.Encodings.Web.dll",
        "runtimes/browser/lib/net9.0/System.Text.Encodings.Web.xml",
        "system.text.encodings.web.9.0.5.nupkg.sha512",
        "system.text.encodings.web.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Text.Json/9.0.5": {
      "sha512": "rnP61ZfloTgPQPe7ecr36loNiGX3g1PocxlKHdY/FUpDSsExKkTxpMAlB4X35wNEPr1X7mkYZuQvW3Lhxmu7KA==",
      "type": "package",
      "path": "system.text.json/9.0.5",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "buildTransitive/net461/System.Text.Json.targets",
        "buildTransitive/net462/System.Text.Json.targets",
        "buildTransitive/net8.0/System.Text.Json.targets",
        "buildTransitive/netcoreapp2.0/System.Text.Json.targets",
        "buildTransitive/netstandard2.0/System.Text.Json.targets",
        "lib/net462/System.Text.Json.dll",
        "lib/net462/System.Text.Json.xml",
        "lib/net8.0/System.Text.Json.dll",
        "lib/net8.0/System.Text.Json.xml",
        "lib/net9.0/System.Text.Json.dll",
        "lib/net9.0/System.Text.Json.xml",
        "lib/netstandard2.0/System.Text.Json.dll",
        "lib/netstandard2.0/System.Text.Json.xml",
        "system.text.json.9.0.5.nupkg.sha512",
        "system.text.json.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Tmds.DBus.Protocol/0.21.2": {
      "sha512": "ScSMrUrrw8px4kK1Glh0fZv/HQUlg1078bNXNPfRPKQ3WbRzV9HpsydYEOgSoMK5LWICMf2bMwIFH0pGjxjcMA==",
      "type": "package",
      "path": "tmds.dbus.protocol/0.21.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net6.0/Tmds.DBus.Protocol.dll",
        "lib/net8.0/Tmds.DBus.Protocol.dll",
        "lib/netstandard2.0/Tmds.DBus.Protocol.dll",
        "lib/netstandard2.1/Tmds.DBus.Protocol.dll",
        "tmds.dbus.protocol.0.21.2.nupkg.sha512",
        "tmds.dbus.protocol.nuspec"
      ]
    },
    "Avalonia.Accelerate.Icons/1.0.0": {
      "type": "project",
      "path": "../Avalonia.Accelerate.Icons/Avalonia.Accelerate.Icons.csproj",
      "msbuildProject": "../Avalonia.Accelerate.Icons/Avalonia.Accelerate.Icons.csproj"
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "Avalonia >= 11.3.1",
      "Avalonia.Accelerate.Icons >= 1.0.0",
      "Avalonia.Desktop >= 11.3.1",
      "Avalonia.Fonts.Inter >= 11.3.1",
      "Avalonia.ReactiveUI >= 11.3.1",
      "Microsoft.Extensions.DependencyInjection >= 9.0.5",
      "Microsoft.Extensions.Logging >= 9.0.5",
      "Microsoft.Extensions.Logging.Console >= 9.0.5",
      "Newtonsoft.Json >= 13.0.3"
    ]
  },
  "packageFolders": {
    "C:\\Users\\jonms\\.nuget\\packages": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj",
      "projectName": "Avalonia.Accelerate.Appearance",
      "projectPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\Avalonia.Accelerate.Appearance.csproj",
      "packagesPath": "C:\\Users\\jonms\\.nuget\\packages",
      "outputPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Appearance\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "C:\\Program Files\\dotnet\\library-packs": {},
        "C:\\Users\\jonms\\AppData\\Roaming\\NuGet\\": {},
        "https://api.nuget.org/v3/index.json": {},
        "https://nuget.pkg.github.com/Cyberitas/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {
            "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj": {
              "projectPath": "C:\\Users\\jonms\\source\\repos\\Avalonia.Accelerate\\Avalonia.Accelerate.Icons\\Avalonia.Accelerate.Icons.csproj"
            }
          }
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.200"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "Avalonia": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Desktop": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.Fonts.Inter": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Avalonia.ReactiveUI": {
            "target": "Package",
            "version": "[11.3.1, )"
          },
          "Microsoft.Extensions.DependencyInjection": {
            "target": "Package",
            "version": "[9.0.5, )"
          },
          "Microsoft.Extensions.Logging": {
            "target": "Package",
            "version": "[9.0.5, )"
          },
          "Microsoft.Extensions.Logging.Console": {
            "target": "Package",
            "version": "[9.0.5, )"
          },
          "Newtonsoft.Json": {
            "target": "Package",
            "version": "[13.0.3, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.204/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\SkinImportExport.cs
================================================================================

// Skin/SkinImportExport.cs
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Media;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Avalonia.Accelerate.Appearance.Services
{
    /// <summary>
    /// Handles theme import and export operations.
    /// </summary>
    public static class SkinImportExport
    {
        private static readonly JsonSerializerOptions _jsonOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        /// <summary>
        /// Exports a skin to a JSON file.
        /// </summary>
        public static async Task<bool> ExportSkinAsync(Skin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(skin, description, author);
                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);

                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an advanced skin with typography to a JSON file.
        /// </summary>
        public static async Task<bool> ExportAdvancedSkinAsync(Skin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(skin, description, author);

                // Add advanced typography
                serializableTheme.AdvancedTypography = new SerializableTypography
                {
                    DisplayLarge = skin.Typography.DisplayLarge,
                    DisplayMedium = skin.Typography.DisplayMedium,
                    DisplaySmall = skin.Typography.DisplaySmall,
                    HeadlineLarge = skin.Typography.HeadlineLarge,
                    HeadlineMedium = skin.Typography.HeadlineMedium,
                    HeadlineSmall = skin.Typography.HeadlineSmall,
                    TitleLarge = skin.Typography.TitleLarge,
                    TitleMedium = skin.Typography.TitleMedium,
                    TitleSmall = skin.Typography.TitleSmall,
                    LabelLarge = skin.Typography.LabelLarge,
                    LabelMedium = skin.Typography.LabelMedium,
                    LabelSmall = skin.Typography.LabelSmall,
                    BodyLarge = skin.Typography.BodyLarge,
                    BodyMedium = skin.Typography.BodyMedium,
                    BodySmall = skin.Typography.BodySmall,
                    HeaderFontFamily = skin.HeaderFontFamily.ToString(),
                    BodyFontFamily = skin.BodyFontFamily.ToString(),
                    MonospaceFontFamily = skin.MonospaceFontFamily.ToString(),
                    LineHeight = skin.LineHeight,
                    LetterSpacing = skin.LetterSpacing,
                    EnableLigatures = skin.EnableLigatures
                };

                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting advanced skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an inheritable skin to a JSON file.
        /// </summary>
        public static async Task<bool> ExportInheritableSkinAsync(InheritableSkin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(skin, description, author);

                // Add inheritance information
                serializableTheme.BaseSkinName = skin.BaseSkinName;
                serializableTheme.PropertyOverrides = skin.PropertyOverrides;

                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting inheritable skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Imports a theme from a JSON file.
        /// </summary>
        public static async Task<SkinImportResult> ImportSkinAsync(string filePath)
        {
            var result = new SkinImportResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.ErrorMessage = $"Skin file does not exist: {filePath}";
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableSkin>(json, _jsonOptions);

                if (serializableTheme == null)
                {
                    result.ErrorMessage = "Invalid theme file format";
                    return result;
                }

                // Validate before converting
                var validation = await ValidateSkinFileAsync(filePath);
                if (!validation.IsValid)
                {
                    result.ErrorMessage = $"Skin validation failed: {string.Join(", ", validation.Errors)}";
                    result.Warnings.AddRange(validation.Warnings);
                    return result;
                }

                result.Skin = ConvertFromSerializable(serializableTheme);
                result.Success = true;
            }
            catch (JsonException ex)
            {
                result.ErrorMessage = $"JSON parsing error: {ex.Message}";
            }
            catch (Exception ex)
            {
                result.ErrorMessage = $"Unexpected error importing theme: {ex.Message}";
            }

            return result;
        }

        /// <summary>
        /// Imports an advanced theme from a JSON file.
        /// </summary>
        public static async Task<Skin?> ImportAdvancedSkinAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableSkin>(json, _jsonOptions);

                if (serializableTheme == null) return null;

                var baseSkin = ConvertFromSerializable(serializableTheme);
                

                // Apply advanced typography if present
                if (serializableTheme.AdvancedTypography != null)
                {
                    var typography = serializableTheme.AdvancedTypography;

                    baseSkin.Typography = new TypographyScale
                    {
                        DisplayLarge = typography.DisplayLarge,
                        DisplayMedium = typography.DisplayMedium,
                        DisplaySmall = typography.DisplaySmall,
                        HeadlineLarge = typography.HeadlineLarge,
                        HeadlineMedium = typography.HeadlineMedium,
                        HeadlineSmall = typography.HeadlineSmall,
                        TitleLarge = typography.TitleLarge,
                        TitleMedium = typography.TitleMedium,
                        TitleSmall = typography.TitleSmall,
                        LabelLarge = typography.LabelLarge,
                        LabelMedium = typography.LabelMedium,
                        LabelSmall = typography.LabelSmall,
                        BodyLarge = typography.BodyLarge,
                        BodyMedium = typography.BodyMedium,
                        BodySmall = typography.BodySmall
                    };

                    baseSkin.HeaderFontFamily = new FontFamily(typography.HeaderFontFamily);
                    baseSkin.BodyFontFamily = new FontFamily(typography.BodyFontFamily);
                    baseSkin.MonospaceFontFamily = new FontFamily(typography.MonospaceFontFamily);
                    baseSkin.LineHeight = typography.LineHeight;
                    baseSkin.LetterSpacing = typography.LetterSpacing;
                    baseSkin.EnableLigatures = typography.EnableLigatures;
                }

                return baseSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing advanced theme: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Imports an inheritable theme from a JSON file.
        /// </summary>
        public static async Task<InheritableSkin?> ImportInheritableSkinAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableSkin>(json, _jsonOptions);

                if (serializableTheme == null) return null;

                var baseSkin = ConvertFromSerializable(serializableTheme);
                var inheritableSkin = new InheritableSkin();

                // Copy all properties from base skin
                CopyPropertiesToInheritable(inheritableSkin, baseSkin);

                // Set inheritance properties
                inheritableSkin.BaseSkinName = serializableTheme.BaseSkinName;
                inheritableSkin.PropertyOverrides = serializableTheme.PropertyOverrides ?? new Dictionary<string, object>();

                return inheritableSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing inheritable theme: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Validates a theme file before importing.
        /// </summary>
        public static async Task<SkinValidationResult> ValidateSkinFileAsync(string filePath)
        {
            var result = new SkinValidationResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.AddError("Skin file does not exist");
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableSkin>(json, _jsonOptions);

                if (serializableTheme == null)
                {
                    result.AddError("Invalid JSON format");
                    return result;
                }

                // Validate required fields
                if (string.IsNullOrWhiteSpace(serializableTheme.Name))
                {
                    result.AddError("Skin name is required");
                }

                // Try to convert to validate color formats
                try
                {
                    var skin = ConvertFromSerializable(serializableTheme);
                    var validator = new SkinValidator();
                    var validationResult = validator.ValidateTheme(skin);

                    result.Errors.AddRange(validationResult.Errors);
                    result.Warnings.AddRange(validationResult.Warnings);
                    result.IsValid = validationResult.IsValid && result.Errors.Count == 0;
                }
                catch (Exception ex)
                {
                    result.AddError($"Invalid theme data: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                result.AddError($"Error reading theme file: {ex.Message}");
            }

            return result;
        }

        /// <summary>
        /// Exports multiple themes to a theme pack file.
        /// </summary>
        public static async Task<bool> ExportSkinPackAsync(Dictionary<string, Skin> themes, string filePath, string packName, string? description = null)
        {
            try
            {
                var themePack = new
                {
                    Name = packName,
                    Description = description,
                    Version = "1.0",
                    CreatedDate = DateTime.Now,
                    Themes = themes.Select(kvp => ConvertToSerializable(kvp.Value, null, null)).ToArray()
                };

                var json = JsonSerializer.Serialize(themePack, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting theme pack: {ex.Message}");
                return false;
            }
        }

        private static SerializableSkin ConvertToSerializable(Skin theme, string? description, string? author)
        {
            return new SerializableSkin
            {
                Name = theme.Name ?? "Unnamed Skin",
                Description = description ?? "",
                Author = author ?? "",
                PrimaryColor = theme.PrimaryColor.ToString(),
                SecondaryColor = theme.SecondaryColor.ToString(),
                AccentColor = theme.AccentColor.ToString(),
                PrimaryBackground = theme.PrimaryBackground.ToString(),
                SecondaryBackground = theme.SecondaryBackground.ToString(),
                PrimaryTextColor = theme.PrimaryTextColor.ToString(),
                SecondaryTextColor = theme.SecondaryTextColor.ToString(),
                BorderColor = theme.BorderColor.ToString(),
                ErrorColor = theme.ErrorColor.ToString(),
                WarningColor = theme.WarningColor.ToString(),
                SuccessColor = theme.SuccessColor.ToString(),
                FontFamily = theme.FontFamily.ToString(),
                FontSizeSmall = theme.FontSizeSmall,
                FontSizeMedium = theme.FontSizeMedium,
                FontSizeLarge = theme.FontSizeLarge,
                FontWeight = theme.FontWeight.ToString(),
                BorderRadius = theme.BorderRadius,
                BorderThickness = new SerializableThickness
                {
                    Left = theme.BorderThickness.Left,
                    Top = theme.BorderThickness.Top,
                    Right = theme.BorderThickness.Right,
                    Bottom = theme.BorderThickness.Bottom
                }
            };
        }

        private static Skin ConvertFromSerializable(SerializableSkin serializableSkin)
        {
            var fontWeight = Enum.TryParse<FontWeight>(serializableSkin.FontWeight, out var weight)
                ? weight
                : FontWeight.Normal;

            return new Skin
            {
                Name = serializableSkin.Name,
                PrimaryColor = Color.Parse(serializableSkin.PrimaryColor),
                SecondaryColor = Color.Parse(serializableSkin.SecondaryColor),
                AccentColor = Color.Parse(serializableSkin.AccentColor),
                PrimaryBackground = Color.Parse(serializableSkin.PrimaryBackground),
                SecondaryBackground = Color.Parse(serializableSkin.SecondaryBackground),
                PrimaryTextColor = Color.Parse(serializableSkin.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(serializableSkin.SecondaryTextColor),
                BorderColor = Color.Parse(serializableSkin.BorderColor),
                ErrorColor = Color.Parse(serializableSkin.ErrorColor),
                WarningColor = Color.Parse(serializableSkin.WarningColor),
                SuccessColor = Color.Parse(serializableSkin.SuccessColor),
                FontFamily = new FontFamily(serializableSkin.FontFamily),
                FontSizeSmall = serializableSkin.FontSizeSmall,
                FontSizeMedium = serializableSkin.FontSizeMedium,
                FontSizeLarge = serializableSkin.FontSizeLarge,
                FontWeight = fontWeight,
                BorderRadius = serializableSkin.BorderRadius,
                BorderThickness = new Thickness(
                    serializableSkin.BorderThickness.Left,
                    serializableSkin.BorderThickness.Top,
                    serializableSkin.BorderThickness.Right,
                    serializableSkin.BorderThickness.Bottom
                )
            };
        }

        private static void CopyPropertiesToInheritable(InheritableSkin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\SkinInheritanceManager.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Services
{
    /// <summary>
    /// Manages theme inheritance and variant creation with dependency injection support.
    /// </summary>
    public class SkinInheritanceManager
    {
        private readonly Dictionary<string, InheritableSkin> _inheritableSkins = new();
        private readonly Dictionary<string, Skin> _resolvedCache = new();
        private readonly ISkinManager _skinManager;

        /// <summary>
        /// Initializes a new instance of the SkinInheritanceManager class.
        /// </summary>
        /// <param name="skinManager">The skin manager to use for resolving base themes.</param>
        /// <exception cref="ArgumentNullException">Thrown when skinManager is null.</exception>
        public SkinInheritanceManager(ISkinManager skinManager)
        {
            _skinManager = skinManager ?? throw new ArgumentNullException(nameof(skinManager));
        }

        /// <summary>
        /// Registers an inheritable theme.
        /// </summary>
        public void RegisterInheritableSkin(string name, InheritableSkin theme)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentException("Skin name cannot be null or empty", nameof(name));
            if (theme == null)
                throw new ArgumentNullException(nameof(theme));

            theme.Name = name;
            _inheritableSkins[name] = theme;
            _resolvedCache.Remove(name); // Clear cache
        }

        /// <summary>
        /// Gets a resolved theme with inheritance applied.
        /// </summary>
        public Skin? GetResolvedTheme(string name)
        {
            if (string.IsNullOrEmpty(name))
                return null;

            if (_resolvedCache.TryGetValue(name, out var cached))
            {
                return cached;
            }

            if (!_inheritableSkins.TryGetValue(name, out var inheritableSkin))
            {
                return null;
            }

            var baseTheme = GetBaseTheme(inheritableSkin);
            var resolved = inheritableSkin.CreateResolvedSkin(baseTheme);

            _resolvedCache[name] = resolved;
            return resolved;
        }

        private Skin? GetBaseTheme(InheritableSkin skin)
        {
            if (string.IsNullOrEmpty(skin.BaseSkinName))
            {
                return null;
            }

            // Handle recursive inheritance
            if (_inheritableSkins.TryGetValue(skin.BaseSkinName, out var baseInheritable))
            {
                return GetResolvedTheme(skin.BaseSkinName);
            }

            // Fall back to skin manager (now uses injected dependency)
            return _skinManager.GetSkin(skin.BaseSkinName);
        }

        /// <summary>
        /// Creates a theme variant by overriding specific properties.
        /// </summary>
        public InheritableSkin CreateVariant(string baseName, string variantName, Dictionary<string, object> overrides)
        {
            if (string.IsNullOrEmpty(baseName))
                throw new ArgumentException("Base theme name cannot be null or empty", nameof(baseName));
            if (string.IsNullOrEmpty(variantName))
                throw new ArgumentException("Variant theme name cannot be null or empty", nameof(variantName));
            if (overrides == null)
                throw new ArgumentNullException(nameof(overrides));

            var variant = new InheritableSkin
            {
                Name = variantName,
                BaseSkinName = baseName,
                PropertyOverrides = overrides
            };

            RegisterInheritableSkin(variantName, variant);
            return variant;
        }

        /// <summary>
        /// Clears the resolved theme cache.
        /// </summary>
        public void ClearCache()
        {
            _resolvedCache.Clear();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\SkinLoaderService.cs
================================================================================

using System.Text.Json;
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Platform;

namespace Avalonia.Accelerate.Appearance.Services
{
    /// <summary>
    /// Defines a service for loading themes in an Avalonia application.
    /// </summary>
    /// <remarks>
    /// This interface provides methods to load theme skins from a specified directory.
    /// Implementations of this interface are responsible for parsing and managing theme-related resources.
    /// </remarks>
    public interface IThemeLoaderService
    {
        /// <summary>
        /// Loads a collection of theme skins from the specified root directory.
        /// </summary>
        /// <param name="themesRoot">
        /// The root directory containing theme skin definitions.
        /// </param>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded theme skins.
        /// </returns>
        List<Skin> LoadSkins(string themesRoot);
    }

    /// <summary>
    /// Provides functionality to load and manage themes for the Avalonia application.
    /// </summary>
    /// <remarks>
    /// This service is responsible for loading theme configurations and resources from a specified directory structure.
    /// It processes theme definitions, control themes, and styles, making them available for use within the application.
    /// </remarks>
    public class SkinLoaderService : IThemeLoaderService
    {

        // List of known embedded themes (keep in sync with package)
        private readonly string[] _embeddedSkins = new[]
        {
            "Dark", "Light", "Ocean Blue", "Cyberpunk",
            "RetroTerminal", "Purple Haze", "Forest Green", "High Contrast", "ModernIce", "Windows 11 Modern", "Zen Garden","Material Design 3"
        };


        public SkinLoaderService()
        {
            
            
        }

        /// <summary>
        /// Loads a collection of <see cref="Skin"/> objects from the specified root directory.
        /// </summary>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded themes.
        /// </returns>
        /// <remarks>
        /// This method scans the specified directory for subdirectories containing theme definitions.
        /// Each theme is expected to have a "theme.json" file and optionally "ControlThemes" and "Styles" directories
        /// containing .axaml files. The method parses these resources and constructs <see cref="Skin"/> objects
        /// with appropriate URIs for control themes and styles.
        /// </remarks>
        public List<Skin> LoadSkins(string themePath = "")
        {
            
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var skins = new List<Skin>();

            foreach (var skinItem in _embeddedSkins)
            {
                var basePath = $"avares://Avalonia.Accelerate.Appearance/Skins/{skinItem}";
                var themeJsonPath = $"{basePath}/theme.json";

                try
                {
                    using var stream = AssetLoader.Open(new Uri(themeJsonPath));
                    using var reader = new StreamReader(stream);
                    var json = reader.ReadToEnd();

                    var serializableTheme = JsonSerializer.Deserialize<SerializableSkin>(json, jsonOptions);
                    if (serializableTheme is null) continue;

                    var skin = serializableTheme.ToSkin();

                    // Load ControlTheme resources
                    if (serializableTheme.ControlThemes?.Count > 0)
                    {
                        foreach (var relativePath in serializableTheme.ControlThemes)
                        {
                            skin.ControlThemeUris.TryAdd(relativePath,relativePath);
                        }
                    }


                    skins.Add(skin);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to load theme '{skinItem}': {ex.Message}");
                }
            }
            foreach (var skin in skins)
            {
                if (skin.BaseSkin!=null)
                {
                    var baseSkin = skins.FirstOrDefault(s => s.Name.Equals(skin.BaseSkin.Name, StringComparison.OrdinalIgnoreCase));
                    baseSkin?.InheritFrom(baseSkin);
                }
            }

            return skins;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\SkinManager.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Media;
using Avalonia.Styling;
using Microsoft.Extensions.DependencyInjection;
using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Services
{
    /// <summary>
    /// Manages the skins (themes) for an Avalonia application, providing functionality to register, retrieve, and apply skins.
    /// </summary>
    /// <remarks>
    /// This class serves as a singleton instance to manage the available skins and the currently applied skin. 
    /// It provides methods to register new skins, retrieve existing skins by name, and apply a specific skin.
    /// Additionally, it raises events when the skin is changed, allowing other components to react to theme updates.
    /// </remarks>
    public class SkinManager : ISkinManager
    {
        private readonly IThemeLoaderService _themeLoaderService;
        private readonly IApplication _application;
        private static SkinManager? _instance;
        private readonly Dictionary<string, Skin?> _availableSkins = new();
        private Skin? _currentSkin;
        private readonly IStylesCollection _styles;
        private readonly List<IStyle> _appliedControlThemes = new();
        private readonly List<IResourceProvider> _appliedControlThemeDictionaries = new();

        /// <summary>
        /// Gets the singleton instance of the <see cref="SkinManager"/> class, 
        /// which is responsible for managing skins (themes) in an Avalonia application.
        /// </summary>
        /// <value>
        /// The singleton instance of <see cref="SkinManager"/>.
        /// </value>
        /// <remarks>
        /// This property ensures that only one instance of <see cref="SkinManager"/> exists throughout the application.
        /// It provides centralized access to skin management functionality, including registering, retrieving, and applying skins.
        /// </remarks>
        public static SkinManager? Instance { get; set; }

        /// <summary>
        /// Gets the currently applied <see cref="Skin"/> in the application.
        /// </summary>
        /// <value>
        /// The <see cref="Skin"/> instance representing the current theme, or <c>null</c> if no theme is applied.
        /// </value>
        /// <remarks>
        /// Use this property to retrieve or monitor the active theme in the application. 
        /// Changes to the current skin can be handled through the <see cref="SkinChanged"/> event.
        /// </remarks>
        public Skin? CurrentSkin
        {
            get => _currentSkin;
            private set => _currentSkin = value;
        }

        /// <summary>
        /// Event that is raised when the skin is changed.
        /// </summary>
        public event EventHandler? SkinChanged;


        /// <summary>
        /// Initializes a new instance of the <see cref="SkinManager"/> class with dependency injection.
        /// </summary>
        /// <param name="themeLoaderService">The theme loader service for loading available themes.</param>
        /// <param name="application">The application abstraction for accessing resources and styles.</param>
        public SkinManager(IThemeLoaderService themeLoaderService, IApplication application)
        {
            _themeLoaderService = themeLoaderService ?? throw new ArgumentNullException(nameof(themeLoaderService));
            _application = application ?? throw new ArgumentNullException(nameof(application));
            _styles = application.AppStyles ?? throw new InvalidOperationException("Application.AppStyles is null.");

            RegisterDefaultSkins();
        }



        /// <summary>
        /// Parameterless constructor for singleton pattern (fallback when DI is not used).
        /// </summary>
        //public SkinManager()
        //{
        //    // Fallback for singleton pattern - create dependencies manually
        //    var serviceProvider = new ServiceCollection()
        //        .AddSingleton<IThemeLoaderService, SkinLoaderService>()
        //        .AddSingleton<IApplication, ApplicationWrapper>()
        //        .BuildServiceProvider();

        //    _themeLoaderService = serviceProvider.GetRequiredService<IThemeLoaderService>();
        //    _application = serviceProvider.GetRequiredService<IApplication>();
        //    _styles = _application.AppStyles; // Add this line
        //    RegisterDefaultSkins();
        //}

        private void RegisterDefaultSkins()
        {
            string themePath = Path.Combine(AppContext.BaseDirectory, "Themes");
            var skins = _themeLoaderService.LoadSkins(themePath);
            foreach (var skin in skins)
                RegisterSkin(skin.Name, skin);
        }

        /// <summary>
        /// Registers a new skin with the specified name.
        /// </summary>
        /// <param name="name">The name of the skin to register. This value must not be <c>null</c>.</param>
        /// <param name="skin">The <see cref="Skin"/> instance to register. This value must not be <c>null</c>.</param>
        /// <remarks>
        /// If both <paramref name="name"/> and <paramref name="skin"/> are not <c>null</c>, the skin is added to the collection of available skins.
        /// </remarks>
        public void RegisterSkin(string? name, Skin? skin)
        {
            if (skin != null && name != null)
            {
                skin.Name = name;
                _availableSkins[name] = skin;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="Skin"/> instance by its name.
        /// </summary>
        /// <param name="name">The name of the skin to retrieve. If <c>null</c>, the current skin is returned.</param>
        /// <returns>
        /// The <see cref="Skin"/> instance associated with the specified name, 
        /// or the current skin if the name is not found or is <c>null</c>.
        /// </returns>
        public Skin? GetSkin(string? name)
        {
            if (name != null && _availableSkins.TryGetValue(name, out Skin? skin))
                return skin;
            return _currentSkin;
        }

        /// <summary>
        /// Retrieves the names of all available skins registered in the <see cref="SkinManager"/>.
        /// </summary>
        /// <returns>A list of strings representing the names of the available skins.</returns>
        public List<string> GetAvailableSkinNames() => _availableSkins.Keys.ToList();

        /// <summary>
        /// Applies a skin to the application by its name.
        /// </summary>
        /// <param name="skinName">
        /// The name of the skin to apply. If the skin with the specified name is not found, 
        /// an error message will be logged.
        /// </param>
        /// <remarks>
        /// If the specified skin exists, it will be applied, and the selected theme will be saved.
        /// If the skin does not exist or an error occurs during the application, an appropriate 
        /// message will be logged.
        /// </remarks>
        /// <exception cref="Exception">
        /// Logs any exception that occurs while applying the skin.
        /// </exception>
        public void ApplySkin(string? skinName)
        {
            try
            {
                if (skinName != null && _availableSkins.TryGetValue(skinName, out Skin? skin))
                {
                    ApplySkin(skin);
                    SaveSelectedSkin(skinName);
                }
                else
                {
                    Console.WriteLine($"Skin not found: {skinName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error applying skin {skinName}: {ex.Message}");
            }
        }

        /// <summary>
        /// Applies the specified skin to the application, updating resources and triggering the <see cref="SkinChanged"/> event.
        /// </summary>
        /// <param name="skin">The <see cref="Skin"/> to be applied. If <c>null</c>, a default skin will be applied.</param>
        /// <remarks>
        /// This method updates the application's resources and typography settings based on the provided skin.
        /// If an exception occurs during the application of the skin, it will be logged to the console.
        /// </remarks>
        public void ApplySkin(Skin? skin)
        {
            if (skin == null)
                skin = new Skin();

            _currentSkin = skin;

            try
            {
                UpdateResources();
                UpdateTypographyResources(skin);
                SkinChanged?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error applying custom skin: {ex.Message}");
            }
        }

        private void UpdateTypographyResources(Skin skin)
        {
            var resources = _application.Resources;
            if (resources == null) return;

            try
            {
                // Typography scale
                resources["DisplayLargeFontSize"] = skin.Typography.DisplayLarge;
                resources["DisplayMediumFontSize"] = skin.Typography.DisplayMedium;
                resources["DisplaySmallFontSize"] = skin.Typography.DisplaySmall;
                resources["HeadlineLargeFontSize"] = skin.Typography.HeadlineLarge;
                resources["HeadlineMediumFontSize"] = skin.Typography.HeadlineMedium;
                resources["HeadlineSmallFontSize"] = skin.Typography.HeadlineSmall;
                resources["TitleLargeFontSize"] = skin.Typography.TitleLarge;
                resources["TitleMediumFontSize"] = skin.Typography.TitleMedium;
                resources["TitleSmallFontSize"] = skin.Typography.TitleSmall;
                resources["LabelLargeFontSize"] = skin.Typography.LabelLarge;
                resources["LabelMediumFontSize"] = skin.Typography.LabelMedium;
                resources["LabelSmallFontSize"] = skin.Typography.LabelSmall;
                resources["BodyLargeFontSize"] = skin.Typography.BodyLarge;
                resources["BodyMediumFontSize"] = skin.Typography.BodyMedium;
                resources["BodySmallFontSize"] = skin.Typography.BodySmall;

                // Font families
                resources["HeaderFontFamily"] = skin.HeaderFontFamily;
                resources["BodyFontFamily"] = skin.BodyFontFamily;
                resources["MonospaceFontFamily"] = skin.MonospaceFontFamily;

                // Text properties
                resources["DefaultLineHeight"] = skin.LineHeight;
                resources["DefaultLetterSpacing"] = skin.LetterSpacing;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating typography resources: {ex.Message}");
            }
        }

        private void UpdateResources()
        {
            if (_currentSkin == null)
                return;

            var resources = _application.Resources;
            if (resources == null)
                return;

            UpdateBrush(resources, "PrimaryColorBrush", _currentSkin.PrimaryColor);
            UpdateBrush(resources, "SecondaryColorBrush", _currentSkin.SecondaryColor);
            UpdateBrush(resources, "AccentBlueBrush", _currentSkin.AccentColor);
            UpdateBrush(resources, "GunMetalDarkBrush", _currentSkin.PrimaryColor);
            UpdateBrush(resources, "GunMetalMediumBrush", _currentSkin.SecondaryColor);
            UpdateBrush(resources, "GunMetalLightBrush", _currentSkin.SecondaryBackground);
            UpdateBrush(resources, "BackgroundBrush", _currentSkin.PrimaryBackground);
            UpdateBrush(resources, "BackgroundLightBrush", _currentSkin.SecondaryBackground);
            var dark = new Color(_currentSkin.PrimaryBackground.A, (byte)(_currentSkin.PrimaryBackground.R * 0.8), (byte)(_currentSkin.PrimaryBackground.G * 0.8), (byte)(_currentSkin.PrimaryBackground.B * 0.8));
            UpdateBrush(resources, "BackgroundDarkBrush", dark);
            UpdateBrush(resources, "TextPrimaryBrush", _currentSkin.PrimaryTextColor);
            UpdateBrush(resources, "TextSecondaryBrush", _currentSkin.SecondaryTextColor);
            UpdateBrush(resources, "BorderBrush", _currentSkin.BorderColor);
            UpdateBrush(resources, "ErrorBrush", _currentSkin.ErrorColor);
            UpdateBrush(resources, "WarningBrush", _currentSkin.WarningColor);
            UpdateBrush(resources, "SuccessBrush", _currentSkin.SuccessColor);

            resources["DefaultFontFamily"] = _currentSkin.FontFamily;
            resources["FontSizeSmall"] = _currentSkin.FontSizeSmall;
            resources["FontSizeMedium"] = _currentSkin.FontSizeMedium;
            resources["FontSizeLarge"] = _currentSkin.FontSizeLarge;
            resources["DefaultFontWeight"] = _currentSkin.FontWeight;
            resources["BorderThickness"] = _currentSkin.BorderThickness;
            resources["CornerRadius"] = new CornerRadius(_currentSkin.BorderRadius);

            ApplyControlThemes(_currentSkin);
            ForceVisualUpdate();
        }

        private void ApplyControlThemes(Skin skin)
        {
            // Remove previously applied styles from Styles collection
            foreach (var style in _appliedControlThemes)
            {
                if (_styles.Contains(style))
                    _styles.Remove(style);
            }

            _appliedControlThemes.Clear();

            // Clear previously applied control themes from MergedDictionaries
            foreach (var controlThemeDict in _appliedControlThemeDictionaries)
            {
                _application.Resources.MergedDictionaries.Remove(controlThemeDict);
            }

            _appliedControlThemeDictionaries.Clear();
            
                // ✅ Add new ControlTheme dictionaries
                foreach (var kvp in skin.ControlThemeUris)
                {
                    Uri baseUri = new Uri($"avares://Avalonia.Accelerate.Appearance/Skins/{skin.Name}/", UriKind.RelativeOrAbsolute);

                    // Create a ResourceInclude instance, specifying the base URI and the source file
                    ResourceInclude myResourceInclude = new ResourceInclude(baseUri)
                    {
                        Source = new Uri(kvp.Value, UriKind.Relative)
                    };
                try
                {
                    _application.Resources.MergedDictionaries.Add(myResourceInclude);
                    _appliedControlThemeDictionaries.Add(myResourceInclude);
                }
                catch (Exception ex)
                {
                    var test = ex.Message;
                }
            }
            


            // ✅ Add new styles (normal StyleInclude)
            foreach (var kvp in skin.StyleUris)
            {
                var style = new StyleInclude(new Uri("avares://Avalonia.Accelerate.Appearance/"))
                {
                    Source = new Uri(kvp.Value)
                };

                _styles.Add(style);
                _appliedControlThemes.Add(style);
            }
        }


        private void UpdateBrush(IResourceDictionary dict, string key, Color color)
        {
            if (dict.TryGetValue(key, out var existingBrush) && existingBrush is SolidColorBrush brush)
                brush.Color = color;
            else
                dict[key] = new SolidColorBrush(color);
        }

        private void ForceVisualUpdate()
        {
            if (_application.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                foreach (var window in desktop.Windows)
                {
                    window.InvalidateVisual();
                    InvalidateRecursive(window);
                }
            }
        }

        private void InvalidateRecursive(Control control)
        {
            control.InvalidateVisual();

            if (control is Panel panel)
            {
                foreach (var child in panel.Children)
                    InvalidateRecursive(child);
            }
            else if (control is ContentControl cc && cc.Content is Control c)
                InvalidateRecursive(c);
            else if (control is ItemsControl ic && ic.ItemsPanelRoot is Control ip)
                InvalidateRecursive(ip);
        }

        /// <summary>
        /// Saves the name of the currently selected theme to the application settings.
        /// </summary>
        /// <param name="skinName">
        /// The name of the theme to save. If <c>null</c>, no action is performed.
        /// </param>
        /// <remarks>
        /// This method updates the theme name in the application settings and persists the changes.
        /// It is typically called after applying a new theme to ensure the selected theme is remembered
        /// across application sessions.
        /// </remarks>
        public void SaveSelectedSkin(string? skinName)
        {
            if (skinName != null)
            {
                AppSettings.Instance.Theme = skinName;
                AppSettings.Instance.Save();
            }
        }

        /// <summary>
        /// Loads the previously saved theme and applies it to the application.
        /// </summary>
        /// <remarks>
        /// This method retrieves the saved theme name from the application settings and applies it if it exists
        /// in the list of available skins. If no saved theme is found or the saved theme is not available,
        /// no changes are made to the current theme.
        /// </remarks>
        /// <example>
        /// Example usage:
        /// <code>
        /// var themeManager = SkinManager.Instance;
        /// themeManager.LoadSavedTheme();
        /// </code>
        /// </example>
        public void LoadSavedTheme()
        {
            var themeName = AppSettings.Instance.Theme;
            if (!string.IsNullOrEmpty(themeName) && _availableSkins.ContainsKey(themeName))
                ApplySkin(themeName);
        }
    }
}


================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\SkinValidator.cs
================================================================================

// Skin/ThemeValidation.cs

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Accelerate.Appearance.Services.ValidationRules;
using Avalonia.Media;

namespace Avalonia.Accelerate.Appearance.Services
{
    /// <summary>
    /// Validates theme configurations and provides error recovery.
    /// </summary>
    public class SkinValidator
    {
        private readonly List<ISkinValidationRule> _validationRules;

        /// <summary>
        /// Initializes a new instance of the <see cref="SkinValidator"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the default validation rules for theme validation, 
        /// including checks for color contrast, font size, border consistency, naming conventions, 
        /// and accessibility compliance.
        /// </remarks>
        public SkinValidator()
        {
            _validationRules = new List<ISkinValidationRule>
            {
                new ColorContrastValidationRule(),
                new FontSizeValidationRule(),
                new BorderValidationRule(),
                new NameValidationRule(),
                new AccessibilityValidationRule()
            };
        }

        /// <summary>
        /// Validates a theme and returns validation results.
        /// </summary>
        // Update the ValidateTheme method in SkinValidator class
        public SkinValidationResult ValidateTheme(Skin theme)
        {
            var result = new SkinValidationResult();

            foreach (var rule in _validationRules)
            {
                var ruleResult = rule.Validate(theme);

                result.Errors.AddRange(ruleResult.Errors);
                result.Warnings.AddRange(ruleResult.Warnings);
            }

            // FIX: Properly set IsValid based on errors
            result.IsValid = result.Errors.Count == 0;

            return result;
        }

        /// <summary>
        /// Attempts to fix validation errors automatically.
        /// </summary>
        public Skin AutoFixTheme(Skin theme)
        {
            var fixedTheme = CloneSkin(theme);

            // Fix null or invalid name
            if (string.IsNullOrWhiteSpace(fixedTheme.Name))
            {
                fixedTheme.Name = "Custom Skin";
            }

            // Ensure font sizes are within reasonable bounds
            fixedTheme.FontSizeSmall = Math.Max(8, Math.Min(20, fixedTheme.FontSizeSmall));
            fixedTheme.FontSizeMedium = Math.Max(10, Math.Min(24, fixedTheme.FontSizeMedium));
            fixedTheme.FontSizeLarge = Math.Max(12, Math.Min(32, fixedTheme.FontSizeLarge));

            // Ensure border radius is positive
            fixedTheme.BorderRadius = Math.Max(0, fixedTheme.BorderRadius);

            // Fix color contrast issues
            fixedTheme = FixColorContrast(fixedTheme);

            return fixedTheme;
        }

        private Skin CloneSkin(Skin original)
        {
            return new Skin
            {
                Name = original.Name,
                PrimaryColor = original.PrimaryColor,
                SecondaryColor = original.SecondaryColor,
                AccentColor = original.AccentColor,
                PrimaryBackground = original.PrimaryBackground,
                SecondaryBackground = original.SecondaryBackground,
                PrimaryTextColor = original.PrimaryTextColor,
                SecondaryTextColor = original.SecondaryTextColor,
                FontFamily = original.FontFamily,
                FontSizeSmall = original.FontSizeSmall,
                FontSizeMedium = original.FontSizeMedium,
                FontSizeLarge = original.FontSizeLarge,
                FontWeight = original.FontWeight,
                BorderColor = original.BorderColor,
                BorderThickness = original.BorderThickness,
                BorderRadius = original.BorderRadius,
                ErrorColor = original.ErrorColor,
                WarningColor = original.WarningColor,
                SuccessColor = original.SuccessColor
            };
        }

        private Skin FixColorContrast(Skin theme)
        {
            // Calculate contrast ratio and adjust if needed
            var primaryContrastRatio = CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);

            if (primaryContrastRatio < 4.5) // WCAG AA minimum
            {
                // Adjust text color for better contrast
                theme.PrimaryTextColor = AdjustColorForContrast(theme.PrimaryTextColor, theme.PrimaryBackground, 4.5);
            }

            var secondaryContrastRatio = CalculateContrastRatio(theme.SecondaryTextColor, theme.SecondaryBackground);

            if (secondaryContrastRatio < 3.0) // More lenient for secondary text
            {
                theme.SecondaryTextColor =
                    AdjustColorForContrast(theme.SecondaryTextColor, theme.SecondaryBackground, 3.0);
            }

            return theme;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="foreground"></param>
        /// <param name="background"></param>
        /// <returns></returns>
        public double CalculateContrastRatio(Color foreground, Color background)
        {
            try
            {
                var fgLuminance = GetRelativeLuminance(foreground);
                var bgLuminance = GetRelativeLuminance(background);

                var lighter = Math.Max(fgLuminance, bgLuminance);
                var darker = Math.Min(fgLuminance, bgLuminance);

                return (lighter + 0.05) / (darker + 0.05);
            }
            catch (Exception)
            {
                // Return a safe default contrast ratio
                return 1.0;
            }
        }

        private double GetRelativeLuminance(Color color)
        {
            var r = GetLuminanceComponent(color.R / 255.0);
            var g = GetLuminanceComponent(color.G / 255.0);
            var b = GetLuminanceComponent(color.B / 255.0);

            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        }

        private double GetLuminanceComponent(double component)
        {
            return component <= 0.03928
                ? component / 12.92
                : Math.Pow((component + 0.055) / 1.055, 2.4);
        }

        private Color AdjustColorForContrast(Color foreground, Color background, double targetRatio)
        {
            var bgLuminance = GetRelativeLuminance(background);
            var isDarkBackground = bgLuminance < 0.5;

            // For dark backgrounds, make text lighter; for light backgrounds, make text darker
            var step = isDarkBackground ? 10 : -10;
            var adjustedColor = foreground;

            for (int i = 0; i < 25; i++) // Limit iterations to prevent infinite loop
            {
                var ratio = CalculateContrastRatio(adjustedColor, background);
                if (ratio >= targetRatio) break;

                adjustedColor = Color.FromRgb(
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.R + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.G + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.B + step))
                );
            }

            return adjustedColor;
        }
    }
   
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\AppTheme.axaml
================================================================================

<!--  Themes/AppTheme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/ColorTheme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/CustomThemes.axaml" />

    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Border.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
    </ControlTheme>

    <ControlTheme x:Key="CardBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="BoxShadow" Value="0 1 3 0 #15000000" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
    </ControlTheme>

    <!--  NEW: Toolbar Container Border Theme  -->
    <ControlTheme x:Key="ToolbarContainerBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Button.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Design.PreviewWith>
        <StackPanel
            Width="400"
            Background="{DynamicResource BackgroundBrush}"
            Spacing="15">
            <!--  Primary Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Primary Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Elevated Primary"
                    Theme="{StaticResource ElevatedPrimaryButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Gradient Primary"
                    Theme="{StaticResource GradientPrimaryButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Modern Primary"
                    Theme="{StaticResource ModernPrimaryButtonTheme}" />
            </WrapPanel>

            <!--  Secondary Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Secondary Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Outlined"
                    Theme="{StaticResource OutlineButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Ghost"
                    Theme="{StaticResource GhostButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Soft"
                    Theme="{StaticResource SoftButtonTheme}" />
            </WrapPanel>

            <!--  Status Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Status Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Success"
                    Theme="{StaticResource SuccessButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Warning"
                    Theme="{StaticResource WarningButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Danger"
                    Theme="{StaticResource DangerButtonTheme}" />
            </WrapPanel>

            <!--  Specialty Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Specialty Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Glass"
                    Theme="{StaticResource GlassButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Neon"
                    Theme="{StaticResource NeonButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Minimal"
                    Theme="{StaticResource MinimalButtonTheme}" />
            </WrapPanel>
        </StackPanel>
    </Design.PreviewWith>

    <!--  Enhanced Primary Button with Elevation  -->
    <ControlTheme x:Key="ElevatedPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #40000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Transitions>
                        <Transitions>
                            <BoxShadowsTransition Property="BoxShadow" Duration="0:0:0.2" />
                        </Transitions>
                    </Border.Transitions>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="0 4 16 0 #60000000" />
        </Style>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="0 1 4 0 #30000000" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="none" />
        </Style>
    </ControlTheme>

    <!--  Gradient Primary Button  -->
    <ControlTheme x:Key="GradientPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="20,10" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.2" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border BoxShadow="0 2 8 0 #4027AE60" CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,100%">
                            <GradientStop Offset="0" Color="#3498DB" />
                            <GradientStop Offset="1" Color="#2980B9" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.05)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Modern Primary Button  -->
    <ControlTheme x:Key="ModernPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="18,10" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <DoubleTransition Property="Opacity" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid>
                        <!--  Overlay for hover effect  -->
                        <Border
                            Name="PART_Overlay"
                            Background="White"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Opacity="0" />

                        <ContentPresenter
                            Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Overlay">
            <Setter Property="Opacity" Value="0.1" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Overlay">
            <Setter Property="Opacity" Value="0.2" />
        </Style>
    </ControlTheme>

    <!--  Outline Button Theme  -->
    <ControlTheme x:Key="OutlineButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <BrushTransition Property="Foreground" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  Ghost Button Theme  -->
    <ControlTheme x:Key="GhostButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        </Style>
    </ControlTheme>

    <!--  Soft Button Theme  -->
    <ControlTheme x:Key="SoftButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Success Button Theme  -->
    <ControlTheme x:Key="SuccessButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 0 30 0 #803498DB, inset 0 0 20 0 #203498DB"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Warning Button Theme  -->
    <ControlTheme x:Key="WarningButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 0 30 0 #803498DB, inset 0 0 20 0 #203498DB"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Danger Button Theme  -->
    <ControlTheme x:Key="DangerButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ErrorBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 1 4 0 #30000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Glass Button Theme  -->
    <ControlTheme x:Key="GlassButtonTheme" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#40FFFFFF" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.2" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 4 0 #30000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%">
                            <GradientStop Offset="0" Color="#20FFFFFF" />
                            <GradientStop Offset="1" Color="#10FFFFFF" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Neon Button Theme  -->
    <ControlTheme x:Key="NeonButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>

                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #4027AE60"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">

            <Setter Property="Background" Value="#103498DB" />
        </Style>

        <Style Selector="^:pressed">

            <Setter Property="Background" Value="#203498DB" />
        </Style>
    </ControlTheme>

    <!--  Minimal Button Theme  -->
    <ControlTheme x:Key="MinimalButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,6" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Foreground" Duration="0:0:0.2" />
                <DoubleTransition Property="Opacity" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
    </ControlTheme>


    <!--  Primary Button Theme  -->
    <ControlTheme x:Key="PrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Secondary Button Theme  -->
    <ControlTheme x:Key="SecondaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Browse Button Theme  -->
    <ControlTheme x:Key="BrowseButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="PART_Border"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 2 0 #10000000"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    IsHitTestVisible="True">
                    <ContentPresenter
                        x:Name="PART_ContentPresenter"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        IsHitTestVisible="True" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource BackgroundDarkBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryDark}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="RenderTransform" Value="none" />
        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:.075" />
            </Transitions>
        </Setter>

        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    x:Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    RecognizesAccessKey="True" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>

        <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

        <Style Selector="^.accent">
            <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.9" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.8" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
                <Setter Property="Opacity" Value="0.6" />
            </Style>
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="ToolbarButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="15,5" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  NEW: Toolbar Primary Button Theme (for Analyze button)  -->
    <ControlTheme x:Key="ToolbarPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="20,8" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Existing default ControlTheme  -->

</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\CheckBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Design.PreviewWith>
        <Border
            Width="300"
            Padding="20"
            Background="{DynamicResource BackgroundBrush}">
            <StackPanel Spacing="10">
                <CheckBox Content="Unchecked" />
                <CheckBox Content="Checked" IsChecked="True" />
                <CheckBox
                    Content="Indeterminate"
                    IsChecked="{x:Null}"
                    IsThreeState="True" />
                <CheckBox Content="Disabled" IsEnabled="False" />
                <CheckBox
                    Content="Disabled Checked"
                    IsChecked="True"
                    IsEnabled="False" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>

    <ControlTheme x:Key="CustomCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="8,2,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid ColumnDefinitions="Auto,*">
                    <Border
                        Name="PART_Border"
                        Width="16"
                        Height="16"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource CornerRadius}">
                        <Panel>
                            <!--  Checked state checkmark  -->
                            <Path
                                Name="CheckMark"
                                Width="10"
                                Height="10"
                                Margin="0,1,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 1,5 L 4,9 L 9,1"
                                IsVisible="False"
                                Stretch="Uniform"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeLineCap="Round"
                                StrokeThickness="2" />

                            <!--  Indeterminate state indicator  -->
                            <Rectangle
                                Name="IndeterminateMark"
                                Width="9"
                                Height="9"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{DynamicResource TextPrimaryBrush}"
                                IsVisible="False"
                                RadiusX="1"
                                RadiusY="1" />
                        </Panel>
                    </Border>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}"
                        TextWrapping="Wrap" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Normal state  -->
        <Style Selector="^">
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>

        <!--  PointerOver state  -->
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Checked state  -->
        <Style Selector="^:checked /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:checked /template/ Path#CheckMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Indeterminate state  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.7" />
        </Style>

        <Style Selector="^:indeterminate /template/ Rectangle#IndeterminateMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ColorTheme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=netstandard">

    <!--  Color Brushes  -->
    <!--  Base colors  -->
    <Color x:Key="GunMetalDark">#343B48</Color>
    <Color x:Key="GunMetalMedium">#3D4654</Color>
    <Color x:Key="GunMetalLight">#464F62</Color>

    <Color x:Key="PrimaryColor">#2C313D</Color>
    <Color x:Key="SecondaryColor">#3D4654</Color>
    <Color x:Key="BackgroundLight">#F5F5F5</Color>
    <Color x:Key="BackgroundDark">#222831</Color>

    <Color x:Key="TextPrimaryLight">Pink</Color>
    <Color x:Key="TextPrimaryDark">#FFFFFF</Color>
    <Color x:Key="TextSecondaryLight">#555555</Color>
    <Color x:Key="TextSecondaryDark">#BBCDE5</Color>
    <Color x:Key="BorderLight">#CCCCCC</Color>
    <Color x:Key="BorderDark">#5D6778</Color>


    <!--  Accent Colors  -->
    <Color x:Key="AccentBlue">#2D7DD2</Color>
    <Color x:Key="AccentGreen">#52A447</Color>
    <Color x:Key="AccentRed">#E45649</Color>
    <Color x:Key="AccentOrange">#E5C07B</Color>
    <Color x:Key="AccentPurple">#C678DD</Color>
    <Color x:Key="AccentCyan">#56B6C2</Color>


    <!--  Status colors  -->
    <Color x:Key="ErrorColor">#E74C3C</Color>
    <Color x:Key="WarningColor">#F39C12</Color>
    <Color x:Key="SuccessColor">#2ECC71</Color>

    <!--  Brushes - Dynamic based on theme  -->
    <SolidColorBrush x:Key="GunMetalDarkBrush" Color="{DynamicResource GunMetalDark}" />
    <SolidColorBrush x:Key="GunMetalMediumBrush" Color="{DynamicResource GunMetalMedium}" />
    <SolidColorBrush x:Key="GunMetalLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="GunMetalAccentBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="AccentBlueBrush" Color="{DynamicResource AccentBlue}" />
    <SolidColorBrush x:Key="PrimaryColorBrush" Color="{DynamicResource PrimaryColor}" />
    <SolidColorBrush x:Key="SecondaryColorBrush" Color="{DynamicResource SecondaryColor}" />

    <!--  Dynamic Background Brushes  -->
    <SolidColorBrush x:Key="BackgroundBrush" Color="{DynamicResource BackgroundDark}" />
    <SolidColorBrush x:Key="BackgroundLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="BackgroundDarkBrush" Color="{DynamicResource BackgroundDark}" />

    <!--  Dynamic Text Brushes  -->
    <SolidColorBrush x:Key="TextPrimaryBrush" Color="{DynamicResource TextPrimaryDark}" />
    <SolidColorBrush x:Key="TextSecondaryBrush" Color="{DynamicResource TextSecondaryDark}" />

    <!--  Border Brush  -->
    <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource BorderDark}" />

    <!--  Status Brushes  -->
    <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource ErrorColor}" />
    <SolidColorBrush x:Key="WarningBrush" Color="{DynamicResource WarningColor}" />
    <SolidColorBrush x:Key="SuccessBrush" Color="{DynamicResource SuccessColor}" />

    <!--  Font Settings  -->
    <FontFamily x:Key="DefaultFontFamily">Segoe UI, San Francisco, Helvetica, Arial, sans-serif</FontFamily>
    <sys:Double x:Key="FontSizeSmall">12</sys:Double>
    <sys:Double x:Key="FontSizeNormal">14</sys:Double>
    <sys:Double x:Key="FontSizeMedium">16</sys:Double>
    <sys:Double x:Key="FontSizeLarge">24</sys:Double>
    <FontWeight x:Key="DefaultFontWeight">Normal</FontWeight>
    <FontWeight x:Key="HeadingFontWeight">SemiBold</FontWeight>

    <!--  Border Settings  -->
    <Thickness x:Key="BorderThickness">1</Thickness>
    <CornerRadius x:Key="CornerRadius">4</CornerRadius>

    <!--  Margin and Padding Presets  -->
    <Thickness x:Key="StandardMargin">16</Thickness>
    <Thickness x:Key="StandardPadding">16</Thickness>
    <Thickness x:Key="SmallMargin">8</Thickness>
    <Thickness x:Key="SmallPadding">8</Thickness>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ComboBox.Theme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <!--  ComboBox Theming Constants  -->
  <x:Double x:Key="ComboBoxPopupMaxHeight">400</x:Double>
  <Thickness x:Key="ComboBoxDropdownContentMargin">4</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderThickness">1</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderPadding">4</Thickness>
  <Thickness x:Key="ComboBoxTopHeaderMargin">0,0,0,4</Thickness>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItems">15</x:Int32>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItemsThatCanBeShownOnOneSide">7</x:Int32>
  <Thickness x:Key="ComboBoxPadding">12,5,0,7</Thickness>
  <Thickness x:Key="ComboBoxEditableTextPadding">11,5,32,6</Thickness>
  <x:Double x:Key="ComboBoxMinHeight">32</x:Double>

  <ControlTheme x:Key="{x:Type ComboBox}" TargetType="ComboBox">
    <Setter Property="Padding" Value="{DynamicResource ComboBoxPadding}" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
    <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MinHeight" Value="{DynamicResource ComboBoxMinHeight}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="PlaceholderForeground" Value="{DynamicResource TextSecondaryBrush}" />
    <Setter Property="Template">
      <ControlTemplate>
        <DataValidationErrors>
          <Grid ColumnDefinitions="*,32">
            <Border
                x:Name="Background"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                MinWidth="120"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}" />
            <Border
                x:Name="HighlightBackground"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                IsVisible="False" />
            <TextBlock
                x:Name="PlaceholderTextBlock"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Foreground="{TemplateBinding PlaceholderForeground}"
                IsVisible="{TemplateBinding SelectionBoxItem,
                                                        Converter={x:Static ObjectConverters.IsNull}}"
                Text="{TemplateBinding PlaceholderText}" />
            <ContentControl
                x:Name="ContentPresenter"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" />

            <Border
                x:Name="DropDownOverlay"
                Grid.Column="1"
                Width="30"
                Margin="0,1,1,1"
                HorizontalAlignment="Right"
                Background="Transparent"
                IsVisible="False" />

            <PathIcon
                x:Name="DropDownGlyph"
                Grid.Column="1"
                Width="12"
                Height="12"
                Margin="0,0,10,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z"
                Foreground="{DynamicResource TextPrimaryBrush}"
                IsHitTestVisible="False"
                UseLayoutRounding="False" />

            <Popup
                Name="PART_Popup"
                MinWidth="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}}"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                InheritsTransform="True"
                IsLightDismissEnabled="True"
                IsOpen="{TemplateBinding IsDropDownOpen,
                                                     Mode=TwoWay}"
                PlacementTarget="Background"
                WindowManagerAddShadowHint="False">
              <Border
                  x:Name="PopupBorder"
                  Padding="{DynamicResource ComboBoxDropdownBorderPadding}"
                  HorizontalAlignment="Stretch"
                  Background="{DynamicResource BackgroundBrush}"
                  BorderBrush="{DynamicResource BorderBrush}"
                  BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}"
                  CornerRadius="{DynamicResource CornerRadius}">
                <ScrollViewer
                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                    IsDeferredScrollingEnabled="{TemplateBinding (ScrollViewer.IsDeferredScrollingEnabled)}"
                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter
                      Name="PART_ItemsPresenter"
                      Margin="{DynamicResource ComboBoxDropdownContentMargin}"
                      ItemsPanel="{TemplateBinding ItemsPanel}" />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </DataValidationErrors>
      </ControlTemplate>
    </Setter>

    <!--  PointerOver State  -->
    <Style Selector="^:pointerover /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Pressed State  -->
    <Style Selector="^:pressed /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Error State  -->
    <Style Selector="^:error /template/ Border#Background">
      <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
    </Style>

    <!--  Focus Pressed State  -->
    <Style Selector="^:focused:pressed">
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Focused State  -->
    <Style Selector="^:focus-visible">
      <Style Selector="^ /template/ Border#HighlightBackground">
        <Setter Property="IsVisible" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Disabled State  -->
    <Style Selector="^:disabled">
      <Style Selector="^ /template/ Border#Background">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="8,4" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <ControlTemplate>
        <ContentPresenter
            Name="PART_ContentPresenter"
            Padding="{TemplateBinding Padding}"
            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Content="{TemplateBinding Content}"
            ContentTemplate="{TemplateBinding ContentTemplate}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Foreground="{TemplateBinding Foreground}" />
      </ControlTemplate>
    </Setter>

    <!--  PointerOver state  -->
    <Style Selector="^:pointerover /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Disabled state  -->
    <Style Selector="^:disabled /template/ ContentPresenter">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      <Setter Property="Opacity" Value="0.6" />
    </Style>

    <!--  Pressed state  -->
    <Style Selector="^:pressed /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Selected state  -->
    <Style Selector="^:selected">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <!--  Selected Disabled state  -->
      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <!--  Selected PointerOver state  -->
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.9" />
      </Style>
      <!--  Selected Pressed state  -->
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.8" />
      </Style>
    </Style>
  </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\CustomThemes.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <!--  Colors and Brushes  -->
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/ColorTheme.axaml" />
        <!--  Controls  -->
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/Button.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/CheckBox.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/ComboBox.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/Expander.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/TabControl.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/TextBox.Theme.axaml" />

        <!--  New Themes  -->
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/Window.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/Separator.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/PathIcon.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/Border.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/TextBlock.Theme.axaml" />


    </ResourceDictionary.MergedDictionaries>

    <!--  Default Control Mappings  -->
    <ControlTheme
        x:Key="{x:Type Window}"
        BasedOn="{StaticResource DefaultWindowTheme}"
        TargetType="Window" />
    <ControlTheme
        x:Key="{x:Type Button}"
        BasedOn="{StaticResource PrimaryButtonTheme}"
        TargetType="Button" />
    <ControlTheme
        x:Key="{x:Type CheckBox}"
        BasedOn="{StaticResource CustomCheckBoxTheme}"
        TargetType="CheckBox" />
    <ControlTheme
        x:Key="{x:Type TextBox}"
        BasedOn="{StaticResource DialogTextBoxTheme}"
        TargetType="TextBox" />

    <ControlTheme
        x:Key="{x:Type Separator}"
        BasedOn="{StaticResource HorizontalSeparatorTheme}"
        TargetType="Separator" />
    <Design.PreviewWith>
        <StackPanel Margin="25" Spacing="20">
            <Button Content="Default Button" />
            <CheckBox>Default Option</CheckBox>
            <ComboBox>
                <ComboBoxItem>Item 1</ComboBoxItem>
                <ComboBoxItem>Item 2</ComboBoxItem>
                <ComboBoxItem>Item 3</ComboBoxItem>
            </ComboBox>
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\DataGridCell.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridCell}" TargetType="DataGridCell">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="CellBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid x:Name="PART_CellRoot" ColumnDefinitions="*,Auto">

                        <!--  Current/Selected Visual  -->
                        <Rectangle
                            x:Name="CurrencyVisual"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="Transparent"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource AccentBlueBrush}"
                            StrokeThickness="2" />

                        <!--  Focus Visual  -->
                        <Grid
                            x:Name="FocusVisual"
                            Grid.Column="0"
                            IsHitTestVisible="False"
                            IsVisible="False">
                            <Rectangle
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource AccentBlueBrush}"
                                StrokeThickness="2" />
                            <Rectangle
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource BackgroundBrush}"
                                StrokeThickness="1" />
                        </Grid>

                        <!--  Content  -->
                        <ContentPresenter
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />

                        <!--  Invalid Visual  -->
                        <Rectangle
                            x:Name="InvalidVisualElement"
                            Grid.Column="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource ErrorBrush}"
                            StrokeThickness="2" />

                        <!--  Right Grid Line  -->
                        <Rectangle
                            Name="PART_RightGridLine"
                            Grid.Column="1"
                            Width="1"
                            VerticalAlignment="Stretch"
                            Fill="{DynamicResource BorderBrush}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

        <!--  Selected State  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <!--  Current Cell Visual  -->
        <Style Selector="^:current /template/ Rectangle#CurrencyVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Focus Visual  -->
        <Style Selector="^:focus /template/ Grid#FocusVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Invalid State  -->
        <Style Selector="^:invalid /template/ Rectangle#InvalidVisualElement">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Selected + Hover State  -->
        <Style Selector="^:selected:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\DataGridColumnHeader.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridColumnHeader}" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Border
                        Name="BackgroundBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- Content -->
                            <ContentPresenter
                                Name="HeaderContent"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Foreground="{TemplateBinding Foreground}" />

                            <!-- Sort Indicator -->
                            <Grid
                                Name="SortIndicator"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="4,0,8,0"
                                VerticalAlignment="Center"
                                IsVisible="False">
                                
                                <!-- Ascending Arrow -->
                                <Path
                                    Name="SortAscending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 4 L 4 0 L 8 4 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />

                                <!-- Descending Arrow -->
                                <Path
                                    Name="SortDescending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 0 L 4 4 L 8 0 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />
                            </Grid>
                        </Grid>
                    </Border>

                    <!-- Resize Grip -->
                    <Thumb
                        Name="PART_RightHeaderGripper"
                        Width="8"
                        HorizontalAlignment="Right"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        Cursor="SizeWE" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!-- Hover State -->
        <Style Selector="^:pointerover /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Pressed State -->
        <Style Selector="^:pressed /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Sort States --><!--
        <Style Selector="^[SortDirection=Ascending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Ascending] /template/ Path#SortAscending">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="^[SortDirection=Descending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Descending] /template/ Path#SortDescending">
            <Setter Property="IsVisible" Value="True" />
        </Style>-->

        <!-- Disabled State -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#HeaderContent">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\DataGridRow.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--<ControlTheme x:Key="{x:Type DataGridRow}" TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="DGR_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">

                    <SelectiveScrollingGrid>
                        <SelectiveScrollingGrid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </SelectiveScrollingGrid.ColumnDefinitions>
                        <SelectiveScrollingGrid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </SelectiveScrollingGrid.RowDefinitions>

    -->
    <!--  Row Header  -->
    <!--
                        <DataGridRowHeader
                            Name="PART_RowHeader"
                            Grid.RowSpan="2"
                            Grid.Column="0"
                            IsVisible="{Binding HeadersVisibility}" />

    -->
    <!--  Cell Presenter  -->
    <!--
                        <DataGridCellsPresenter
                            Name="PART_CellsPresenter"
                            Grid.Row="0"
                            Grid.Column="1"
                            ItemsPanel="{TemplateBinding ItemsPanel}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

    -->
    <!--  Row Details  -->
    <!--
                        <DataGridDetailsPresenter
                            Name="PART_DetailsPresenter"
                            Grid.Row="1"
                            Grid.Column="1"
                            SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGridConverters.DataGridSelectiveScrollingOrientationConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                            Visibility="{TemplateBinding DetailsVisibility}" />
                    </SelectiveScrollingGrid>
                </Border>
            </ControlTemplate>
        </Setter>

    -->
    <!--  Normal State  -->
    <!--
        <Style Selector="^">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        </Style>

    -->
    <!--  Alternating Row  -->
    <!--
        <Style Selector="^:nth-child(2n)">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  Hover State  -->
    <!--
        <Style Selector="^:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>

    -->
    <!--  Selected State  -->
    <!--
        <Style Selector="^:selected /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,1" />
        </Style>

    -->
    <!--  Selected + Hover State  -->
    <!--
        <Style Selector="^:selected:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

    -->
    <!--  Focus State  -->
    <!--
        <Style Selector="^:focus /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
        </Style>

    -->
    <!--  Invalid State  -->
    <!--
        <Style Selector="^:invalid /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

    -->
    <!--  Disabled State  -->
    <!--
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

    -->
    <!--  Editing State  -->
    <!--
        <Style Selector="^:editing /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  New Item Placeholder  -->
    <!--
        <Style Selector="^:new-item-placeholder /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,0" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
    </ControlTheme>-->

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Expander.axaml
================================================================================

<!--  Updated Expander Theme using ResumeForge Dynamic Color Resources  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ResumeForgeExpanderToggleButtonTheme" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="ToggleButtonBackground"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid x:Name="ToggleButtonGrid" ColumnDefinitions="*,Auto">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                        <Border
                            x:Name="ExpandCollapseChevronBorder"
                            Grid.Column="1"
                            Width="20"
                            Height="20"
                            Margin="8,0"
                            Background="Transparent"
                            CornerRadius="2">
                            <Path
                                x:Name="ExpandCollapseChevron"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="50%,50%"
                                Stretch="None"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeThickness="1.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Rotation animations for expand/collapse  -->
        <Style Selector="^[Tag=expanded] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <Style Selector="^[Tag=collapsed] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="0%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="0" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Background" Duration="0:0:0.2" />
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>
        <Style Selector="^:pointerover /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Stroke" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
        <Style Selector="^:disabled /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

    <!--  Direction-specific themes  -->
    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonUpTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 7 L 7 0 L 14 7" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonDownTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 14 0" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonLeftTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 7 0 L 0 7 L 7 14" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonRightTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 0 14" />
        </Style>
    </ControlTheme>

    <!--  Main Expander Theme  -->
    <ControlTheme x:Key="ResumeForgeExpanderTheme" TargetType="Expander">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="ContentTransition">
            <Setter.Value>
                <CrossFade Duration="00:00:00.25" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
                    <ToggleButton
                        x:Name="ExpanderHeader"
                        MinHeight="{TemplateBinding MinHeight}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsChecked="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}"
                        IsEnabled="{TemplateBinding IsEnabled}" />
                    <Border
                        x:Name="ExpanderContent"
                        MinHeight="{TemplateBinding MinHeight}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsVisible="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </DockPanel>
            </ControlTemplate>
        </Setter>

        <!--  Prevent render transform on pressed state  -->
        <Style Selector="^ /template/ ToggleButton#ExpanderHeader:pressed">
            <Setter Property="RenderTransform" Value="{x:Null}" />
        </Style>

        <!--  Left/Right direction alignment  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader, ^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>

        <!--  Tag setting for animation states  -->
        <Style Selector="^:expanded /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Tag" Value="expanded" />
        </Style>

        <Style Selector="^:not(:expanded) /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{Binding $parent[Expander].CornerRadius}" />
            <Setter Property="Tag" Value="collapsed" />
        </Style>

        <!--  Corner radius adjustments for expanded states  -->
        <Style Selector="^:expanded:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:up /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>
        <Style Selector="^:expanded:left /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>

        <!--  DockPanel positioning for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Right" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Bottom" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Left" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Top" />
        </Style>

        <!--  Theme assignment for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonLeftTheme}" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonUpTheme}" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonRightTheme}" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonDownTheme}" />
        </Style>

        <!--  Border thickness adjustments for different directions  -->
        <Style Selector="^:left /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="1,0,0,0" />
        </Style>
        <Style Selector="^:up /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,1,0,0" />
        </Style>
        <Style Selector="^:right /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,1,0" />
        </Style>
        <Style Selector="^:down /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,0,1" />
        </Style>
    </ControlTheme>

    <Design.PreviewWith>
        <Border Padding="20">
            <StackPanel
                Width="350"
                Orientation="Vertical"
                Spacing="20">
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Up"
                    Theme="{StaticResource SimpleExpanderToggleButtonTheme}">
                    <Expander.Header>
                        <Grid ColumnDefinitions="*, Auto">
                            <TextBlock Grid.Column="0" Text="Expand" />
                            <TextBlock Grid.Column="1" Text="Up" />
                        </Grid>
                    </Expander.Header>
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Down"
                    Header="Expand Down">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Left"
                    Header="Expand Left">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Right"
                    Header="Expand Right">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\OtherControlThemes.axaml
================================================================================

<!--  Themes/MissingControlThemes.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  TreeView Theme  -->
    <ControlTheme x:Key="{x:Type TreeView}" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  TreeViewItem Theme  -->
    <ControlTheme x:Key="{x:Type TreeViewItem}" TargetType="TreeViewItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Template">
            <ControlTemplate>
                <StackPanel>
                    <Border
                        Name="PART_Header"
                        MinHeight="24"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid ColumnDefinitions="Auto,Auto,*">
                            <Border Name="PART_Indent" Grid.Column="0" />
                            <ToggleButton
                                Name="PART_ExpandCollapseChevron"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="2,0"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="False"
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                <Path
                                    Width="10"
                                    Height="10"
                                    Data="M 0 0 L 4 4 L 0 8 Z"
                                    Fill="{DynamicResource TextPrimaryBrush}"
                                    RenderTransformOrigin="50%,50%"
                                    Stretch="Uniform">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="90" />
                                    </Path.RenderTransform>
                                </Path>
                            </ToggleButton>
                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="2"
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />
                        </Grid>
                    </Border>
                    <ItemsPresenter
                        Name="PART_ItemsPresenter"
                        IsVisible="{TemplateBinding IsExpanded}"
                        ItemsPanel="{TemplateBinding ItemsPanel}" />
                </StackPanel>
            </ControlTemplate>
        </Setter>

        <!--  TreeViewItem States  -->
        <Style Selector="^:expanded /template/ RotateTransform#ExpandCollapseChevronRotateTransform">
            <Setter Property="Angle" Value="90" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  ListBox Theme  -->
    <ControlTheme x:Key="{x:Type ListBox}" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ListBoxItem Theme  -->
    <ControlTheme x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="2" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  Menu Theme  -->
    <ControlTheme x:Key="{x:Type Menu}" TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  MenuItem Theme  -->
    <ControlTheme x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Name="PART_IconPresenter"
                                Grid.Column="0"
                                Width="16"
                                Height="16"
                                Margin="0,0,8,0"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Icon}" />

                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="1"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />

                            <TextBlock
                                Name="PART_InputGestureText"
                                Grid.Column="2"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                FontSize="11"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="{TemplateBinding InputGesture}" />

                            <Path
                                Name="PART_ChevronPath"
                                Grid.Column="3"
                                Width="8"
                                Height="8"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                Data="M 0 0 L 4 4 L 0 8 Z"
                                Fill="{DynamicResource TextSecondaryBrush}"
                                IsVisible="False" />
                        </Grid>
                    </Border>

                    <Popup
                        Name="PART_Popup"
                        HorizontalOffset="-1"
                        IsLightDismissEnabled="False"
                        IsOpen="{TemplateBinding IsSubMenuOpen,
                                                 Mode=TwoWay}"
                        OverlayInputPassThroughElement="{Binding $parent[Menu]}"
                        Placement="RightEdgeAlignedTop"
                        VerticalOffset="-1">
                        <Border
                            MinWidth="120"
                            Padding="4"
                            Background="{DynamicResource BackgroundBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="4">
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  MenuItem States  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:separator">
            <Setter Property="Template">
                <ControlTemplate>
                    <Separator Margin="8,2" />
                </ControlTemplate>
            </Setter>
        </Style>
        <Style Selector="^:selected /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:submenuopen /template/ Path#PART_ChevronPath">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>

    <!--  ProgressBar Theme  -->
    <ControlTheme x:Key="{x:Type ProgressBar}" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Track"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid ClipToBounds="True">
                        <Border
                            Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            Background="{TemplateBinding Foreground}"
                            CornerRadius="{TemplateBinding CornerRadius}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Indeterminate state animation  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Indicator">
            <Style.Animations>
                <Animation IterationCount="Infinite" Duration="0:0:2">
                    <KeyFrame Cue="0%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationStartPosition}" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationEndPosition}" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
    </ControlTheme>

    <!--  Slider Theme  -->
    <ControlTheme x:Key="{x:Type Slider}" TargetType="Slider">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Grid.Styles>
                        <Style Selector="Track">
                            <Setter Property="Minimum" Value="{TemplateBinding Minimum}" />
                            <Setter Property="Maximum" Value="{TemplateBinding Maximum}" />
                            <Setter Property="Value" Value="{TemplateBinding Value, Mode=TwoWay}" />
                        </Style>
                    </Grid.Styles>

                    <!--  Horizontal Slider  -->
                    <Border
                        Name="HorizontalTemplate"
                        MinHeight="20"
                        Background="Transparent">
                        <Grid RowDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Row="1"
                                Orientation="Horizontal">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <!--  Vertical Slider  -->
                    <Border
                        Name="VerticalTemplate"
                        MinWidth="20"
                        Background="Transparent">
                        <Grid ColumnDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Column="1"
                                Orientation="Vertical">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Orientation-specific visibility  -->
        <Style Selector="^:horizontal /template/ Border#VerticalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>
        <Style Selector="^:vertical /template/ Border#HorizontalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  DatePicker Theme  -->
    <ControlTheme x:Key="{x:Type DatePicker}" TargetType="DatePicker">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Grid ColumnDefinitions="*,Auto">
                        <Border
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Button
                            Name="PART_TextButton"
                            Grid.Column="0"
                            Padding="8,4"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}" />

                        <Button
                            Name="PART_CalendarButton"
                            Grid.Column="1"
                            Width="30"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}">
                            <Path
                                Width="16"
                                Height="16"
                                Data="M19,3H18V1H16V3H8V1H6V3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V8H19M7,10V12H9V10M11,10V12H13V10M15,10V12H17V10"
                                Fill="{DynamicResource AccentBlueBrush}"
                                Stretch="Uniform" />
                        </Button>

                        <Popup
                            Name="PART_Popup"
                            Grid.Column="0"
                            InheritsTransform="True"
                            IsLightDismissEnabled="True"
                            PlacementTarget="{TemplateBinding}">
                            <Border
                                Padding="8"
                                Background="{DynamicResource BackgroundBrush}"
                                BorderBrush="{DynamicResource BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="4">
                                <Calendar Name="PART_Calendar" />
                            </Border>
                        </Popup>
                    </Grid>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  States  -->
        <Style Selector="^:pointerover /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:focus /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\PathIcon.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
    </ControlTheme>

    <ControlTheme x:Key="SmallPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </ControlTheme>

    <ControlTheme x:Key="LargePathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningIconTheme" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Fill" Value="{DynamicResource WarningBrush}" />
        <Setter Property="Stretch" Value="Uniform" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Separator.Theme.axaml
================================================================================

<!-- Separator.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTheme x:Key="HorizontalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,8,0,8" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </ControlTheme>
    
    <ControlTheme x:Key="VerticalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Margin" Value="8,0,8,0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </ControlTheme>
    
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\TabControl.Theme.axaml
================================================================================


<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  ====================== TAB CONTROL THEME ======================  -->
    <ControlTheme x:Key="CustomTabControlTheme" TargetType="TabControl">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{DynamicResource CornerRadius}">
                    <DockPanel>
                        <Border
                            Padding="4,8,4,0"
                            Background="{DynamicResource GunMetalDarkBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0"
                            BoxShadow="0 1 5 0 #20000000"
                            CornerRadius="{DynamicResource CornerRadius}"
                            DockPanel.Dock="Top">
                            <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                        </Border>
                        <ContentPresenter
                            Name="PART_SelectedContentHost"
                            Margin="0,0,0,0"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectedContent}"
                            ContentTemplate="{TemplateBinding SelectedContentTemplate}" />
                    </DockPanel>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ====================== TAB ITEM THEME ======================  -->
    <ControlTheme x:Key="CustomTabItemTheme" TargetType="TabItem">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Padding" Value="16,10" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter
                            Name="PART_ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}" />
                    </Border>
                    <Border
                        Name="PART_SelectedIndicator"
                        Height="3"
                        Margin="0"
                        VerticalAlignment="Bottom"
                        Background="{DynamicResource AccentBlueBrush}"
                        CornerRadius="1.5"
                        IsVisible="False" />
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  Selected state  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_SelectedIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Pointer over (hover) state  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>

        <!--  Selected + hover state  -->
        <Style Selector="^:selected:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
        </Style>

        <!--  Pressed state  -->
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.5" />
        </Style>
    </ControlTheme>

    <!--  Add this theme to set the items panel for the tab control  -->
    <ItemsPanelTemplate x:Key="TabItemsPanelTemplate">
        <WrapPanel Orientation="Horizontal" />
    </ItemsPanelTemplate>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\TextBlock.Theme.axaml
================================================================================

<!--  TextBlock.Theme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="CaptionTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeSmall}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatsTitleTheme" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
    </ControlTheme>
    <ControlTheme x:Key="MediumTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme
        x:Key="LabelTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5,0" />
    </ControlTheme>
    <ControlTheme
        x:Key="SubheaderTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
    </ControlTheme>
    <ControlTheme x:Key="TextBlockLargePrimaryBrush" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
    <ControlTheme
        x:Key="StatsValueTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Margin" Value="0,5,0,5" />
    </ControlTheme>
    <ControlTheme
        x:Key="SectionHeaderTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Margin" Value="0,0,0,5" />
    </ControlTheme>
    <ControlTheme x:Key="HeaderTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="TitleBarTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="StatusBarMainTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <!--  Design Preview for TextBlock Themes  -->
    <Design.PreviewWith>
        <StackPanel Spacing="8">
            <TextBlock Text="Caption TextBlock Skin" Theme="{StaticResource CaptionTextBlockTheme}" />
            <TextBlock Text="Stats Title Skin" Theme="{StaticResource StatsTitleTheme}" />
            <TextBlock Text="Medium TextBlock" Theme="{StaticResource MediumTextBlock}" />
            <TextBlock Text="Label TextBlock Skin" Theme="{StaticResource LabelTextBlockTheme}" />
            <TextBlock Text="Subheader TextBlock Skin" Theme="{StaticResource SubheaderTextBlockTheme}" />
            <TextBlock Text="TextBlock Large Primary Brush" Theme="{StaticResource TextBlockLargePrimaryBrush}" />
            <TextBlock Text="Stats Value Skin" Theme="{StaticResource StatsValueTheme}" />
            <TextBlock Text="Section Header Skin" Theme="{StaticResource SectionHeaderTheme}" />
            <TextBlock Text="Header TextBlock Skin" Theme="{StaticResource HeaderTextBlockTheme}" />
            <TextBlock Text="Title Bar TextBlock Skin" Theme="{StaticResource TitleBarTextBlockTheme}" />
            <TextBlock Text="StatusBar Main Text" Theme="{StaticResource StatusBarMainTextTheme}" />
            <TextBlock Text="StatusBar Warning Text" Theme="{StaticResource StatusBarWarningTextTheme}" />

        </StackPanel>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\TextBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--  TextBox Theme with Static TextPresenter Properties  -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://Avalonia.Accelerate.Appearance/Skins/ColorTheme.axaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTheme x:Key="DialogTextBoxTheme" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Padding" Value="5,5" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                <DockPanel
                                    x:Name="PART_InnerDockPanel"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="1"
                                    Margin="{TemplateBinding Padding}">
                                    <TextBlock
                                        Name="PART_FloatingWatermark"
                                        DockPanel.Dock="Top"
                                        Foreground="{DynamicResource AccentBlueBrush}"
                                        IsVisible="False"
                                        Text="{TemplateBinding Watermark}" />
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                        BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Foreground="{DynamicResource TextSecondaryBrush}"
                                                Opacity="0.6"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                LetterSpacing="{TemplateBinding LetterSpacing}"
                                                LineHeight="{TemplateBinding LineHeight}"
                                                PasswordChar="{TemplateBinding PasswordChar}"
                                                RevealPassword="{TemplateBinding RevealPassword}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                        <ScrollViewer.Styles>
                                            <Style Selector="ScrollContentPresenter#PART_ContentPresenter">
                                                <Setter Property="Cursor" Value="IBeam" />
                                            </Style>
                                        </ScrollViewer.Styles>
                                    </ScrollViewer>
                                </DockPanel>
                                <ContentPresenter
                                    Grid.Column="2"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark, ^ /template/ TextBlock#PART_FloatingWatermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="Opacity" Value="0.9" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            </Style>
        </Style>

        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
        </Style>

        <Style Selector="^ /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="Cursor" Value="IBeam" />
        </Style>

        <Style Selector="^[UseFloatingWatermark=true]:not(:empty) /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="CustomTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 0 #15000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid>
                        <TextBlock
                            x:Name="PART_Watermark"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Foreground="#99FFFFFF"
                            IsVisible="{TemplateBinding Text,
                                                        Converter={x:Static StringConverters.IsNullOrEmpty}}"
                            Text="{TemplateBinding Watermark}" />

                        <ScrollViewer
                            x:Name="PART_ScrollViewer"
                            HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                            <Panel>
                                <TextPresenter
                                    x:Name="PART_TextPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    CaretBrush="{DynamicResource TextPrimaryBrush}"
                                    CaretIndex="{TemplateBinding CaretIndex}"
                                    Foreground="{StaticResource TextPrimaryBrush}"
                                    PasswordChar="{TemplateBinding PasswordChar}"
                                    RevealPassword="{TemplateBinding RevealPassword}"
                                    SelectionBrush="{DynamicResource AccentBlueBrush}"
                                    SelectionEnd="{TemplateBinding SelectionEnd}"
                                    SelectionForegroundBrush="{DynamicResource TextPrimaryBrush}"
                                    SelectionStart="{TemplateBinding SelectionStart}"
                                    Text="{TemplateBinding Text,
                                                           Mode=TwoWay}"
                                    TextAlignment="{TemplateBinding TextAlignment}"
                                    TextWrapping="{TemplateBinding TextWrapping}" />
                            </Panel>
                        </ScrollViewer>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>
        <Style Selector="^:focus">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Background="{DynamicResource BackgroundLightBrush}">
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource CustomTextBoxTheme}" />
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource DialogTextBoxTheme}" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Window.Theme.axaml
================================================================================

<!-- Window.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Window Theme -->
    <ControlTheme x:Key="DefaultWindowTheme" TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>

    <!-- Dialog Window Theme -->
    <ControlTheme x:Key="DialogWindowTheme" BasedOn="{StaticResource DefaultWindowTheme}" TargetType="Window">
        <Setter Property="SystemDecorations" Value="Full" />
        <Setter Property="WindowStartupLocation" Value="CenterScreen" />
        <Setter Property="SizeToContent" Value="Height" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MaxWidth" Value="600" />
        <Setter Property="Padding" Value="8" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\ViewModels\QuickSkinSwitcherViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Services;
using Avalonia.Media;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace Avalonia.Accelerate.Appearance.ViewModels
{
    /// <summary>
    /// 
    /// </summary>
    public class QuickSkinSwitcherViewModel : ViewModelBase
    {
        private readonly ILogger _logger;
        private readonly ISkinManager _skinManager;
        private ThemeInfo? _selectedTheme;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSkinSwitcherViewModel"/> class
        /// with a default logger instance.
        /// </summary>
        public QuickSkinSwitcherViewModel(ISkinManager skinManager) : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance, skinManager)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSkinSwitcherViewModel"/> class
        /// with the specified logger instance.
        /// </summary>
        /// <param name="logger">
        /// An instance of <see cref="ILogger"/> used for logging operations within the view model.
        /// </param>
        public QuickSkinSwitcherViewModel(ILogger logger, ISkinManager skinManager)
        {
            _logger = logger;
            _skinManager = skinManager;
            AvailableThemes = new ObservableCollection<ThemeInfo>();

            LoadAvailableThemes();
            LoadCurrentTheme();

            // Subscribe to skin manager changes to keep in sync
            skinManager.SkinChanged += OnSkinChanged;
        }

        /// <summary>
        /// Gets the collection of available themes that can be selected and applied
        /// within the application.
        /// </summary>
        /// <remarks>
        /// This property is populated by the <see cref="LoadAvailableThemes"/> method,
        /// which retrieves the themes from the <see cref="SkinManager"/>. The collection
        /// is updated dynamically to reflect the available themes.
        /// </remarks>
        public ObservableCollection<ThemeInfo> AvailableThemes { get; }

        /// <summary>
        /// Gets or sets the currently selected theme.
        /// </summary>
        /// <remarks>
        /// When a new theme is selected, the corresponding theme is applied automatically.
        /// The selected theme is synchronized with the <see cref="AvailableThemes"/> collection.
        /// </remarks>
        public ThemeInfo? SelectedTheme
        {
            get => _selectedTheme;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedTheme, value) != null)
                {
                    ApplyTheme(value);
                }
            }
        }

        private void LoadAvailableThemes()
        {
            try
            {
                
                var themeNames = _skinManager.GetAvailableSkinNames();

                AvailableThemes.Clear();

                foreach (var themeName in themeNames)
                {
                    var skin = _skinManager.GetSkin(themeName);
                    if (skin != null)
                    {
                        var themeInfo = new ThemeInfo
                        {
                            Name = themeName,
                            Description = GetThemeDescription(themeName),
                            PreviewColor = new SolidColorBrush(skin.AccentColor)
                        };
                        AvailableThemes.Add(themeInfo);
                    }
                }

                _logger.LogDebug("Loaded {ThemeCount} themes for quick switcher", AvailableThemes.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load themes for quick switcher");
            }
        }

        private void LoadCurrentTheme()
        {
            try
            {
                var currentSkin = _skinManager.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    var currentTheme = AvailableThemes.FirstOrDefault(t => t.Name == currentSkin.Name);
                    if (currentTheme != null)
                    {
                        // Set without triggering the setter to avoid recursive application
                        _selectedTheme = currentTheme;
                        this.RaisePropertyChanged(nameof(SelectedTheme));
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current theme for quick switcher");
            }
        }

        private void ApplyTheme(ThemeInfo? themeInfo)
        {
            try
            {
                if (themeInfo != null)
                {
                    _skinManager.ApplySkin(themeInfo.Name);
                    _logger.LogInformation("Quick theme switch to: {ThemeName}", themeInfo.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply theme via quick switcher: {ThemeName}", themeInfo?.Name);
            }
        }

        private void OnSkinChanged(object? sender, EventArgs e)
        {
            // Update selected theme when skin changes externally
            try
            {
                LoadCurrentTheme();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to update quick switcher after skin change");
            }
        }

        private static string GetThemeDescription(string themeName)
        {
            return themeName switch
            {
                "Dark" => "Professional dark theme",
                "Light" => "Clean light theme",
                "Ocean Blue" => "Deep blue ocean theme",
                "Forest Green" => "Nature-inspired green",
                "Purple Haze" => "Rich purple theme",
                "High Contrast" => "Maximum contrast",
                "Cyberpunk" => "Futuristic neon theme",
                _ => "Custom theme"
            };
        }

        /// <summary>
        /// Releases the resources used by the <see cref="QuickSkinSwitcherViewModel"/> class.
        /// </summary>
        /// <param name="disposing">
        /// A value indicating whether the method is being called explicitly to release managed resources.
        /// If <c>true</c>, managed resources are released; otherwise, only unmanaged resources are released.
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _skinManager.SkinChanged -= OnSkinChanged;
            }
            base.Dispose(disposing);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\ViewModels\SkinSettingsViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using System.Reactive;
using Avalonia.Accelerate.Appearance.Services;
using Avalonia.Media;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace Avalonia.Accelerate.Appearance.ViewModels
{
    /// <summary>
    /// ViewModel responsible for managing theme settings within the application.
    /// </summary>
    /// <remarks>
    /// This class provides functionality to load available themes, apply a selected theme, 
    /// and reset to a default theme. It interacts with the UI to allow users to preview and 
    /// change themes dynamically. Logging is utilized to track theme changes and operations.
    /// </remarks>
    public class SkinSettingsViewModel : ViewModelBase
    {
        private readonly ILogger _logger;
        private ThemeInfo? _selectedTheme;

        /// <summary>
        /// Initializes a new instance of the <see cref="SkinSettingsViewModel"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the ViewModel with a default logger instance. It initializes
        /// the collection of available themes, the command for applying themes, and loads the
        /// current theme and available themes.
        /// </remarks>
        public SkinSettingsViewModel() : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SkinSettingsViewModel"/> class with the specified logger.
        /// </summary>
        /// <param name="logger">
        /// An instance of <see cref="ILogger"/> used for logging theme-related operations and errors.
        /// </param>
        /// <remarks>
        /// This constructor allows dependency injection of a logger instance, enabling detailed logging
        /// of theme management operations. It initializes the collection of available themes, sets up
        /// the command for applying themes, and loads the current theme and available themes.
        /// </remarks>
        public SkinSettingsViewModel(ILogger logger)
        {
            _logger = logger;

            AvailableThemes = new ObservableCollection<ThemeInfo>();
            ApplyThemeCommand = ReactiveCommand.Create(ApplyTheme);

            LoadAvailableThemes();
            LoadCurrentTheme();
        }

        /// <summary>
        /// Gets the collection of available themes that can be applied within the application.
        /// </summary>
        /// <remarks>
        /// This property provides a list of <see cref="ThemeInfo"/> objects, each representing a theme 
        /// with its name, description, and preview color. The collection is populated by the 
        /// <c>LoadAvailableThemes</c> method and is used to display theme options in the UI.
        /// </remarks>
        public ObservableCollection<ThemeInfo> AvailableThemes { get; }
        /// <summary>
        /// Gets the command used to apply the currently selected theme.
        /// </summary>
        /// <remarks>
        /// This command executes the logic to apply the theme selected by the user in the UI.
        /// It ensures that the application's appearance is updated dynamically to reflect the chosen theme.
        /// </remarks>
        public ReactiveCommand<Unit, Unit> ApplyThemeCommand { get; }

        /// <summary>
        /// Gets or sets the currently selected theme.
        /// </summary>
        /// <remarks>
        /// When a new theme is selected, it is immediately applied to the application for preview purposes.
        /// The selected theme is logged for tracking purposes. If the theme is set to <c>null</c>, no changes are applied.
        /// </remarks>
        public ThemeInfo? SelectedTheme
        {
            get => _selectedTheme;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedTheme, value) != null)
                {
                    // Apply theme immediately for preview
                    if (value != null)
                    {
                        SkinManager.Instance.ApplySkin(value.Name);
                        _logger.LogInformation("Skin changed to: {ThemeName}", value.Name);
                    }
                }
            }
        }

        private void LoadAvailableThemes()
        {
            try
            {
                var skinManager = SkinManager.Instance;
                var themeNames = skinManager.GetAvailableSkinNames();

                AvailableThemes.Clear();

                foreach (var themeName in themeNames)
                {
                    var skin = skinManager.GetSkin(themeName);
                    if (skin != null)
                    {
                        var themeInfo = new ThemeInfo
                        {
                            Name = themeName,
                            Description = GetThemeDescription(themeName),
                            PreviewColor = new SolidColorBrush(skin.AccentColor)
                        };
                        AvailableThemes.Add(themeInfo);
                    }
                }

                _logger.LogInformation("Loaded {ThemeCount} available themes", AvailableThemes.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load available themes");
            }
        }

        private void LoadCurrentTheme()
        {
            try
            {
                var currentSkin = SkinManager.Instance.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    SelectedTheme = AvailableThemes.FirstOrDefault(t => t.Name == currentSkin.Name);
                }

                // Fallback to Dark theme if current theme not found
                SelectedTheme ??= AvailableThemes.FirstOrDefault(t => t.Name == "Dark");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current theme");
            }
        }

        private void ApplyTheme()
        {
            try
            {
                if (SelectedTheme != null)
                {
                    SkinManager.Instance.ApplySkin(SelectedTheme.Name);
                    _logger.LogInformation("Applied theme: {ThemeName}", SelectedTheme.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply theme: {ThemeName}", SelectedTheme?.Name);
            }
        }

        /// <summary>
        /// Resets the theme settings to the default theme.
        /// </summary>
        /// <remarks>
        /// This method attempts to reset the currently selected theme to the default theme, 
        /// which is identified by the name "Dark". If the default theme is found in the 
        /// <see cref="AvailableThemes"/> collection, it is applied as the selected theme. 
        /// Logs information about the operation or errors if the reset fails.
        /// </remarks>
        /// <exception cref="Exception">
        /// Logs any exceptions that occur during the reset operation.
        /// </exception>
        public void ResetToDefault()
        {
            try
            {
                var defaultTheme = AvailableThemes.FirstOrDefault(t => t.Name == "Dark");
                if (defaultTheme != null)
                {
                    SelectedTheme = defaultTheme;
                    _logger.LogInformation("Reset to default theme: Dark");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to reset to default theme");
            }
        }

        private static string GetThemeDescription(string themeName)
        {
            return themeName switch
            {
                "Dark" => "Professional dark theme with blue accents. Easy on the eyes for extended use.",
                "Light" => "Clean light theme with dark text. Perfect for bright environments.",
                "Ocean Blue" => "Deep blue theme inspired by ocean depths. Calming and focused.",
                "Forest Green" => "Nature-inspired green theme. Relaxing and earthy.",
                "Purple Haze" => "Rich purple theme with mystical vibes. Creative and bold.",
                "High Contrast" => "Maximum contrast for accessibility. Clear and distinct colors.",
                "Cyberpunk" => "Futuristic neon theme with hot pink accents. Edgy and modern.",
                _ => "Custom theme with unique color combinations."
            };
        }
    }

    /// <summary>
    /// Represents information about a theme, including its name, description, and a preview color.
    /// </summary>
    /// <remarks>
    /// This class is used to encapsulate the details of a theme, which can be displayed in the UI
    /// or used for theme management purposes within the application.
    /// </remarks>
    public class ThemeInfo
    {
        /// <summary>
        /// Gets or sets the name of the theme.
        /// </summary>
        /// <remarks>
        /// The name uniquely identifies the theme and is used for selection and application purposes.
        /// </remarks>
        public string Name { get; set; } = "";
        /// <summary>
        /// Gets or sets the description of the theme.
        /// </summary>
        /// <remarks>
        /// This property provides a textual description of the theme, which can be displayed in the user interface
        /// to give users more context about the theme's purpose or appearance.
        /// </remarks>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the brush used to represent the preview color of the theme.
        /// </summary>
        /// <remarks>
        /// This property is typically used to display a visual representation of the theme's accent color
        /// in the user interface, such as in theme selection controls.
        /// </remarks>
        public IBrush PreviewColor { get; set; } = Brushes.Transparent;
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\ViewModels\ViewModelBase.cs
================================================================================

using ReactiveUI;

namespace Avalonia.Accelerate.Appearance.ViewModels
{
    /// <summary>
    /// Serves as the base class for all ViewModel classes in the AvaloniaThemeManager application.
    /// </summary>
    /// <remarks>
    /// This class provides common functionality for ViewModel classes, including support for 
    /// reactive property changes and resource management through the <see cref="IDisposable"/> interface.
    /// </remarks>
    public class ViewModelBase : ReactiveObject, IDisposable
    {
        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method is part of the <see cref="IDisposable"/> implementation and ensures that 
        /// both managed and unmanaged resources are properly released. It calls the 
        /// <see cref="Dispose(bool)"/> method with a value of <c>true</c>, and suppresses 
        /// finalization of the object to prevent redundant resource cleanup.
        /// </remarks>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TODO release managed resources here
            }
        }

        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method calls the <see cref="Dispose(bool)"/> method with a value of <c>true</c> 
        /// to release managed resources and suppresses finalization of the object.
        /// </remarks>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Views\SkinSettingsDialog.axaml
================================================================================

<Window
    x:Class="Avalonia.Accelerate.Appearance.Views.SkinSettingsDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons="clr-namespace:Avalonia.Accelerate.Icons;assembly=Avalonia.Accelerate.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:Avalonia.Accelerate.Appearance.ViewModels"
    Title="Skin Settings"
    d:DesignHeight="500"
    d:DesignWidth="600"
    x:DataType="vm:SkinSettingsViewModel"
    Background="{DynamicResource BackgroundBrush}"
    Icon="avares://Avalonia.Accelerate.Icons/Assets/jonBuilt.ico"
    SizeToContent="WidthAndHeight"
    WindowStartupLocation="CenterOwner"
    mc:Ignorable="d">

    <Design.DataContext>
        <vm:SkinSettingsViewModel />
    </Design.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Spacing="10">
                <StackPanel Orientation="Horizontal" Spacing="10">
                    <Path
                        Width="24"
                        Height="24"
                        Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                        Fill="{DynamicResource AccentBlueBrush}"
                        Stretch="Uniform" />
                    <TextBlock
                        VerticalAlignment="Center"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Skin Settings" />
                </StackPanel>

                <TextBlock
                    FontSize="12"
                    Foreground="{DynamicResource TextSecondaryBrush}"
                    Text="Customize the appearance of Drive Space Analyzer. Changes take effect immediately."
                    TextWrapping="Wrap" />
            </StackPanel>
        </Border>

        <Border Grid.Row="1" Padding="20">
            <!--  Main Content  -->
            <StackPanel Spacing="25">

                <!--  Current Theme Selection  -->
                <StackPanel Spacing="15">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Select Skin" />

                    <ComboBox
                        MinWidth="200"
                        Background="{DynamicResource BackgroundLightBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        ItemsSource="{Binding AvailableThemes}"
                        SelectedItem="{Binding SelectedTheme}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Spacing="10">
                                    <Ellipse
                                        Width="16"
                                        Height="16"
                                        VerticalAlignment="Center"
                                        Fill="{Binding PreviewColor}" />
                                    <TextBlock
                                        VerticalAlignment="Center"
                                        FontWeight="Medium"
                                        Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </StackPanel>

                <!--  Theme Preview Grid  -->
                <StackPanel Spacing="15">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Skin Preview" />

                    <Border
                        Padding="20"
                        Background="{DynamicResource BackgroundBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="8">
                        <StackPanel Spacing="15">

                            <!--  Color Swatches  -->
                            <StackPanel Spacing="10">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Color Palette" />

                                <WrapPanel>
                                    <!--  Primary Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Primary" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource BackgroundBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Secondary Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Secondary" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource BackgroundLightBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Accent Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Accent" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource AccentBlueBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Status Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Error" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource ErrorBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Warning" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource WarningBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <StackPanel Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Success" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource SuccessBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>
                                </WrapPanel>
                            </StackPanel>

                            <!--  UI Elements Preview  -->
                            <StackPanel Spacing="10">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="UI Elements" />

                                <StackPanel Orientation="Horizontal" Spacing="10">
                                    <Button Content="Primary Button" />

                                    <Button Content="Secondary Button" />
                                </StackPanel>

                                <TextBox
                                    Width="200"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource BorderBrush}"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Sample text input"
                                    Watermark="Placeholder text..." />

                                <CheckBox
                                    Content="Sample checkbox"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    IsChecked="True" />
                            </StackPanel>

                            <!--  Text Preview  -->
                            <StackPanel Spacing="8">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Typography" />

                                <TextBlock
                                    FontSize="16"
                                    FontWeight="Bold"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Primary Heading Text" />

                                <TextBlock
                                    FontSize="14"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Regular body text that would appear in the application interface." />

                                <TextBlock
                                    FontSize="12"
                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                    Text="Secondary text used for descriptions and less important information." />
                            </StackPanel>
                        </StackPanel>
                    </Border>
                </StackPanel>

                <!--  Theme Information  -->
                <StackPanel Spacing="10">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Skin Information" />

                    <Border
                        Padding="15"
                        Background="{DynamicResource BackgroundLightBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="4">
                        <StackPanel Spacing="8">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock
                                    FontSize="12"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                    Text="Selected Skin:" />
                                <TextBlock
                                    FontSize="12"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="{Binding SelectedTheme.Name}" />
                            </StackPanel>

                            <TextBlock
                                FontSize="11"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="{Binding SelectedTheme.Description}"
                                TextWrapping="Wrap" />
                        </StackPanel>
                    </Border>
                </StackPanel>

            </StackPanel>
        </Border>
        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    Padding="15,8"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Click="ResetButton_Click"
                    Content="Reset to Default"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
                <Button
                    Padding="15,8"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Click="CloseButton_Click"
                    Content="Close"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
                <Button
                    Padding="15,8"
                    Background="{DynamicResource AccentBlueBrush}"
                    Classes="accent"
                    Command="{Binding ApplyThemeCommand}"
                    Content="Apply Skin"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Views\SkinSettingsDialog.axaml.cs
================================================================================

using Avalonia.Accelerate.Appearance.ViewModels;
using Avalonia.Controls;
using Avalonia.Interactivity;

namespace Avalonia.Accelerate.Appearance.Views;

/// <summary>
/// Represents a dialog window for managing theme settings in the application.
/// </summary>
/// <remarks>
/// This class provides a user interface for selecting, applying, and resetting themes.
/// It is backed by the <see cref="SkinSettingsViewModel"/> 
/// to handle the logic and data binding for theme management.
/// </remarks>
public partial class SkinSettingsDialog : Window
{
    /// <summary>
    /// Initializes a new instance of the <see cref="SkinSettingsDialog"/> class.
    /// </summary>
    /// <remarks>
    /// This constructor sets up the dialog by initializing its components and 
    /// assigning a new instance of <see cref="SkinSettingsViewModel"/> as its data context.
    /// </remarks>
    public SkinSettingsDialog()
    {
        InitializeComponent();
        DataContext = new SkinSettingsViewModel();
    }

    private void ResetButton_Click(object? sender, RoutedEventArgs e)
    {
        if (DataContext is SkinSettingsViewModel viewModel)
        {
            viewModel.ResetToDefault();
        }
    }

    private void CloseButton_Click(object? sender, RoutedEventArgs e)
    {
        Close();

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\ValidationRules\AccessibilityValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;
using Avalonia.Media;

namespace Avalonia.Accelerate.Appearance.Services.ValidationRules
{
    /// <summary>
    /// Validates themes for accessibility compliance including WCAG guidelines.
    /// </summary>
    public class AccessibilityValidationRule : ISkinValidationRule
    {
        private const double WcagAaContrastRatio = 4.5;
        private const double WcagAaaContrastRatio = 7.0;
        private const double MinimumFontSize = 12.0;
        private const double RecommendedMinimumFontSize = 14.0;
        private const double MaximumRecommendedFontSize = 32.0;

        /// <summary>
        /// Validates skin for accessibility compliance across multiple criteria.
        /// </summary>
        /// <param name="skin">The skin to validate</param>
        /// <returns>Validation result with accessibility errors or warnings</returns>
        public SkinValidationResult Validate(Skin skin)
        {
            var result = new SkinValidationResult();
            var validator = new SkinValidator();

            // WCAG 2.1 Color Contrast Validation
            ValidateColorContrast(skin, validator, result);

            // Font Size Accessibility
            ValidateFontSizes(skin, result);

            // Color-Only Information (check for sufficient differentiation)
            ValidateColorDifferentiation(skin, validator, result);

            // Focus Indicators
            ValidateFocusIndicators(skin, validator, result);

            // Status Colors Accessibility
            ValidateStatusColors(skin, validator, result);

            // Motion and Animation Considerations
            ValidateVisualStability(skin, result);

            return result;
        }

        private void ValidateColorContrast(Skin theme, SkinValidator validator, SkinValidationResult result)
        {
            // Primary text on primary background
            var primaryContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);
            ValidateContrastRatio(primaryContrast, "Primary text on primary background", result);

            // Primary text on secondary background
            var primaryOnSecondaryContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.SecondaryBackground);
            ValidateContrastRatio(primaryOnSecondaryContrast, "Primary text on secondary background", result);

            // Secondary text on primary background
            var secondaryContrast = validator.CalculateContrastRatio(theme.SecondaryTextColor, theme.PrimaryBackground);
            ValidateContrastRatio(secondaryContrast, "Secondary text on primary background", result, isSecondaryText: true);

            // Secondary text on secondary background
            var secondaryOnSecondaryContrast = validator.CalculateContrastRatio(theme.SecondaryTextColor, theme.SecondaryBackground);
            ValidateContrastRatio(secondaryOnSecondaryContrast, "Secondary text on secondary background", result, isSecondaryText: true);

            // Accent color accessibility
            var accentOnPrimaryContrast = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryBackground);
            if (accentOnPrimaryContrast < 3.0)
            {
                result.AddWarning($"Accent color on primary background has low contrast ({accentOnPrimaryContrast:F2}:1). May not be distinguishable for users with visual impairments");
            }
        }

        private void ValidateContrastRatio(double ratio, string context, SkinValidationResult result, bool isSecondaryText = false)
        {
            var minRatio = isSecondaryText ? 3.0 : WcagAaContrastRatio;
            var recommendedRatio = isSecondaryText ? WcagAaContrastRatio : WcagAaaContrastRatio;

            if (ratio < minRatio)
            {
                result.AddError($"{context} contrast ratio ({ratio:F2}:1) fails WCAG {(isSecondaryText ? "AA" : "AA")} minimum ({minRatio}:1)");
            }
            else if (ratio < recommendedRatio)
            {
                result.AddWarning($"{context} contrast ratio ({ratio:F2}:1) meets minimum but not enhanced WCAG AAA standard ({recommendedRatio}:1)");
            }
        }

        private void ValidateFontSizes(Skin theme, SkinValidationResult result)
        {
            // Check minimum font sizes for accessibility
            if (theme.FontSizeSmall < MinimumFontSize)
            {
                result.AddError($"Small font size ({theme.FontSizeSmall}px) is below accessibility minimum ({MinimumFontSize}px)");
            }
            else if (theme.FontSizeSmall < RecommendedMinimumFontSize)
            {
                result.AddWarning($"Small font size ({theme.FontSizeSmall}px) is below recommended minimum ({RecommendedMinimumFontSize}px) for good accessibility");
            }

            if (theme.FontSizeMedium < RecommendedMinimumFontSize)
            {
                result.AddWarning($"Medium font size ({theme.FontSizeMedium}px) is below recommended size ({RecommendedMinimumFontSize}px) for primary content");
            }

            // Check for excessively large fonts that might cause layout issues
            if (theme.FontSizeLarge > MaximumRecommendedFontSize)
            {
                result.AddWarning($"Large font size ({theme.FontSizeLarge}px) exceeds recommended maximum ({MaximumRecommendedFontSize}px) and may cause layout issues");
            }

            // Check font size progression for logical hierarchy
            var smallToMediumRatio = theme.FontSizeMedium / theme.FontSizeSmall;
            var mediumToLargeRatio = theme.FontSizeLarge / theme.FontSizeMedium;

            if (smallToMediumRatio < 1.1)
            {
                result.AddWarning("Small and medium font sizes are too similar. Consider larger difference for better visual hierarchy");
            }

            if (mediumToLargeRatio < 1.2)
            {
                result.AddWarning("Medium and large font sizes are too similar. Consider larger difference for better visual hierarchy");
            }
        }

        private void ValidateColorDifferentiation(Skin theme, SkinValidator validator, SkinValidationResult result)
        {
            // Check if primary and secondary colors are sufficiently different
            var primarySecondaryDiff = validator.CalculateContrastRatio(theme.PrimaryColor, theme.SecondaryColor);
            if (primarySecondaryDiff < 1.5)
            {
                result.AddWarning($"Primary and secondary colors are very similar ({primarySecondaryDiff:F2}:1). Users may have difficulty distinguishing them");
            }

            // Check background color differentiation
            var backgroundDiff = validator.CalculateContrastRatio(theme.PrimaryBackground, theme.SecondaryBackground);
            if (backgroundDiff < 1.3)
            {
                result.AddWarning($"Primary and secondary backgrounds are very similar ({backgroundDiff:F2}:1). May reduce visual hierarchy");
            }

            // Ensure accent color is sufficiently different from primary colors
            var accentPrimaryDiff = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryColor);
            if (accentPrimaryDiff < 2.0)
            {
                result.AddWarning($"Accent color is too similar to primary color ({accentPrimaryDiff:F2}:1). May not provide sufficient emphasis");
            }
        }

        private void ValidateFocusIndicators(Skin theme, SkinValidator validator, SkinValidationResult result)
        {
            // Check if accent color (typically used for focus) is visible against backgrounds
            var accentFocusVisibility = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryBackground);
            if (accentFocusVisibility < 3.0)
            {
                result.AddError($"Accent color (focus indicator) has insufficient contrast against primary background ({accentFocusVisibility:F2}:1). Focus may not be visible to all users");
            }

            // Check border visibility for focus indicators
            var borderFocusVisibility = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryBackground);
            if (borderFocusVisibility < 2.0)
            {
                result.AddWarning($"Border color has low contrast against primary background ({borderFocusVisibility:F2}:1). May impact focus indicator visibility");
            }
        }

        private void ValidateStatusColors(Skin theme, SkinValidator validator, SkinValidationResult result)
        {
            // Validate error color visibility
            var errorVisibility = validator.CalculateContrastRatio(theme.ErrorColor, theme.PrimaryBackground);
            if (errorVisibility < 3.0)
            {
                result.AddError($"Error color has insufficient contrast ({errorVisibility:F2}:1). Critical error messages may not be visible");
            }

            // Validate warning color visibility
            var warningVisibility = validator.CalculateContrastRatio(theme.WarningColor, theme.PrimaryBackground);
            if (warningVisibility < 3.0)
            {
                result.AddWarning($"Warning color has low contrast ({warningVisibility:F2}:1). Warning messages may not be clearly visible");
            }

            // Validate success color visibility
            var successVisibility = validator.CalculateContrastRatio(theme.SuccessColor, theme.PrimaryBackground);
            if (successVisibility < 3.0)
            {
                result.AddWarning($"Success color has low contrast ({successVisibility:F2}:1). Success messages may not be clearly visible");
            }

            // Check that status colors are sufficiently different from each other
            ValidateStatusColorDifferentiation(theme, validator, result);
        }

        private void ValidateStatusColorDifferentiation(Skin theme, SkinValidator validator, SkinValidationResult result)
        {
            var errorWarningDiff = validator.CalculateContrastRatio(theme.ErrorColor, theme.WarningColor);
            if (errorWarningDiff < 2.0)
            {
                result.AddWarning($"Error and warning colors are too similar ({errorWarningDiff:F2}:1). Users may confuse error and warning states");
            }

            var errorSuccessDiff = validator.CalculateContrastRatio(theme.ErrorColor, theme.SuccessColor);
            if (errorSuccessDiff < 2.0)
            {
                result.AddWarning($"Error and success colors are too similar ({errorSuccessDiff:F2}:1). Users may confuse error and success states");
            }

            var warningSuccessDiff = validator.CalculateContrastRatio(theme.WarningColor, theme.SuccessColor);
            if (warningSuccessDiff < 2.0)
            {
                result.AddWarning($"Warning and success colors are too similar ({warningSuccessDiff:F2}:1). Users may confuse warning and success states");
            }
        }

        private void ValidateVisualStability(Skin theme, SkinValidationResult result)
        {
            // Check for colors that might trigger photosensitive epilepsy
            if (IsHighSaturationColor(theme.AccentColor) || IsHighSaturationColor(theme.ErrorColor))
            {
                result.AddWarning("Skin contains very bright, saturated colors that could be problematic for users with photosensitive conditions");
            }

            // Check for extreme contrast that might cause eye strain
            var textBackgroundContrast = new SkinValidator().CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);
            if (textBackgroundContrast > 15.0)
            {
                result.AddWarning($"Very high contrast ratio ({textBackgroundContrast:F2}:1) may cause eye strain for some users during extended use");
            }
        }

        private bool IsHighSaturationColor(Color color)
        {
            // Convert to HSV to check saturation
            var max = Math.Max(color.R, Math.Max(color.G, color.B)) / 255.0;
            var min = Math.Min(color.R, Math.Min(color.G, color.B)) / 255.0;

            var saturation = max == 0 ? 0 : (max - min) / max;
            var value = max;

            // High saturation (>0.8) and high value (>0.8) might be problematic
            return saturation > 0.8 && value > 0.8;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\ValidationRules\BorderValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Services.ValidationRules
{
    /// <summary>
    /// Validates border-related properties of themes to ensure visual consistency and usability.
    /// </summary>
    public class BorderValidationRule : ISkinValidationRule
    {
        /// <summary>
        /// Validates border properties including thickness, radius, and color contrast.
        /// </summary>
        /// <param name="skin">The skin to validate</param>
        /// <returns>Validation result with any errors or warnings</returns>
        public SkinValidationResult Validate(Skin skin)
        {
            var result = new SkinValidationResult();

            // Validate border thickness
            ValidateBorderThickness(skin, result);

            // Validate border radius
            ValidateBorderRadius(skin, result);

            // Validate border color contrast
            ValidateBorderColorContrast(skin, result);

            return result;
        }

        private void ValidateBorderThickness(Skin theme, SkinValidationResult result)
        {
            var thickness = theme.BorderThickness;

            // Check for negative values
            if (thickness.Left < 0 || thickness.Top < 0 || thickness.Right < 0 || thickness.Bottom < 0)
            {
                result.AddError("Border thickness values cannot be negative");
            }

            // Check for excessive thickness
            var maxThickness = Math.Max(Math.Max(thickness.Left, thickness.Right),
                                      Math.Max(thickness.Top, thickness.Bottom));
            if (maxThickness > 10)
            {
                result.AddWarning($"Border thickness ({maxThickness}) is very large and may impact usability");
            }

            // Check for zero thickness (might be intentional)
            if (thickness.Left == 0 && thickness.Top == 0 && thickness.Right == 0 && thickness.Bottom == 0)
            {
                result.AddWarning("All border thickness values are zero - borders will be invisible");
            }
        }

        private void ValidateBorderRadius(Skin theme, SkinValidationResult result)
        {
            var radius = theme.BorderRadius;

            // Check for negative radius
            if (radius < 0)
            {
                result.AddError($"Border radius ({radius}) cannot be negative");
            }

            // Check for excessive radius
            if (radius > 50)
            {
                result.AddWarning($"Border radius ({radius}) is very large and may cause visual issues");
            }

            // Check for very small radius that might not be visible
            if (radius > 0 && radius < 1)
            {
                result.AddWarning($"Border radius ({radius}) is very small and may not be visible");
            }
        }

        private void ValidateBorderColorContrast(Skin theme, SkinValidationResult result)
        {
            var validator = new SkinValidator();

            // Check border contrast against primary background
            var primaryBorderContrast = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryBackground);
            if (primaryBorderContrast < 1.5)
            {
                result.AddError($"Border color has insufficient contrast against primary background (ratio: {primaryBorderContrast:F2})");
            }
            else if (primaryBorderContrast < 2.0)
            {
                result.AddWarning($"Border color has low contrast against primary background (ratio: {primaryBorderContrast:F2})");
            }

            // Check border contrast against secondary background
            var secondaryBorderContrast = validator.CalculateContrastRatio(theme.BorderColor, theme.SecondaryBackground);
            if (secondaryBorderContrast < 1.5)
            {
                result.AddError($"Border color has insufficient contrast against secondary background (ratio: {secondaryBorderContrast:F2})");
            }
            else if (secondaryBorderContrast < 2.0)
            {
                result.AddWarning($"Border color has low contrast against secondary background (ratio: {secondaryBorderContrast:F2})");
            }

            // Check if border color is too similar to text colors (might cause confusion)
            var textSimilarity = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryTextColor);
            if (textSimilarity < 1.2)
            {
                result.AddWarning("Border color is very similar to primary text color, which may cause visual confusion");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\ValidationRules\ColorValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Services.ValidationRules
{
    /// <summary>
    /// 
    /// </summary>
    public class ColorContrastValidationRule : ISkinValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="skin"></param>
        /// <returns></returns>
        public SkinValidationResult Validate(Skin skin)
        {
            var result = new SkinValidationResult();
            var validator = new SkinValidator();

            // Check primary text contrast
            var primaryContrast = validator.CalculateContrastRatio(skin.PrimaryTextColor, skin.PrimaryBackground);
            if (primaryContrast < 4.5) // WCAG AA standard
            {
                result.AddError($"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AA standard (4.5:1)");
            }
            else if (primaryContrast < 7.0) // WCAG AAA standard
            {
                result.AddWarning($"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AAA standard (7.0:1)");
            }

            // Check secondary text contrast
            var secondaryContrast = validator.CalculateContrastRatio(skin.SecondaryTextColor, skin.SecondaryBackground);
            if (secondaryContrast < 3.0) // More lenient for secondary text
            {
                result.AddError($"Secondary text contrast ratio ({secondaryContrast:F2}) is below minimum standard (3.0:1)");
            }

            // Check accent color readability
            var accentContrast = validator.CalculateContrastRatio(skin.PrimaryTextColor, skin.AccentColor);
            if (accentContrast < 3.0)
            {
                result.AddWarning($"Accent color contrast with primary text ({accentContrast:F2}) may be difficult to read");
            }

            return result;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\ValidationRules\FontValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;

namespace Avalonia.Accelerate.Appearance.Services.ValidationRules
{
    /// <summary>
    /// 
    /// </summary>
    public class FontSizeValidationRule : ISkinValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        public SkinValidationResult Validate(Skin skin)
        {
            var result = new SkinValidationResult();

            if (skin.FontSizeSmall < 8 || skin.FontSizeSmall > 20)
            {
                result.AddError($"Small font size ({skin.FontSizeSmall}) should be between 8 and 20");
            }

            if (skin.FontSizeMedium < 10 || skin.FontSizeMedium > 24)
            {
                result.AddError($"Medium font size ({skin.FontSizeMedium}) should be between 10 and 24");
            }

            if (skin.FontSizeLarge < 12 || skin.FontSizeLarge > 32)
            {
                result.AddError($"Large font size ({skin.FontSizeLarge}) should be between 12 and 32");
            }

            if (skin.FontSizeSmall >= skin.FontSizeMedium)
            {
                result.AddError("Small font size should be smaller than medium font size");
            }

            if (skin.FontSizeMedium >= skin.FontSizeLarge)
            {
                result.AddError("Medium font size should be smaller than large font size");
            }

            return result;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Services\ValidationRules\NameValidationRule.cs
================================================================================

using Avalonia.Accelerate.Appearance.Interfaces;
using Avalonia.Accelerate.Appearance.Model;
using System.Text.RegularExpressions;

namespace Avalonia.Accelerate.Appearance.Services.ValidationRules
{
    /// <summary>
    /// Validates theme naming conventions and ensures proper identification.
    /// </summary>
    public class NameValidationRule : ISkinValidationRule
    {
        private static readonly Regex ValidNamePattern = new Regex(@"^[a-zA-Z0-9\s\-_\.]+$", RegexOptions.Compiled);
        private static readonly string[] ReservedNames = { "Default", "System", "Auto", "None", "Null", "Empty" };
        private static readonly string[] ProblematicNames = { "Test", "Debug", "Temp", "Sample" };

        /// <summary>
        /// Validates skin name for proper format, uniqueness, and conventions.
        /// </summary>
        /// <param name="skin">The skin to validate</param>
        /// <returns>Validation result with any errors or warnings</returns>
        public SkinValidationResult Validate(Skin skin)
        {
            var result = new SkinValidationResult();

            // Validate name existence
            ValidateNameExists(skin, result);

            // Validate name format
            ValidateNameFormat(skin, result);

            // Validate name length
            ValidateNameLength(skin, result);

            // Validate reserved names
            ValidateReservedNames(skin, result);

            // Validate naming conventions
            ValidateNamingConventions(skin, result);

            return result;
        }

        private void ValidateNameExists(Skin theme, SkinValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name))
            {
                result.AddError("Skin name is required and cannot be null or empty");
                return;
            }

            if (string.IsNullOrWhiteSpace(theme.Name))
            {
                result.AddError("Skin name cannot be only whitespace");
            }
        }

        private void ValidateNameFormat(Skin theme, SkinValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            // Check for valid characters
            if (!ValidNamePattern.IsMatch(theme.Name))
            {
                result.AddError("Skin name contains invalid characters. Only letters, numbers, spaces, hyphens, underscores, and periods are allowed");
            }

            // Check for leading/trailing whitespace
            if (theme.Name != theme.Name.Trim())
            {
                result.AddWarning("Skin name has leading or trailing whitespace");
            }

            // Check for multiple consecutive spaces
            if (theme.Name.Contains("  "))
            {
                result.AddWarning("Skin name contains multiple consecutive spaces");
            }

            // Check for starting with special characters
            if (theme.Name.StartsWith("-") || theme.Name.StartsWith("_") || theme.Name.StartsWith("."))
            {
                result.AddWarning("Skin name starts with a special character, which may cause sorting issues");
            }
        }

        private void ValidateNameLength(Skin theme, SkinValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            // Check minimum length
            if (theme.Name.Trim().Length < 2)
            {
                result.AddError("Skin name must be at least 2 characters long");
            }

            // Check maximum length
            if (theme.Name.Length > 50)
            {
                result.AddError($"Skin name is too long ({theme.Name.Length} characters). Maximum length is 50 characters");
            }
            else if (theme.Name.Length > 30)
            {
                result.AddWarning($"Skin name is quite long ({theme.Name.Length} characters). Consider a shorter name for better UI display");
            }
        }

        private void ValidateReservedNames(Skin theme, SkinValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            var nameLower = theme.Name.ToLowerInvariant().Trim();

            // Check reserved system names
            if (ReservedNames.Any(reserved => string.Equals(nameLower, reserved.ToLowerInvariant(), StringComparison.OrdinalIgnoreCase)))
            {
                result.AddError($"'{theme.Name}' is a reserved name and cannot be used for custom themes");
            }

            // Check problematic names that might cause confusion
            if (ProblematicNames.Any(problematic => string.Equals(nameLower, problematic.ToLowerInvariant(), StringComparison.OrdinalIgnoreCase)))
            {
                result.AddWarning($"'{theme.Name}' might be confusing as it suggests a temporary or development theme");
            }

            // Check for names that might conflict with file system
            if (nameLower.Contains("con") || nameLower.Contains("prn") || nameLower.Contains("aux") ||
                nameLower.Contains("nul") || nameLower.StartsWith("com") || nameLower.StartsWith("lpt"))
            {
                result.AddWarning($"'{theme.Name}' contains patterns that might cause issues on some file systems");
            }
        }

        private void ValidateNamingConventions(Skin theme, SkinValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            var name = theme.Name.Trim();

            // Check for descriptive naming
            if (name.Length < 4 && !char.IsUpper(name[0]))
            {
                result.AddWarning("Very short theme names should be capitalized for better readability");
            }

            // Check for version numbers in name (might indicate poor naming)
            if (Regex.IsMatch(name, @"\bv?\d+(\.\d+)*\b", RegexOptions.IgnoreCase))
            {
                result.AddWarning("Skin name contains version numbers. Consider using metadata for versioning instead");
            }

            // Check for excessive capitalization
            var upperCaseCount = name.Count(char.IsUpper);
            var letterCount = name.Count(char.IsLetter);
            if (letterCount > 0 && upperCaseCount / (double)letterCount > 0.6)
            {
                result.AddWarning("Skin name has excessive capitalization, which may impact readability");
            }

            // Check for common naming patterns
            if (name.ToLowerInvariant().EndsWith("theme") || name.ToLowerInvariant().EndsWith("skin"))
            {
                result.AddWarning("Skin name ends with 'theme' or 'skin', which is redundant in this context");
            }

            // Suggest better naming for generic names
            if (name.ToLowerInvariant().Equals("theme") || name.ToLowerInvariant().Equals("skin") ||
                name.ToLowerInvariant().Equals("custom") || name.ToLowerInvariant().Equals("new"))
            {
                result.AddWarning($"'{name}' is too generic. Consider a more descriptive name that reflects the theme's characteristics");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Cyberpunk\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#0A0321",
  "SecondaryColor": "#190A5A",
  "AccentColor": "#F706CF",
  "PrimaryBackground": "#050215",
  "SecondaryBackground": "#120458",
  "PrimaryTextColor": "#F0F0FF",
  "SecondaryTextColor": "#25F3FD",
  "BorderColor": "#F706CF",
  "ErrorColor": "#FF0055",
  "WarningColor": "#FFDD00",
  "SuccessColor": "#00FECA",
  "Name": "Cyberpunk",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/TextBox.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Dark\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#2C313D",
  "SecondaryColor": "#3D4654",
  "AccentColor": "#3498DB",
  "PrimaryBackground": "#222831",
  "SecondaryBackground": "#464F62",
  "PrimaryTextColor": "#FFFFFF",
  "SecondaryTextColor": "#BBCDE5",
  "BorderColor": "#5D6778",
  "ErrorColor": "#E74C3C",
  "WarningColor": "#F39C12",
  "SuccessColor": "#2ECC71",
  "Name": "Dark",

  "BaseTheme": "",

  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ],

  "Assets": {
    "Logo": "ControlThemes/Assets/jackrabbit.png"
  },

  "AdvancedTypography": {
    "DisplayLarge": 57,
    "DisplayMedium": 45,
    "DisplaySmall": 36,
    "HeadlineLarge": 32,
    "HeadlineMedium": 28,
    "HeadlineSmall": 24,
    "TitleLarge": 22,
    "TitleMedium": 16,
    "TitleSmall": 14,
    "LabelLarge": 14,
    "LabelMedium": 12,
    "LabelSmall": 11,
    "BodyLarge": 16,
    "BodyMedium": 14,
    "BodySmall": 12,
    "HeaderFontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
    "BodyFontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
    "MonospaceFontFamily": "Consolas, Monaco, 'Courier New', monospace",
    "LineHeight": 1.5,
    "LetterSpacing": 0,
    "EnableLigatures": true
  }


}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Forest Green\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#1B3A2D",
  "SecondaryColor": "#2E7D32",
  "AccentColor": "#4CAF50",
  "PrimaryBackground": "#0A2814",
  "SecondaryBackground": "#1B5E20",
  "PrimaryTextColor": "#FFFFFF",
  "SecondaryTextColor": "#B9F6CA",
  "BorderColor": "#388E3C",
  "ErrorColor": "#FF5252",
  "WarningColor": "#FFD740",
  "SuccessColor": "#69F0AE",
  "Name": "Forest Green",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\High Contrast\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#000000",
  "SecondaryColor": "#121212",
  "AccentColor": "#FFFF00",
  "PrimaryBackground": "#000000",
  "SecondaryBackground": "#1F1F1F",
  "PrimaryTextColor": "#FFFFFF",
  "SecondaryTextColor": "#FFFF00",
  "BorderColor": "#FFFFFF",
  "ErrorColor": "#FF0000",
  "WarningColor": "#FFFF00",
  "SuccessColor": "#00FF00",
  "Name": "High Contrast",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Light\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#FFFFFF",
  "SecondaryColor": "#F0F0F0",
  "AccentColor": "#2980B9",
  "PrimaryBackground": "#F5F5F5",
  "SecondaryBackground": "#E0E0E0",
  "PrimaryTextColor": "#333333",
  "SecondaryTextColor": "#555555",
  "BorderColor": "#CCCCCC",
  "ErrorColor": "#D32F2F",
  "WarningColor": "#F57C00",
  "SuccessColor": "#388E3C",
  "Name": "Light",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Material Design 3\theme.json
================================================================================

{
  "name": "Material Design 3",
  "description": "Google's latest Material Design language with dynamic colors, rounded corners, and elevated surfaces",
  "version": "1.0",
  "author": "AvaloniaThemeManager",
  "createdDate": "2025-01-20T00:00:00Z",
  "primaryColor": "#E8DEF8",
  "secondaryColor": "#E7E0EC",
  "accentColor": "#6750A4",
  "primaryBackground": "#FFFBFE",
  "secondaryBackground": "#F7F2FA",
  "primaryTextColor": "#1C1B1F",
  "secondaryTextColor": "#49454F",
  "borderColor": "#CAC4D0",
  "errorColor": "#BA1A1A",
  "warningColor": "#7D5260",
  "successColor": "#006A6B",
  "fontFamily": "Roboto, system-ui, sans-serif",
  "fontSizeSmall": 12,
  "fontSizeMedium": 14,
  "fontSizeLarge": 18,
  "fontWeight": "Medium",
  "borderRadius": 12,
  "borderThickness": {
    "left": 1,
    "top": 1,
    "right": 1,
    "bottom": 1
  }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\theme.json
================================================================================

{
  "Name": "ModernIce",
  "Description": "A clean modern light theme with icy blue accents and subtle shadows.",
  "Version": "1.0",
  "Author": "ThemeGenerator",
  "CreatedDate": "2025-05-31T11:41:27.282728",
  "PrimaryColor": "#E6F0FA",
  "SecondaryColor": "#FFFFFF",
  "AccentColor": "#4A90E2",
  "PrimaryBackground": "#F7FAFC",
  "SecondaryBackground": "#E6ECF2",
  "PrimaryTextColor": "#2A3B4C",
  "SecondaryTextColor": "#6C7A89",
  "BorderColor": "#B0C4D8",
  "ErrorColor": "#D64545",
  "WarningColor": "#F39C12",
  "SuccessColor": "#27AE60",
  "FontFamily": "Segoe UI, Roboto, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 12,
  "FontSizeMedium": 14,
  "FontSizeLarge": 16,
  "FontWeight": "Normal",
  "BorderRadius": 6,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml",
    "ControlThemes/TextBox.axaml",
    "ControlThemes/CheckBox.axaml",
    "ControlThemes/ComboBox.axaml",
    "ControlThemes/Slider.axaml",
    "ControlThemes/Expander.axaml",
    "ControlThemes/TabControl.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#0F2A4A",
  "SecondaryColor": "#2C5D8A",
  "AccentColor": "#4FB0FF",
  "PrimaryBackground": "#0A1929",
  "SecondaryBackground": "#1A4980",
  "PrimaryTextColor": "#FFFFFF",
  "SecondaryTextColor": "#B8D4FF",
  "BorderColor": "#3A7DBA",
  "ErrorColor": "#FF5252",
  "WarningColor": "#FFD740",
  "SuccessColor": "#69F0AE",
  "Name": "Ocean Blue",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Purple Haze\theme.json
================================================================================

{
  "Description": "Auto-converted theme with ControlThemes",
  "Version": "1.0",
  "Author": "System",
  "CreatedDate": "2025-05-31T11:09:01.842464",
  "FontFamily": "Segoe UI, San Francisco, Helvetica, Arial, sans-serif",
  "FontSizeSmall": 11,
  "FontSizeMedium": 12,
  "FontSizeLarge": 14,
  "FontWeight": "Normal",
  "BorderRadius": 3,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "PrimaryColor": "#301E4E",
  "SecondaryColor": "#6A1B9A",
  "AccentColor": "#D500F9",
  "PrimaryBackground": "#1E1033",
  "SecondaryBackground": "#4A148C",
  "PrimaryTextColor": "#FFFFFF",
  "SecondaryTextColor": "#E1BEE7",
  "BorderColor": "#9C27B0",
  "ErrorColor": "#FF5252",
  "WarningColor": "#FFD740",
  "SuccessColor": "#69F0AE",
  "Name": "Purple Haze",
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\theme.json
================================================================================

{
  "Name": "RetroTerminal",
  "Description": "A retro green terminal-inspired theme with monospaced fonts.",
  "Version": "1.0",
  "Author": "ThemeGenerator",
  "CreatedDate": "2025-05-31T11:38:39.216888",
  "PrimaryColor": "#003B00",
  "SecondaryColor": "#005500",
  "AccentColor": "#00FF00",
  "PrimaryBackground": "#001A00",
  "SecondaryBackground": "#003000",
  "PrimaryTextColor": "#00FF00",
  "SecondaryTextColor": "#88FF88",
  "BorderColor": "#00AA00",
  "ErrorColor": "#FF3333",
  "WarningColor": "#FFFF33",
  "SuccessColor": "#33FF33",
  "FontFamily": "Consolas, Courier New, monospace",
  "FontSizeSmall": 11,
  "FontSizeMedium": 13,
  "FontSizeLarge": 15,
  "FontWeight": "Normal",
  "BorderRadius": 0,
  "BorderThickness": {
    "Left": 1,
    "Top": 1,
    "Right": 1,
    "Bottom": 1
  },
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml",
    "ControlThemes/TextBox.axaml",
    "ControlThemes/CheckBox.axaml",
    "ControlThemes/ComboBox.axaml",
    "ControlThemes/Slider.axaml",
    "ControlThemes/Expander.axaml",
    "ControlThemes/TabControl.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Windows 11 Modern\theme.json
================================================================================

{
  "name": "Windows 11 Modern",
  "description": "Clean, modern theme inspired by Windows 11 design language with rounded corners and subtle shadows",
  "version": "1.0",
  "author": "AvaloniaThemeManager",
  "createdDate": "2025-01-20T00:00:00Z",
  "primaryColor": "#F3F3F3",
  "secondaryColor": "#FAFAFA",
  "accentColor": "#0078D4",
  "primaryBackground": "#FFFFFF",
  "secondaryBackground": "#F9F9F9",
  "primaryTextColor": "#1F1F1F",
  "secondaryTextColor": "#616161",
  "borderColor": "#E1E1E1",
  "errorColor": "#D13438",
  "warningColor": "#FF8C00",
  "successColor": "#107C10",
  "fontFamily": "Segoe UI, system-ui, sans-serif",
  "fontSizeSmall": 12,
  "fontSizeMedium": 14,
  "fontSizeLarge": 18,
  "fontWeight": "Normal",
  "borderRadius": 8,
  "borderThickness": {
    "left": 1,
    "top": 1,
    "right": 1,
    "bottom": 1
  },
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Zen Garden\theme.json
================================================================================

{
  "name": "Zen Garden",
  "description": "Calming, nature-inspired theme with sage greens and earth tones for peaceful productivity",
  "version": "1.0",
  "author": "AvaloniaThemeManager",
  "createdDate": "2025-01-20T00:00:00Z",
  "primaryColor": "#8FAE8D",
  "secondaryColor": "#A4BCA2",
  "accentColor": "#5D7C5B",
  "primaryBackground": "#F8FBF8",
  "secondaryBackground": "#F0F5F0",
  "primaryTextColor": "#2D3E2D",
  "secondaryTextColor": "#5A6B5A",
  "borderColor": "#C5D4C5",
  "errorColor": "#B85450",
  "warningColor": "#C4935A",
  "successColor": "#6B8F6B",
  "fontFamily": "Segoe UI, Helvetica Neue, Arial, sans-serif",
  "fontSizeSmall": 12,
  "fontSizeMedium": 14,
  "fontSizeLarge": 18,
  "fontWeight": "Normal",
  "borderRadius": 6,
  "borderThickness": {
    "left": 1,
    "top": 1,
    "right": 1,
    "bottom": 1
  },
  "ControlThemes": [
    "ControlThemes/TextBlock.axaml",
    "ControlThemes/Button.axaml"
  ]
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\bin\Debug\net8.0\Avalonia.Accelerate.Appearance.deps.json
================================================================================

{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Avalonia.Accelerate.Appearance/1.0.0": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Accelerate.Icons": "1.0.0",
          "Avalonia.Desktop": "11.3.1",
          "Avalonia.Fonts.Inter": "11.3.1",
          "Avalonia.ReactiveUI": "11.3.1",
          "Microsoft.Extensions.DependencyInjection": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Console": "9.0.5",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "Avalonia.Accelerate.Appearance.dll": {}
        }
      },
      "Avalonia/11.3.1": {
        "dependencies": {
          "Avalonia.BuildServices": "0.0.31",
          "Avalonia.Remote.Protocol": "11.3.1",
          "MicroCom.Runtime": "0.11.0"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Base.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Controls.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.DesignerSupport.dll": {
            "assemblyVersion": "0.7.0.0",
            "fileVersion": "0.7.0.0"
          },
          "lib/net8.0/Avalonia.Dialogs.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Markup.Xaml.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Markup.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Metal.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.MicroCom.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.OpenGL.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Vulkan.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/av_libglesv2.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          },
          "runtimes/win-x64/native/av_libglesv2.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          },
          "runtimes/win-x86/native/av_libglesv2.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "2.1.25606.0"
          }
        }
      },
      "Avalonia.BuildServices/0.0.31": {},
      "Avalonia.Controls.ColorPicker/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Remote.Protocol": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Controls.ColorPicker.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Desktop/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Native": "11.3.1",
          "Avalonia.Skia": "11.3.1",
          "Avalonia.Win32": "11.3.1",
          "Avalonia.X11": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Desktop.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Diagnostics/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Controls.ColorPicker": "11.3.1",
          "Avalonia.Themes.Simple": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Diagnostics.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Fonts.Inter/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Fonts.Inter.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.FreeDesktop/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Tmds.DBus.Protocol": "0.21.2"
        },
        "runtime": {
          "lib/net8.0/Avalonia.FreeDesktop.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Native/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Native.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        },
        "runtimeTargets": {
          "runtimes/osx/native/libAvaloniaNative.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "Avalonia.ReactiveUI/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "ReactiveUI": "20.1.1",
          "System.Reactive": "6.0.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.ReactiveUI.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Remote.Protocol/11.3.1": {
        "runtime": {
          "lib/net8.0/Avalonia.Remote.Protocol.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Skia/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "HarfBuzzSharp": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.Linux": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.WebAssembly": "8.3.1.1",
          "SkiaSharp": "2.88.9",
          "SkiaSharp.NativeAssets.Linux": "2.88.9",
          "SkiaSharp.NativeAssets.WebAssembly": "2.88.9"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Skia.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Themes.Fluent/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Fluent.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Themes.Simple/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Themes.Simple.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.Win32/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Angle.Windows.Natives": "2.1.25547.20250602"
        },
        "runtime": {
          "lib/net8.0/Avalonia.Win32.Automation.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          },
          "lib/net8.0/Avalonia.Win32.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "Avalonia.X11/11.3.1": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.FreeDesktop": "11.3.1",
          "Avalonia.Skia": "11.3.1"
        },
        "runtime": {
          "lib/net8.0/Avalonia.X11.dll": {
            "assemblyVersion": "11.3.1.0",
            "fileVersion": "11.3.1.0"
          }
        }
      },
      "DynamicData/8.4.1": {
        "dependencies": {
          "System.Reactive": "6.0.1"
        },
        "runtime": {
          "lib/net8.0/DynamicData.dll": {
            "assemblyVersion": "8.4.0.0",
            "fileVersion": "8.4.1.20756"
          }
        }
      },
      "HarfBuzzSharp/8.3.1.1": {
        "dependencies": {
          "HarfBuzzSharp.NativeAssets.Win32": "8.3.1.1",
          "HarfBuzzSharp.NativeAssets.macOS": "8.3.1.1"
        },
        "runtime": {
          "lib/net8.0/HarfBuzzSharp.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "8.3.1.1"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/linux-arm/native/libHarfBuzzSharp.so": {
            "rid": "linux-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-arm64/native/libHarfBuzzSharp.so": {
            "rid": "linux-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-loongarch64/native/libHarfBuzzSharp.so": {
            "rid": "linux-loongarch64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-arm/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-arm64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-loongarch64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-loongarch64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-riscv64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-riscv64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-x64/native/libHarfBuzzSharp.so": {
            "rid": "linux-musl-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-riscv64/native/libHarfBuzzSharp.so": {
            "rid": "linux-riscv64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libHarfBuzzSharp.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x86/native/libHarfBuzzSharp.so": {
            "rid": "linux-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/osx/native/libHarfBuzzSharp.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {},
      "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/libHarfBuzzSharp.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/libHarfBuzzSharp.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x86/native/libHarfBuzzSharp.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "MicroCom.Runtime/0.11.0": {
        "runtime": {
          "lib/net5.0/MicroCom.Runtime.dll": {
            "assemblyVersion": "0.11.0.0",
            "fileVersion": "0.11.0.0"
          }
        }
      },
      "Microsoft.Extensions.Configuration/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.5": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Logging/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "System.Diagnostics.DiagnosticSource": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Logging.Configuration/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.Configuration": "9.0.5",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Configuration.Binder": "9.0.5",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "Microsoft.Extensions.Options.ConfigurationExtensions": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Logging.Console/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.5",
          "Microsoft.Extensions.Logging.Configuration": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "System.Text.Json": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Console.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Options/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Options.ConfigurationExtensions/9.0.5": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.5",
          "Microsoft.Extensions.Configuration.Binder": "9.0.5",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.5",
          "Microsoft.Extensions.Options": "9.0.5",
          "Microsoft.Extensions.Primitives": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.ConfigurationExtensions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Microsoft.Extensions.Primitives/9.0.5": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "ReactiveUI/20.1.1": {
        "dependencies": {
          "DynamicData": "8.4.1",
          "Splat": "15.1.1",
          "System.ComponentModel.Annotations": "5.0.0"
        },
        "runtime": {
          "lib/net8.0/ReactiveUI.dll": {
            "assemblyVersion": "20.1.0.0",
            "fileVersion": "20.1.1.46356"
          }
        }
      },
      "SkiaSharp/2.88.9": {
        "dependencies": {
          "SkiaSharp.NativeAssets.Win32": "2.88.9",
          "SkiaSharp.NativeAssets.macOS": "2.88.9"
        },
        "runtime": {
          "lib/net6.0/SkiaSharp.dll": {
            "assemblyVersion": "2.88.0.0",
            "fileVersion": "2.88.9.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.Linux/2.88.9": {
        "dependencies": {
          "SkiaSharp": "2.88.9"
        },
        "runtimeTargets": {
          "runtimes/linux-arm/native/libSkiaSharp.so": {
            "rid": "linux-arm",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-arm64/native/libSkiaSharp.so": {
            "rid": "linux-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-musl-x64/native/libSkiaSharp.so": {
            "rid": "linux-musl-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/linux-x64/native/libSkiaSharp.so": {
            "rid": "linux-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.macOS/2.88.9": {
        "runtimeTargets": {
          "runtimes/osx/native/libSkiaSharp.dylib": {
            "rid": "osx",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {},
      "SkiaSharp.NativeAssets.Win32/2.88.9": {
        "runtimeTargets": {
          "runtimes/win-arm64/native/libSkiaSharp.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x64/native/libSkiaSharp.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win-x86/native/libSkiaSharp.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "0.0.0.0"
          }
        }
      },
      "Splat/15.1.1": {
        "runtime": {
          "lib/net8.0/Splat.dll": {
            "assemblyVersion": "15.1.0.0",
            "fileVersion": "15.1.1.17670"
          }
        }
      },
      "System.ComponentModel.Annotations/5.0.0": {},
      "System.Diagnostics.DiagnosticSource/9.0.5": {
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "System.IO.Pipelines/9.0.5": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "System.Reactive/6.0.1": {
        "runtime": {
          "lib/net6.0/System.Reactive.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.1.7420"
          }
        }
      },
      "System.Text.Encodings.Web/9.0.5": {
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "rid": "browser",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "System.Text.Json/9.0.5": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.5",
          "System.Text.Encodings.Web": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.525.21509"
          }
        }
      },
      "Tmds.DBus.Protocol/0.21.2": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.5"
        },
        "runtime": {
          "lib/net8.0/Tmds.DBus.Protocol.dll": {
            "assemblyVersion": "0.21.2.0",
            "fileVersion": "0.21.2.0"
          }
        }
      },
      "Avalonia.Accelerate.Icons/1.0.0": {
        "dependencies": {
          "Avalonia": "11.3.1",
          "Avalonia.Desktop": "11.3.1",
          "Avalonia.Diagnostics": "11.3.1",
          "Avalonia.Fonts.Inter": "11.3.1",
          "Avalonia.ReactiveUI": "11.3.1",
          "Avalonia.Themes.Fluent": "11.3.1",
          "Microsoft.Extensions.DependencyInjection": "9.0.5",
          "Microsoft.Extensions.Logging": "9.0.5",
          "Microsoft.Extensions.Logging.Console": "9.0.5"
        },
        "runtime": {
          "Avalonia.Accelerate.Icons.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Avalonia.Accelerate.Appearance/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Avalonia/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XHZAj64Ywp3su68NBckeccY1N4Cig8J/iTzMEszWDnAWQbH8xgHftcr+DhS7PrANM/uXyFGP9n4+4v3vhJDeWA==",
      "path": "avalonia/11.3.1",
      "hashPath": "avalonia.11.3.1.nupkg.sha512"
    },
    "Avalonia.Angle.Windows.Natives/2.1.25547.20250602": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZL0VLc4s9rvNNFt19Pxm5UNAkmKNylugAwJPX9ulXZ6JWs/l6XZihPWWTyezaoNOVyEPU8YbURtW7XMAtqXH5A==",
      "path": "avalonia.angle.windows.natives/2.1.25547.20250602",
      "hashPath": "avalonia.angle.windows.natives.2.1.25547.20250602.nupkg.sha512"
    },
    "Avalonia.BuildServices/0.0.31": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KmCN6Hc+45q4OnF10ge450yVUvWuxU6bdQiyKqiSvrHKpahNrEdk0kG6Ip6GHk2SKOCttGQuA206JVdkldEENg==",
      "path": "avalonia.buildservices/0.0.31",
      "hashPath": "avalonia.buildservices.0.0.31.nupkg.sha512"
    },
    "Avalonia.Controls.ColorPicker/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+JXaqgsYtEhvi8KFYtdVriHX0P1f1PAdzNckYGbUc7s3COTLdtVRxAfbQ77SKIMx9nJu5H73X4A7y2EPB5pXdQ==",
      "path": "avalonia.controls.colorpicker/11.3.1",
      "hashPath": "avalonia.controls.colorpicker.11.3.1.nupkg.sha512"
    },
    "Avalonia.Desktop/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uFldiNKdZIGGR49CglbWW1xx9aSfJBDf0Yx2jtntZxXQlew1edF8/JEja8tmDgcFjdsrz2HZtIpDbg4ilCjcZQ==",
      "path": "avalonia.desktop/11.3.1",
      "hashPath": "avalonia.desktop.11.3.1.nupkg.sha512"
    },
    "Avalonia.Diagnostics/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Jw6JgaJJRc3Y3f+je/WnyXgYixDLq/u74qW2isDC7s1/1nmRJR14oklF6Gc6cIVhLFw0JbFJEn6ZHSOwKAsLg==",
      "path": "avalonia.diagnostics/11.3.1",
      "hashPath": "avalonia.diagnostics.11.3.1.nupkg.sha512"
    },
    "Avalonia.Fonts.Inter/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-H/K3IGbo4Eo1jYTCk64mVBECX1TnSfNwVDwVhPoHVkpb6QVZmBB1UilImMLpBYtAYG49O4JILhB5p/rdfeCjZw==",
      "path": "avalonia.fonts.inter/11.3.1",
      "hashPath": "avalonia.fonts.inter.11.3.1.nupkg.sha512"
    },
    "Avalonia.FreeDesktop/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OXR5lDGz0ACWrvyJPisiLk6j97L8keDxKXFbSI6t4gfM9QiqIcBF7aATbEMx1d4oiey3tH5DgcpzVmop5jmvFA==",
      "path": "avalonia.freedesktop/11.3.1",
      "hashPath": "avalonia.freedesktop.11.3.1.nupkg.sha512"
    },
    "Avalonia.Native/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ts4PWrpql5mowsxAks/WBI/VheU329CwPE12grEZD46moOhmrQ/tuX8ge8lyAhhVy8h8LFC5KImdDIkhlbeVzQ==",
      "path": "avalonia.native/11.3.1",
      "hashPath": "avalonia.native.11.3.1.nupkg.sha512"
    },
    "Avalonia.ReactiveUI/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-grTLYdDqx27wKCqY+eh0RnTJjHQhFfCC0dgAgQpIT3pghXH3FQTUbGMOYE8h+GCNg0xxsPCNvZ5bqc6ekRvzoQ==",
      "path": "avalonia.reactiveui/11.3.1",
      "hashPath": "avalonia.reactiveui.11.3.1.nupkg.sha512"
    },
    "Avalonia.Remote.Protocol/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IujOppxgsmjNP2oCas++LWNUTqwzSko7ey60+0tHfy7Q6vnTmtL+0vQidtmoKYea/NYvWqIw+YxLUY3XRwYhSQ==",
      "path": "avalonia.remote.protocol/11.3.1",
      "hashPath": "avalonia.remote.protocol.11.3.1.nupkg.sha512"
    },
    "Avalonia.Skia/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VSBecGRgd3xtBwFzWNuoSVP1gUO+BV9zX1zTUrw/ftdZKmtOe8m3VT7u2TCBvUSD6nJrSNe6JXHE585kCQFjcQ==",
      "path": "avalonia.skia/11.3.1",
      "hashPath": "avalonia.skia.11.3.1.nupkg.sha512"
    },
    "Avalonia.Themes.Fluent/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3ImtHxSaG1RGk3uY3+dLoAlxrmE3Y2QzqMbIaQgsdEbFxUqKvl2m32Yg/yw00+2nrMy2KGQLL9tkbnvHPWp5OA==",
      "path": "avalonia.themes.fluent/11.3.1",
      "hashPath": "avalonia.themes.fluent.11.3.1.nupkg.sha512"
    },
    "Avalonia.Themes.Simple/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bUr8cN1Wu9NUro/RHZZkBJdv08+KVtqSUGBMNQZLjyYhxQtgrAo5tTsqWPOjPCCKcIcH+db3VOktWlPfGvz8Fw==",
      "path": "avalonia.themes.simple/11.3.1",
      "hashPath": "avalonia.themes.simple.11.3.1.nupkg.sha512"
    },
    "Avalonia.Win32/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-H0jcthY+CHXJq/l/uVLG1SloNowp/6buIxuIv3J8RKiVW6L2XD2uv89KP/n1c2SMQrklvRdwPzOV8WGsYNv85w==",
      "path": "avalonia.win32/11.3.1",
      "hashPath": "avalonia.win32.11.3.1.nupkg.sha512"
    },
    "Avalonia.X11/11.3.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ldr9zW6BFlHvPUpc9UYUKtrtUJzgfZ8ggnp8NWBBZEs0iqIQmZbk9cYJcAxpsL9P1w1MKiaaOBYAKeSxHUJgJA==",
      "path": "avalonia.x11/11.3.1",
      "hashPath": "avalonia.x11.11.3.1.nupkg.sha512"
    },
    "DynamicData/8.4.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Mn1+fU/jqxgONEJq8KLQPGWEi7g/hUVTbjZyn4QM0sWWDAVOHPO9WjXWORSykwdfg/6S3GM15qsfz+2EvO+QAQ==",
      "path": "dynamicdata/8.4.1",
      "hashPath": "dynamicdata.8.4.1.nupkg.sha512"
    },
    "HarfBuzzSharp/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tLZN66oe/uiRPTZfrCU4i8ScVGwqHNh5MHrXj0yVf4l7Mz0FhTGnQ71RGySROTmdognAs0JtluHkL41pIabWuQ==",
      "path": "harfbuzzsharp/8.3.1.1",
      "hashPath": "harfbuzzsharp.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.Linux/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3EZ1mpIiKWRLL5hUYA82ZHteeDIVaEA/Z0rA/wU6tjx6crcAkJnBPwDXZugBSfo8+J3EznvRJf49uMsqYfKrHg==",
      "path": "harfbuzzsharp.nativeassets.linux/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.linux.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.macOS/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jbtCsgftcaFLCA13tVKo5iWdElJScrulLTKJre36O4YQTIlwDtPPqhRZNk+Y0vv4D1gxbscasGRucUDfS44ofQ==",
      "path": "harfbuzzsharp.nativeassets.macos/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.macos.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.WebAssembly/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-loJweK2u/mH/3C2zBa0ggJlITIszOkK64HLAZB7FUT670dTg965whLFYHDQo69NmC4+d9UN0icLC9VHidXaVCA==",
      "path": "harfbuzzsharp.nativeassets.webassembly/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.webassembly.8.3.1.1.nupkg.sha512"
    },
    "HarfBuzzSharp.NativeAssets.Win32/8.3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-UsJtQsfAJoFDZrXc4hCUfRPMqccfKZ0iumJ/upcUjz/cmsTgVFGNEL5yaJWmkqsuFYdMWbj/En5/kS4PFl9hBA==",
      "path": "harfbuzzsharp.nativeassets.win32/8.3.1.1",
      "hashPath": "harfbuzzsharp.nativeassets.win32.8.3.1.1.nupkg.sha512"
    },
    "MicroCom.Runtime/0.11.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MEnrZ3UIiH40hjzMDsxrTyi8dtqB5ziv3iBeeU4bXsL/7NLSal9F1lZKpK+tfBRnUoDSdtcW3KufE4yhATOMCA==",
      "path": "microcom.runtime/0.11.0",
      "hashPath": "microcom.runtime.0.11.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uYXLg2Gt8KUH5nT3u+TBpg9VrRcN5+2zPmIjqEHR4kOoBwsbtMDncEJw9HiLvZqGgIo2TR4oraibAoy5hXn2bQ==",
      "path": "microsoft.extensions.configuration/9.0.5",
      "hashPath": "microsoft.extensions.configuration.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ew0G6gIznnyAkbIa67wXspkDFcVektjN3xaDAfBDIPbWph+rbuGaaohFxUSGw28ht7wdcWtTtElKnzfkcDDbOQ==",
      "path": "microsoft.extensions.configuration.abstractions/9.0.5",
      "hashPath": "microsoft.extensions.configuration.abstractions.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7pQ4Tkyofm8DFWFhqn9ZmG8qSAC2VitWleATj5qob9V9KtoxCVdwRtmiVl/ha3WAgjkEfW++JLWXox9MJwMgkg==",
      "path": "microsoft.extensions.configuration.binder/9.0.5",
      "hashPath": "microsoft.extensions.configuration.binder.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-N1Mn0T/tUBPoLL+Fzsp+VCEtneUhhxc1//Dx3BeuQ8AX+XrMlYCfnp2zgpEXnTCB7053CLdiqVWPZ7mEX6MPjg==",
      "path": "microsoft.extensions.dependencyinjection/9.0.5",
      "hashPath": "microsoft.extensions.dependencyinjection.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjnRtsEAzU73aN6W7vkWy8Phj5t3Xm78HSqgrbh/O4Q9SK/yN73wZVa21QQY6amSLQRQ/M8N+koGnY6PuvKQsw==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.5",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rQU61lrgvpE/UgcAd4E56HPxUIkX/VUQCxWmwDTLLVeuwRDYTL0q/FLGfAW17cGTKyCh7ywYAEnY3sTEvURsfg==",
      "path": "microsoft.extensions.logging/9.0.5",
      "hashPath": "microsoft.extensions.logging.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-pP1PADCrIxMYJXxFmTVbAgEU7GVpjK5i0/tyfU9DiE0oXQy3JWQaOVgCkrCiePLgS8b5sghM3Fau3EeHiVWbCg==",
      "path": "microsoft.extensions.logging.abstractions/9.0.5",
      "hashPath": "microsoft.extensions.logging.abstractions.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Configuration/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-WgYTJ1/dxdzqaYYMrgC6cZXJVmaoxUmWgsvR9Kg5ZARpy0LMw7fZIZMIiVuaxhItwwFIW0ruhAN+Er2/oVZgmQ==",
      "path": "microsoft.extensions.logging.configuration/9.0.5",
      "hashPath": "microsoft.extensions.logging.configuration.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Console/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-0BqgvX5y34GOrsJeAypny53OoBnXjyjQCpanrpm7dZawKv5KFk7Tqbu7LFVsRu2T0tLpQ2YHMciMiAWtp+o/Bw==",
      "path": "microsoft.extensions.logging.console/9.0.5",
      "hashPath": "microsoft.extensions.logging.console.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-vPdJQU8YLOUSSK8NL0RmwcXJr2E0w8xH559PGQl4JYsglgilZr9LZnqV2zdgk+XR05+kuvhBEZKoDVd46o7NqA==",
      "path": "microsoft.extensions.options/9.0.5",
      "hashPath": "microsoft.extensions.options.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Options.ConfigurationExtensions/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-CJbAVdovKPFh2FoKxesu20odRVSbL/vtvzzObnG+5u38sOfzRS2Ncy25id0TjYUGQzMhNnJUHgTUzTMDl/3c9g==",
      "path": "microsoft.extensions.options.configurationextensions/9.0.5",
      "hashPath": "microsoft.extensions.options.configurationextensions.9.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-b4OAv1qE1C9aM+ShWJu3rlo/WjDwa/I30aIPXqDWSKXTtKl1Wwh6BZn+glH5HndGVVn3C6ZAPQj5nv7/7HJNBQ==",
      "path": "microsoft.extensions.primitives/9.0.5",
      "hashPath": "microsoft.extensions.primitives.9.0.5.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "ReactiveUI/20.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9hNPknWjijnaSWs6auypoXqUptPZcRpUypF+cf1zD50fgW+SEoQda502N3fVZ2eWPcaiUad+z6GaLwOWmUVHNw==",
      "path": "reactiveui/20.1.1",
      "hashPath": "reactiveui.20.1.1.nupkg.sha512"
    },
    "SkiaSharp/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3MD5VHjXXieSHCleRLuaTXmL2pD0mB7CcOB1x2kA1I4bhptf4e3R27iM93264ZYuAq6mkUyX5XbcxnZvMJYc1Q==",
      "path": "skiasharp/2.88.9",
      "hashPath": "skiasharp.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.Linux/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cWSaJKVPWAaT/WIn9c8T5uT/l4ETwHxNJTkEOtNKjphNo8AW6TF9O32aRkxqw3l8GUdUo66Bu7EiqtFh/XG0Zg==",
      "path": "skiasharp.nativeassets.linux/2.88.9",
      "hashPath": "skiasharp.nativeassets.linux.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.macOS/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Nv5spmKc4505Ep7oUoJ5vp3KweFpeNqxpyGDWyeEPTX2uR6S6syXIm3gj75dM0YJz7NPvcix48mR5laqs8dPuA==",
      "path": "skiasharp.nativeassets.macos/2.88.9",
      "hashPath": "skiasharp.nativeassets.macos.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.WebAssembly/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kt06RccBHSnAs2wDYdBSfsjIDbY3EpsOVqnlDgKdgvyuRA8ZFDaHRdWNx1VHjGgYzmnFCGiTJBnXFl5BqGwGnA==",
      "path": "skiasharp.nativeassets.webassembly/2.88.9",
      "hashPath": "skiasharp.nativeassets.webassembly.2.88.9.nupkg.sha512"
    },
    "SkiaSharp.NativeAssets.Win32/2.88.9": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wb2kYgU7iy84nQLYZwMeJXixvK++GoIuECjU4ECaUKNuflyRlJKyiRhN1MAHswvlvzuvkrjRWlK0Za6+kYQK7w==",
      "path": "skiasharp.nativeassets.win32/2.88.9",
      "hashPath": "skiasharp.nativeassets.win32.2.88.9.nupkg.sha512"
    },
    "Splat/15.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RHDTdF90FwVbRia2cmuIzkiVoETqnXSB2dDBBi/I35HWXqv4OKGqoMcfcd6obMvO2OmmY5PjU1M62K8LkJafAA==",
      "path": "splat/15.1.1",
      "hashPath": "splat.15.1.1.nupkg.sha512"
    },
    "System.ComponentModel.Annotations/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-dMkqfy2el8A8/I76n2Hi1oBFEbG1SfxD2l5nhwXV3XjlnOmwxJlQbYpJH4W51odnU9sARCSAgv7S3CyAFMkpYg==",
      "path": "system.componentmodel.annotations/5.0.0",
      "hashPath": "system.componentmodel.annotations.5.0.0.nupkg.sha512"
    },
    "System.Diagnostics.DiagnosticSource/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-WoI5or8kY2VxFdDmsaRZ5yaYvvb+4MCyy66eXo79Cy1uMa7qXeGIlYmZx7R9Zy5S4xZjmqvkk2V8L6/vDwAAEA==",
      "path": "system.diagnostics.diagnosticsource/9.0.5",
      "hashPath": "system.diagnostics.diagnosticsource.9.0.5.nupkg.sha512"
    },
    "System.IO.Pipelines/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-5WXo+3MGcnYn54+1ojf+kRzKq1Q6sDUnovujNJ2ky1nl1/kP3+PMil9LPbFvZ2mkhvAGmQcY07G2sfHat/v0Fw==",
      "path": "system.io.pipelines/9.0.5",
      "hashPath": "system.io.pipelines.9.0.5.nupkg.sha512"
    },
    "System.Reactive/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rHaWtKDwCi9qJ3ObKo8LHPMuuwv33YbmQi7TcUK1C264V3MFnOr5Im7QgCTdLniztP3GJyeiSg5x8NqYJFqRmg==",
      "path": "system.reactive/6.0.1",
      "hashPath": "system.reactive.6.0.1.nupkg.sha512"
    },
    "System.Text.Encodings.Web/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HJPmqP2FsE+WVUUlTsZ4IFRSyzw40yz0ubiTnsaqm+Xo5fFZhVRvx6Zn8tLXj92/6pbre6OA4QL2A2vnCSKxJA==",
      "path": "system.text.encodings.web/9.0.5",
      "hashPath": "system.text.encodings.web.9.0.5.nupkg.sha512"
    },
    "System.Text.Json/9.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rnP61ZfloTgPQPe7ecr36loNiGX3g1PocxlKHdY/FUpDSsExKkTxpMAlB4X35wNEPr1X7mkYZuQvW3Lhxmu7KA==",
      "path": "system.text.json/9.0.5",
      "hashPath": "system.text.json.9.0.5.nupkg.sha512"
    },
    "Tmds.DBus.Protocol/0.21.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ScSMrUrrw8px4kK1Glh0fZv/HQUlg1078bNXNPfRPKQ3WbRzV9HpsydYEOgSoMK5LWICMf2bMwIFH0pGjxjcMA==",
      "path": "tmds.dbus.protocol/0.21.2",
      "hashPath": "tmds.dbus.protocol.0.21.2.nupkg.sha512"
    },
    "Avalonia.Accelerate.Icons/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Cyberpunk\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        RecognizesAccessKey="True" />
                </Border>
            </ControlTemplate>
        </Setter>
        <Style Selector="^:pointerover > Border#border">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>

        <!--  Style for :pressed  -->
        <Style Selector="^:pressed > Border#border">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Style for :disabled  -->
        <Style Selector="^:disabled > Border#border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Cyberpunk\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Cyberpunk\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="{DynamicResource DefaultFontWeight}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Margin="2"
                        Padding="{TemplateBinding Padding}"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden">
                        <TextPresenter x:Name="PART_TextPresenter" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Margin="50" Spacing="20">
            <TextBox Width="150" />
            <TextBox Width="150" Watermark="watermark text" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Dark\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Dark\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Forest Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Forest Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\High Contrast\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\High Contrast\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Light\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Light\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Material Design 3\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Material Design 3\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernExpanderTheme" TargetType="Expander">
        <Setter Property="Padding" Value="6" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTabControlTheme" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\ModernIce\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernExpanderTheme" TargetType="Expander">
        <Setter Property="Padding" Value="6" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTabControlTheme" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Ocean Blue\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Purple Haze\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Purple Haze\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="0" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroExpanderTheme" TargetType="Expander">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTabControlTheme" TargetType="TabControl">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\RetroTerminal\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Windows 11 Modern\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 0 #10000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 0 #15000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #20000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Accent Button Variant  -->
        <Style Selector="^.accent /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.accent /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.accent:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#106EBE" />
            <Setter Property="BorderBrush" Value="#106EBE" />
        </Style>
        <Style Selector="^.accent:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#005A9E" />
            <Setter Property="BorderBrush" Value="#005A9E" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Windows 11 Modern\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />

        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BoxShadow="0 1 3 0 #08000000"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />

                                <DockPanel Grid.Column="1" Margin="{TemplateBinding Padding}">
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Opacity="0.7"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                    </ScrollViewer>
                                </DockPanel>

                                <ContentPresenter
                                    Grid.Column="2"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 0 #10000000" />
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 0 0 1 #4D0078D4" />
        </Style>

        <!--  Error State  -->
        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ TextBlock#PART_Watermark">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Zen Garden\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="16,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #15000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 4 12 0 #20000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 1 4 0 #25000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.5" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Primary Button Variant  -->
        <Style Selector="^.primary /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.primary /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
        </Style>
        <Style Selector="^.primary:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4A6A4A" />
            <Setter Property="BorderBrush" Value="#4A6A4A" />
        </Style>
        <Style Selector="^.primary:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#3F5A3F" />
            <Setter Property="BorderBrush" Value="#3F5A3F" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\Skins\Zen Garden\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="#4D5D7C5B" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            BoxShadow="inset 0 1 3 0 #10000000" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                
                                <DockPanel
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}">
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                
                                                Opacity="0.8"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text, Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                    </ScrollViewer>
                                </DockPanel>
                                
                                <ContentPresenter
                                    Grid.Column="2"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!-- Hover State -->
        <Style Selector="^:pointerover /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 2 #2D5D7C5B" />
        </Style>

        <!-- Focused State -->
        <Style Selector="^:focus /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 3 #4D5D7C5B" />
        </Style>

        <!-- Error State -->
        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 2 #4DB85450" />
        </Style>

        <!-- Disabled State -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ TextBlock#PART_Watermark">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.Accelerate\Avalonia.Accelerate.Appearance\bin\Debug\net8.0\Skins\Cyberpunk\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="{DynamicResource DefaultFontWeight}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Margin="2"
                        Padding="{TemplateBinding Padding}"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden">
                        <TextPresenter x:Name="PART_TextPresenter" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Margin="50" Spacing="20">
            <TextBox Width="150" />
            <TextBox Width="150" Watermark="watermark text" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
