
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Avalonia.UIStudio.Appearance.csproj
================================================================================

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Title>Avalonia.UIStudio.Appearance</Title>
    <Authors>Jon M. Sales</Authors>
    <Description>A skin manager library with import/export service and ADA skin validation. 20 built-in skins.</Description>
    <PackageIcon>docs\logo.png</PackageIcon>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <RepositoryUrl>https://github.com/JonMichaelSales/Avalonia.Accelerate/tree/main/Avalonia.Accelerate.Appearance</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <Version>1.0.1</Version>
    <ApplicationIcon>a_blue.ico</ApplicationIcon>
  </PropertyGroup>

  <ItemGroup>
    <AvaloniaXaml Remove="Skins\Arctic White\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Arctic White\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Autumn Leaves\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Autumn Leaves\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Coffee Brown\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Coffee Brown\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Coral Reef\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Coral Reef\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Cyberpunk\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Cyberpunk\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Cyberpunk\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Dark\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Dark\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Electric Blue\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Electric Blue\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Forest Green\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Forest Green\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\High Contrast\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\High Contrast\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Lavender Dreams\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Lavender Dreams\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Light\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Light\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Material Design 3\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Material Design 3\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Midnight Purple\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Midnight Purple\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\ModernIce\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Neon Green\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Neon Green\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Ocean Blue\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Purple Haze\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Purple Haze\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\CheckBox.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\ComboBox.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Expander.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\Slider.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TabControl.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\RetroTerminal\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Rose Gold\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Rose Gold\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Slate Grey\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Slate Grey\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Steel Blue\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Steel Blue\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\Sunset Orange\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Sunset Orange\ControlThemes\TextBlock.axaml" />
    <AvaloniaXaml Remove="Skins\ValidationDecorator.axaml" />
    <AvaloniaXaml Remove="Skins\Windows 11 Modern\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Windows 11 Modern\ControlThemes\TextBox.axaml" />
    <AvaloniaXaml Remove="Skins\Zen Garden\ControlThemes\Button.axaml" />
    <AvaloniaXaml Remove="Skins\Zen Garden\ControlThemes\TextBox.axaml" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="Skins\Dark\ControlThemes\Assets\jackrabbit.png" />
    <None Update="jonBuiltTransparentBack.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Update="docs\logo.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Skins\Arctic White\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Arctic White\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Arctic White\skin.json" />
    <AvaloniaResource Include="Skins\Autumn Leaves\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Autumn Leaves\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Autumn Leaves\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Coffee Brown\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Coffee Brown\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Coffee Brown\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Coral Reef\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Coral Reef\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Coral Reef\skin.json" />
    <AvaloniaResource Include="Skins\Cyberpunk\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Cyberpunk\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Cyberpunk\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Cyberpunk\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\Assets\jackrabbit.png">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Dark\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Electric Blue\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Electric Blue\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Electric Blue\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Forest Green\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\High Contrast\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Lavender Dreams\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Lavender Dreams\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Lavender Dreams\skin.json" />
    <AvaloniaResource Include="Skins\Light\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Light\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Light\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Material Design 3\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Midnight Purple\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Midnight Purple\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Midnight Purple\skin.json" />
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ModernIce\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Neon Green\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Neon Green\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Neon Green\skin.json" />
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Ocean Blue\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Purple Haze\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\RetroTerminal\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Rose Gold\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Rose Gold\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Rose Gold\skin.json" />
    <AvaloniaResource Include="Skins\Slate Grey\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Slate Grey\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Slate Grey\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Steel Blue\ControlThemes\Button.axaml" />
    <AvaloniaResource Include="Skins\Steel Blue\ControlThemes\TextBlock.axaml" />
    <AvaloniaResource Include="Skins\Steel Blue\skin.json" />
    <AvaloniaResource Include="Skins\Sunset Orange\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Sunset Orange\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Sunset Orange\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\ValidationDecorator.axaml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Windows 11 Modern\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Skins\Zen Garden\skin.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
  </ItemGroup>

  <ItemGroup>
    <Content Include="a_blue.ico" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.1" />
    <PackageReference Include="Avalonia.Controls.ColorPicker" Version="11.3.1" />
    <PackageReference Include="Avalonia.Controls.DataGrid" Version="11.3.1" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.1" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.1" />
    <PackageReference Include="Avalonia.ReactiveUI" Version="11.3.1" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.1" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.5" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.5" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="9.0.5" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Avalonia.UIStudio.Icons\Avalonia.UIStudio.Icons.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Controls\QuickSkinSwitcher.axaml.cs">
      <DependentUpon>QuickSkinSwitcher.axaml</DependentUpon>
    </Compile>
    <Compile Update="Views\SkinSettingsDialog.axaml.cs">
      <DependentUpon>SkinSettingsDialog.axaml</DependentUpon>
    </Compile>
  </ItemGroup>

</Project>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\ColorEditorControl.axaml
================================================================================

<UserControl
    x:Class="Avalonia.UIStudio.Appearance.Controls.ColorEditorControl"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <converters:ObjectToColorConverter x:Key="ObjectToColorConverter" />
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <UserControl.Styles>
        <SimpleTheme />
        <StyleInclude Source="avares://Avalonia.Controls.ColorPicker/Themes/Fluent/Fluent.xaml" />

        <Style Selector="TextBlock.Label">
            <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
        </Style>
        <Style Selector="Rectangle.ColorPreview">
            <Setter Property="Width" Value="64" />
            <Setter Property="Height" Value="32" />
        </Style>
    </UserControl.Styles>
    <controls:ValidationDecorator PropertyName="{Binding PropertyName}" ValidatedProperty="{Binding}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="150" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Column="0"
                VerticalAlignment="Center"
                Classes="Label"
                Text="{Binding Label, RelativeSource={RelativeSource AncestorType=controls:ColorEditorControl}}" />

            <TextBlock
                Grid.Column="1"
                VerticalAlignment="Center"
                IsVisible="{Binding Message, Converter={x:Static ObjectConverters.IsNotNull}}"
                Text="{Binding Message, FallbackValue=OK}"
                Theme="{StaticResource CaptionTextBlockTheme}" />

            <!--  Current Value  -->
            <Rectangle Grid.Column="2" Classes="ColorPreview">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding Value, RelativeSource={RelativeSource AncestorType=controls:ColorEditorControl}}" />
                </Rectangle.Fill>
            </Rectangle>

            <!--  Color Picker  -->
            <ColorPicker
                Grid.Column="2"
                IsVisible="{Binding IsEditMode, RelativeSource={RelativeSource AncestorType=controls:ColorEditorControl}}"
                Color="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=controls:ColorEditorControl}}" />

            <!--  Suggested Value  -->
            <Border
                Grid.Column="3"
                BorderBrush="Green"
                BorderThickness="1">
                <Rectangle Classes="ColorPreview">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding SuggestedValue, Converter={StaticResource ObjectToColorConverter}}" />
                    </Rectangle.Fill>
                </Rectangle>
            </Border>

        </Grid>
    </controls:ValidationDecorator>
</UserControl>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\ColorEditorControl.axaml.cs
================================================================================

using Avalonia.Markup.Xaml;
using Avalonia.Media;

namespace Avalonia.UIStudio.Appearance.Controls
{
    public partial class ColorEditorControl : ValidatableEditorControlBase<ColorEditorControl>
    {
        public static readonly StyledProperty<Color> ValueProperty =
            AvaloniaProperty.Register<ColorEditorControl, Color>(nameof(Value));

        public Color Value
        {
            get => GetValue(ValueProperty);
            set => SetValue(ValueProperty, value);
        }

        public ColorEditorControl()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\FontFamilyEditorControl.axaml
================================================================================

<UserControl
    x:Class="Avalonia.UIStudio.Appearance.Controls.FontFamilyEditorControl"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:Avalonia.UIStudio.Appearance.Model"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <converters:BoolToEditModeContentConverter x:Key="BoolToEditModeContentConverter" />

            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml" />
                <!--<ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ValidationDecorator.axaml" />-->
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <UserControl.Styles>
        <SimpleTheme />

        <Style Selector="TextBlock.Label">
            <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
        </Style>
    </UserControl.Styles>

    <controls:ValidationDecorator PropertyName="{Binding PropertyName}" ValidatedProperty="{Binding}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="150" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                VerticalAlignment="Center"
                Classes="Label"
                Text="{Binding Label, RelativeSource={RelativeSource AncestorType=controls:FontFamilyEditorControl}}" />

            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                VerticalAlignment="Center"
                IsVisible="{Binding Message, Converter={x:Static ObjectConverters.IsNotNull}}"
                Text="{Binding Message, FallbackValue=OK}"
                Theme="{StaticResource CaptionTextBlockTheme}" />

            <ComboBox
                Grid.Row="0"
                Grid.Column="2"
                MinWidth="200"
                IsEnabled="{Binding !IsReadOnly, RelativeSource={RelativeSource AncestorType=controls:FontFamilyEditorControl}}"
                ItemsSource="{Binding AvailableFontFamilies, RelativeSource={RelativeSource AncestorType=controls:FontFamilyEditorControl}}"
                SelectedItem="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=controls:FontFamilyEditorControl}}" />

            <!--  SuggestedValue text (if present)  -->
            <TextBlock
                Grid.Row="1"
                Grid.Column="2"
                Margin="0,2,0,0"
                FontSize="11"
                Foreground="Orange"
                IsVisible="{Binding SuggestedValue, Converter={x:Static ObjectConverters.IsNotNull}}"
                Text="{Binding SuggestedValue}" />
        </Grid>
    </controls:ValidationDecorator>
</UserControl>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\FontFamilyEditorControl.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System.Collections.ObjectModel;
using System.Reactive.Linq;
using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Controls
{
    public partial class FontFamilyEditorControl : ValidatableEditorControlBase<FontFamilyEditorControl>
    {
       
        public static readonly StyledProperty<string> ValueProperty =
            AvaloniaProperty.Register<FontFamilyEditorControl, string>(nameof(Value));

        public string Value
        {
            get => GetValue(ValueProperty);
            set => SetValue(ValueProperty, value);
        }

        public static readonly StyledProperty<ObservableCollection<string>> AvailableFontFamiliesProperty =
            AvaloniaProperty.Register<FontFamilyEditorControl, ObservableCollection<string>>(nameof(AvailableFontFamilies));

        public ObservableCollection<string> AvailableFontFamilies
        {
            get => GetValue(AvailableFontFamiliesProperty);
            set => SetValue(AvailableFontFamiliesProperty, value);
        }

        public static readonly StyledProperty<object?> SuggestedValueProperty =
            AvaloniaProperty.Register<FontFamilyEditorControl, object?>(nameof(SuggestedValue));

        public object? SuggestedValue
        {
            get => GetValue(SuggestedValueProperty);
            set => SetValue(SuggestedValueProperty, value);
        }

        public FontFamilyEditorControl()
        {
            InitializeComponent();

            // Default font family list � you can customize or load from FontManager
            var fonts = FontManager.Current.SystemFonts.ToList();
            AvailableFontFamilies = new ObservableCollection<string>();
            foreach (var font in fonts)
            {
                AvailableFontFamilies.Add(font.Name);
            }
            

        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\NumericEditorControl.axaml
================================================================================

<UserControl
    x:Class="Avalonia.UIStudio.Appearance.Controls.NumericEditorControl"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:Avalonia.UIStudio.Appearance.Model"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml" />
                <!--<ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ValidationDecorator.axaml" />-->
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.Styles>
        <SimpleTheme />

        <Style Selector="TextBlock.Label">
            <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
        </Style>
    </UserControl.Styles>

    <controls:ValidationDecorator PropertyName="{Binding PropertyName}" ValidatedProperty="{Binding}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="150" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Column="0"
                VerticalAlignment="Center"
                Classes="Label"
                Text="{Binding Label, RelativeSource={RelativeSource AncestorType=controls:NumericEditorControl}}" />

            <TextBlock
                Grid.Column="1"
                VerticalAlignment="Center"
                IsVisible="{Binding Message, Converter={x:Static ObjectConverters.IsNotNull}, FallbackValue=OK}"
                Text="{Binding Message, FallbackValue=OK}"
                Theme="{StaticResource CaptionTextBlockTheme}" />

            <NumericUpDown
                Grid.Column="2"
                FontSize="{StaticResource FontSizeSmall}"
                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType=controls:NumericEditorControl}}"
                Maximum="{Binding Maximum, RelativeSource={RelativeSource AncestorType=controls:NumericEditorControl}}"
                Minimum="{Binding Minimum, RelativeSource={RelativeSource AncestorType=controls:NumericEditorControl}}"
                Value="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=controls:NumericEditorControl}}" />

            <!--  Suggested Value text (if present)  -->
            <TextBlock
                Grid.Column="3"
                Margin="10,0"
                VerticalAlignment="Center"
                FontSize="11"
                Foreground="Orange"
                IsVisible="{Binding SuggestedValue, Converter={x:Static ObjectConverters.IsNotNull}}"
                Text="{Binding SuggestedValue}" />
        </Grid>
    </controls:ValidationDecorator>
</UserControl>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\NumericEditorControl.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Controls
{
    public partial class NumericEditorControl : ValidatableEditorControlBase<NumericEditorControl>
    {
        public static readonly StyledProperty<double> ValueProperty =
            AvaloniaProperty.Register<NumericEditorControl, double>(nameof(Value));

        public double Value
        {
            get => GetValue(ValueProperty);
            set => SetValue(ValueProperty, value);
        }

        public static readonly StyledProperty<double> MaximumProperty =
            AvaloniaProperty.Register<NumericEditorControl, double>(nameof(Maximum), 100.0);

        public double Maximum
        {
            get => GetValue(MaximumProperty);
            set => SetValue(MaximumProperty, value);
        }

        public static readonly StyledProperty<double> MinimumProperty =
            AvaloniaProperty.Register<NumericEditorControl, double>(nameof(Minimum), 0.0);

        public double Minimum
        {
            get => GetValue(MinimumProperty);
            set => SetValue(MinimumProperty, value);
        }

        public static readonly StyledProperty<object?> SuggestedValueProperty =
            AvaloniaProperty.Register<NumericEditorControl, object?>(nameof(SuggestedValue));

        public object? SuggestedValue
        {
            get => GetValue(SuggestedValueProperty);
            set => SetValue(SuggestedValueProperty, value);
        }

        public NumericEditorControl()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\QuickSkinSwitcher.axaml
================================================================================

<UserControl
    x:Class="Avalonia.UIStudio.Appearance.Controls.QuickSkinSwitcher"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons="clr-namespace:Avalonia.UIStudio.Icons;assembly=Avalonia.UIStudio.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:Avalonia.UIStudio.Appearance.ViewModels"
    d:DesignHeight="40"
    d:DesignWidth="200"
    x:DataType="vm:QuickSkinSwitcherViewModel"
    mc:Ignorable="d">

    <Border
        Padding="8,4"
        Background="{DynamicResource BackgroundLightBrush}"
        BorderBrush="{DynamicResource BorderBrush}"
        BorderThickness="1"
        CornerRadius="4">
        <StackPanel Orientation="Horizontal" Spacing="8">
            <Path
                Width="16"
                Height="16"
                VerticalAlignment="Center"
                Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                Fill="{DynamicResource AccentBlueBrush}"
                Stretch="Uniform" />

            <ComboBox
                MinWidth="120"
                Background="{DynamicResource BackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                Foreground="{DynamicResource TextPrimaryBrush}"
                ItemsSource="{Binding AvailableSkins}"
                SelectedItem="{Binding SelectedSkin}"
                ToolTip.Tip="Quick theme switcher">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Ellipse
                                Width="12"
                                Height="12"
                                VerticalAlignment="Center"
                                Fill="{Binding PreviewColor}" />
                            <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                        </StackPanel>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
    </Border>
</UserControl>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\QuickSkinSwitcher.axaml.cs
================================================================================

using Avalonia.Controls;
using Avalonia.UIStudio.Appearance.Extensions;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.ViewModels;
using Microsoft.Extensions.DependencyInjection;

namespace Avalonia.UIStudio.Appearance.Controls;

/// <summary>
/// Represents a user control that provides a quick skin switching functionality
/// for Avalonia applications. This control is designed to integrate seamlessly
/// with the Avalonia UI framework and is backed by the <see cref="QuickSkinSwitcherViewModel"/>.
/// </summary>
public partial class QuickSkinSwitcher : UserControl
{
    /// <summary>
    /// Initializes a new instance of the <see cref="QuickSkinSwitcher"/> class.
    /// This constructor sets up the control by initializing its components and
    /// assigning a new instance of <see cref="QuickSkinSwitcherViewModel"/> as its data context.
    /// </summary>
    ///
    public QuickSkinSwitcher()
    {
        InitializeComponent();
        DataContext = AppBuilderExtensions.GetRequiredService<IQuickSkinSwitcherViewModel>();
    }
    
    public QuickSkinSwitcher(ISkinManager skinManager)
    {
        InitializeComponent();
        DataContext = new QuickSkinSwitcherViewModel(skinManager);
    }

    public QuickSkinSwitcher(IQuickSkinSwitcherViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }

}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\TextEditorControl.axaml
================================================================================

<UserControl
    x:Class="Avalonia.UIStudio.Appearance.Controls.TextEditorControl"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml" />
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ValidationDecorator.axaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.Styles>
        <SimpleTheme />

        <Style Selector="TextBlock.Label">
            <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
        </Style>
    </UserControl.Styles>

    <controls:ValidationDecorator PropertyName="{Binding PropertyName}" ValidatedProperty="{Binding}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="150" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.Styles>
                <Style Selector="TextBlock.Label">
                    <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
                </Style>
            </Grid.Styles>

            <TextBlock
                Grid.Column="0"
                VerticalAlignment="Center"
                Classes="Label"
                Text="{Binding Label, RelativeSource={RelativeSource AncestorType=controls:TextEditorControl}, FallbackValue=Label}" />

            <TextBlock
                Grid.Column="1"
                VerticalAlignment="Center"
                IsVisible="{Binding Message, Converter={x:Static ObjectConverters.IsNotNull}}"
                Text="{Binding Message, FallbackValue=OK}"
                Theme="{StaticResource CaptionTextBlockTheme}" />

            <TextBox
                Grid.Column="2"
                MinWidth="200"
                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType=controls:TextEditorControl}}"
                Text="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=controls:TextEditorControl}}" />
        </Grid>
    </controls:ValidationDecorator>
</UserControl>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\TextEditorControl.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Controls
{
    public partial class TextEditorControl : ValidatableEditorControlBase<TextEditorControl>
    {
        public static readonly StyledProperty<string> ValueProperty =
            AvaloniaProperty.Register<TextEditorControl, string>(nameof(Value));

        public string Value
        {
            get => GetValue(ValueProperty);
            set => SetValue(ValueProperty, value);
        }
        
        public TextEditorControl()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\ValidatableEditorControlBase.cs
================================================================================

// Controls/ValidatableEditorControlBase.cs
using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Controls;

public abstract class ValidatableEditorControlBase<TControl> : UserControl where TControl : UserControl
{
    public static readonly StyledProperty<ValidatedProperty?> ValidatedPropertyProperty =
        AvaloniaProperty.Register<TControl, ValidatedProperty?>(nameof(ValidatedProperty));

    public ValidatedProperty? ValidatedProperty
    {
        get => GetValue(ValidatedPropertyProperty);
        set => SetValue(ValidatedPropertyProperty, value);
    }

    public static readonly StyledProperty<string?> PropertyNameProperty =
        AvaloniaProperty.Register<TControl, string?>(nameof(PropertyName));

    public string? PropertyName
    {
        get => GetValue(PropertyNameProperty);
        set => SetValue(PropertyNameProperty, value);
    }
    
    public static readonly StyledProperty<string> LabelProperty =
        AvaloniaProperty.Register<TControl, string>(nameof(Label));

    public string Label
    {
        get => GetValue(LabelProperty);
        set => SetValue(LabelProperty, value);
    }

    public static readonly StyledProperty<bool> IsEditModeProperty =
        AvaloniaProperty.Register<TControl, bool>(nameof(IsEditMode));

    public bool IsEditMode
    {
        get => GetValue(IsEditModeProperty);
        set => SetValue(IsEditModeProperty, value);
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Controls\ValidationDecorator.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Controls;

public class ValidationDecorator : Decorator
{
    public ValidationDecorator()
    {
        DataContextChanged += ValidationDecorator_DataContextChanged;
    }

    private void ValidationDecorator_DataContextChanged(object? sender, EventArgs e)
    {
        if (DataContext is Dictionary<string, ValidatedProperty> propertys && PropertyName != null && propertys.ContainsKey(PropertyName))
        {
            ValidatedProperty = propertys[PropertyName];
            this.DataContext = ValidatedProperty; // Key fix!
        }
        else
        {
            if (DataContext is ValidatedProperty validatedProperty)
            {
                ValidatedProperty = validatedProperty;
            }
        }
    }

    public static readonly StyledProperty<ValidatedProperty?> ValidatedPropertyProperty =
        AvaloniaProperty.Register<ValidationDecorator, ValidatedProperty?>(
            nameof(ValidatedProperty));

    public ValidatedProperty? ValidatedProperty
    {
        get => GetValue(ValidatedPropertyProperty);
        set => SetValue(ValidatedPropertyProperty, value);
    }

    public static readonly StyledProperty<string?> PropertyNameProperty =
        AvaloniaProperty.Register<ValidationDecorator, string?>(
            nameof(PropertyName));

    public string? PropertyName
    {
        get => GetValue(PropertyNameProperty);
        set => SetValue(PropertyNameProperty, value);
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Converters\BoolToBorderBrushConverter.cs
================================================================================

using Avalonia.Data.Converters;
using Avalonia.Media;
using System;
using System.Globalization;

namespace Avalonia.UIStudio.Appearance.Converters
{
    public class BoolToBorderBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isError)
                return isError ? Brushes.Red : Brushes.Pink;
            return Brushes.Gray;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Converters\BoolToEditModeContentConverter.cs
================================================================================

using System;
using System.Globalization;
using Avalonia.Data.Converters;

namespace Avalonia.UIStudio.Appearance.Converters
{
    public class BoolToEditModeContentConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is bool isEdit && isEdit) ? "Editing Skin" : "View Skin Info";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Converters\ObjectToColorConverter.cs
================================================================================

using Avalonia.Data.Converters;
using Avalonia.Media;
using System;
using System.Globalization;

namespace Avalonia.UIStudio.Appearance.Converters
{
    public class ObjectToColorConverter : IValueConverter
    {
        public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            if (value is Color c)
                return c;

            if (value is string s && Color.TryParse(s, out var parsed))
                return parsed;

            return Colors.Transparent; // fallback if value is invalid
        }

        public object ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            return value;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Extensions\AppBuilderExtensions.cs
================================================================================

using Microsoft.Extensions.DependencyInjection;
using System;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services;
using Avalonia.UIStudio.Appearance.ViewModels;
using Avalonia.UIStudio.Appearance.Views;

namespace Avalonia.UIStudio.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for configuring and integrating the AvaloniaSkinManager 
    /// into an Avalonia application using the <see cref="AppBuilder"/>.
    /// </summary>
    /// <remarks>
    /// This class contains methods to enable the AvaloniaSkinManager with default or custom configurations.
    /// It simplifies the setup process by allowing developers to chain skin manager configuration
    /// into the application initialization pipeline.
    /// </remarks>
    public static class AppBuilderExtensions
    {
        /// <summary>
        /// Static service provider holder for accessing services throughout the application
        /// </summary>
        private static IServiceProvider? _serviceProvider;

        /// <summary>
        /// Action to be executed when application is ready
        /// </summary>
        private static Action? _initializationAction;

        /// <summary>
        /// Gets the current service provider
        /// </summary>
        public static IServiceProvider ServiceProvider
        {
            get => _serviceProvider ?? throw new InvalidOperationException("Service provider not initialized. Ensure UseSkinManager() was called during application setup.");
            private set => _serviceProvider = value;
        }

        /// <summary>
        /// Adds AvaloniaSkinManager to the application with dependency injection support
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <param name="configureServices">Optional service configuration action</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseSkinManager(this AppBuilder builder, Action<IServiceCollection>? configureServices = null, Action<IServiceProvider>? onBuilt = null)
        {
            return builder.AfterSetup(appBuilder =>
            {
                // Set up dependency injection
                var services = new ServiceCollection();

                // Add skin manager services
                services.AddSkinManagerServices();
                services.AddSingleton<IApplication>(_ => (IApplication)(Avalonia.Application.Current ?? throw new InvalidOperationException("Application.Current is not available.")));
                services.AddTransient<IStylesCollection, AvaloniaStylesWrapper>();
                services.AddSingleton<ISkinLoaderService, SkinLoaderService>();
                services.AddTransient<ISkinImportExportService, SkinImportExportService>();
                services.AddSingleton<IQuickSkinSwitcherViewModel,QuickSkinSwitcherViewModel>();
                services.AddTransient<SkinSettingsViewModel>();
                services.AddTransient<SkinSettingsDialog>();
                services.AddSingleton<ISkinManager, SkinManager>();
                // Allow additional service configuration
                configureServices?.Invoke(services);

                // Build and store the service provider
                ServiceProvider = services.BuildServiceProvider();
                onBuilt?.Invoke(ServiceProvider); // Notify caller — they can assign App.Services here if they want


                // Store initialization action to be called when application is ready
                _initializationAction = () =>
                {
                    try
                    {
                        var skinManager = (SkinManager)ServiceProvider.GetRequiredService<ISkinManager>();
                        SkinManager.Instance = skinManager;
                        skinManager.LoadSavedSkin();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error initializing skin manager: {ex.Message}");
                    }
                };
            });
        }

        /// <summary>
        /// Adds AvaloniaSkinManager with custom configuration (legacy method for backward compatibility)
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <param name="configure">Configuration action</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseSkinManager(this AppBuilder builder, System.Action<SkinManager> configure)
        {
            return builder.AfterSetup(appBuilder =>
            {
                // Set up dependency injection
                var services = new ServiceCollection();
                services.AddSkinManagerServices();
                ServiceProvider = services.BuildServiceProvider();
                
                // Store initialization action to be called when application is ready
                _initializationAction = () =>
                {
                    try
                    {
                        var skinManager = ServiceProvider.GetRequiredService<ISkinManager>() as SkinManager;
                        if (skinManager != null)
                        {
                            configure(skinManager);
                            skinManager.LoadSavedSkin();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error configuring skin manager: {ex.Message}");
                    }
                };
            });
        }

        /// <summary>
        /// Internal method to be called by the Application when it's ready to initialize the skin manager
        /// This should be called from Application.OnFrameworkInitializationCompleted()
        /// </summary>
        public static void InitializeSkinManager()
        {
            _initializationAction?.Invoke();
            _initializationAction = null; // Clear after execution
        }

        /// <summary>
        /// Gets a service from the application's service provider
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <returns>The service instance</returns>
        /// <exception cref="InvalidOperationException">Thrown when the service provider is not available</exception>
        public static T GetRequiredService<T>() where T : notnull
        {
            return ServiceProvider.GetRequiredService<T>();
        }

        /// <summary>
        /// Gets a service from the application's service provider
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <returns>The service instance, or null if not found</returns>
        public static T? GetService<T>() where T : class
        {
            try
            {
                return ServiceProvider.GetService<T>();
            }
            catch (InvalidOperationException)
            {
                return null;
            }
        }

        /// <summary>
        /// Extension method for Application to get services (for compatibility)
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <param name="app">The application instance</param>
        /// <returns>The service instance</returns>
        public static T GetRequiredService<T>(this Application app) where T : notnull
        {
            return GetRequiredService<T>();
        }

        /// <summary>
        /// Extension method for Application to get services (for compatibility)
        /// </summary>
        /// <typeparam name="T">The service type</typeparam>
        /// <param name="app">The application instance</param>
        /// <returns>The service instance, or null if not found</returns>
        public static T? GetService<T>(this Application app) where T : class
        {
            return GetService<T>();
        }

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Extensions\ApplicationExtensions.cs
================================================================================

using Avalonia.Markup.Xaml.Styling;

namespace Avalonia.UIStudio.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for the <see cref="Avalonia.Application"/> class to integrate AvaloniaSkinManager functionality.
    /// </summary>
    public static class ApplicationExtensions
    {
        /// <summary>
        /// Include AvaloniaSkinManager skins in your application
        /// </summary>
        /// <param name="app">The Application instance</param>
        /// <returns>The Application instance for method chaining</returns>
        public static Application IncludeSkinManagerStyles(this Application app)
        {
            app.Resources.MergedDictionaries.Add(new ResourceInclude(new Uri("avares://Avalonia.UIStudio.Appearance/"))
            {
                Source = new Uri("avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml")
            });

            return app;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Extensions\ServiceCollectionExtension.cs
================================================================================

using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Platform;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services;
using Avalonia.UIStudio.Appearance.Services.ValidationRules;
using Avalonia.UIStudio.Appearance.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Avalonia.UIStudio.Appearance.Extensions
{
    /// <summary>
    /// Provides extension methods for registering skin manager services in an Avalonia application.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds skin manager and related services to the service collection.
        /// </summary>
        /// <param name="services">The service collection to add services to.</param>
        /// <returns>The updated service collection.</returns>
        public static IServiceCollection AddSkinManagerServices(this IServiceCollection services)
        {
            // Logging (you can customize levels elsewhere if needed)
            services.AddLogging();


            // Application abstraction
            services.AddSingleton<IApplication, ApplicationWrapper>();
            services.AddSingleton<ISkinImportExportService,SkinImportExportService>();
            // Core services
            services.AddSingleton<ISkinLoaderService, SkinLoaderService>();
            services.AddSingleton<ISkinManager, SkinManager>();

            // Skin inheritance manager
            services.AddSingleton<SkinInheritanceManager>();

            // Validation rules
            services.AddSingleton<ISkinValidationRule, BorderValidationRule>();
            services.AddSingleton<ISkinValidationRule, ColorContrastValidationRule>();
            services.AddSingleton<ISkinValidationRule, NameValidationRule>();
            services.AddSingleton<ISkinValidationRule, AccessibilityValidationRule>();

            // ViewModels
            services.AddTransient<SkinSettingsViewModel>();
            services.AddTransient<QuickSkinSwitcherViewModel>();

            return services;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\IApplication.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;

namespace Avalonia.UIStudio.Appearance.Interfaces
{
    public interface IApplication
    {
        IResourceDictionary Resources { get; }
        IApplicationLifetime? ApplicationLifetime { get; }
        IStylesCollection AppStyles { get; }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\IQuickSkinSwitcherViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using System.ComponentModel;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services;
using Avalonia.UIStudio.Appearance.ViewModels;
using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.Interfaces;

public interface IQuickSkinSwitcherViewModel
{
    /// <summary>
    /// Gets the collection of available skins that can be selected and applied
    /// within the application.
    /// </summary>
    /// <remarks>
    /// This property is populated by the <see cref="LoadAvailableskins"/> method,
    /// which retrieves the skins from the <see cref="SkinManager"/>. The collection
    /// is updated dynamically to reflect the available skins.
    /// </remarks>
    ObservableCollection<SkinSummaryInfo> AvailableSkins { get; }

    /// <summary>
    /// Gets or sets the currently selected skin.
    /// </summary>
    /// <remarks>
    /// When a new skin is selected, the corresponding skin is applied automatically.
    /// The selected skin is synchronized with the <see cref="AvailableSkins"/> collection.
    /// </remarks>
    SkinSummaryInfo? SelectedSkin { get; set; }

    IObservable<IReactivePropertyChangedEventArgs<IReactiveObject>> Changing { get; }
    IObservable<IReactivePropertyChangedEventArgs<IReactiveObject>> Changed { get; }
    IObservable<Exception> ThrownExceptions { get; }

    /// <summary>
    /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
    /// </summary>
    /// <remarks>
    /// This method calls the <see cref="Dispose(bool)"/> method with a value of <c>true</c> 
    /// to release managed resources and suppresses finalization of the object.
    /// </remarks>
    void Dispose();

    IDisposable SuppressChangeNotifications();
    bool AreChangeNotificationsEnabled();
    IDisposable DelayChangeNotifications();
    event PropertyChangingEventHandler? PropertyChanging;
    event PropertyChangedEventHandler? PropertyChanged;
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\ISkinImportExportService.cs
================================================================================

using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Interfaces
{
    public interface ISkinImportExportService
    {
        Task<bool> ExportSkinAsync(Skin skin, string filePath, string? description = null, string? author = null);
        Task<bool> ExportAdvancedSkinAsync(Skin skin, string filePath, string? description = null, string? author = null);
        Task<bool> ExportInheritableSkinAsync(InheritableSkin skin, string filePath, string? description = null, string? author = null);
        Task<SkinImportResult> ImportSkinAsync(string filePath);
        Task<Skin?> ImportAdvancedSkinAsync(string filePath);
        Task<InheritableSkin?> ImportInheritableSkinAsync(string filePath);
        Task<SkinValidationResult> ValidateSkinFileAsync(string filePath);
        Task<bool> ExportSkinPackAsync(Dictionary<string, Skin> skins, string filePath, string packName, string? description = null);
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\ISkinManager.cs
================================================================================

using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Interfaces;

/// <summary>
/// 
/// </summary>
public interface ISkinManager
{
    /// <summary>
    /// 
    /// </summary>
    Skin? CurrentSkin { get; }
    /// <summary>
    /// 
    /// </summary>
    event EventHandler? SkinChanged;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="skin"></param>
    void RegisterSkin(string? name, Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    Skin? GetSkin(string? name);
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    List<string> GetAvailableSkinNames();
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skinName"></param>
    void ApplySkin(string? skinName);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skin"></param>
    void ApplySkin(Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skinName"></param>
    void SaveSelectedSkin(string? skinName);
    /// <summary>
    /// 
    /// </summary>
    void LoadSavedSkin();

    string GetSkinFilePath(Skin skin);

    void ReloadSkins();
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\ISkinValidationRule.cs
================================================================================

using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Interfaces
{
    /// <summary>
    /// 
    /// </summary>
    public interface ISkinValidationRule
    {
        List<SkinValidationMessage> Validate(Skin skin);
    }

}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Interfaces\IStylesCollection.cs
================================================================================

using Avalonia.Styling;

namespace Avalonia.UIStudio.Appearance.Interfaces
{
    /// <summary>
    /// 
    /// </summary>
    public interface IStylesCollection : IEnumerable<IStyle>
    {
        void Add(IStyle style);
        bool Remove(IStyle style);
        void Clear();
        int Count { get; }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\ApplicationWrapper.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.UIStudio.Appearance.Interfaces;

namespace Avalonia.UIStudio.Appearance.Model
{
    public class ApplicationWrapper : IApplication
    {
        private readonly Application _application;
        private readonly IStylesCollection _stylesWrapper;

        public ApplicationWrapper()
        {
            _application = Application.Current ?? throw new InvalidOperationException("Application.Current must not be null.");
            _stylesWrapper = new AvaloniaStylesWrapper(_application.Styles);
        }

        public ApplicationWrapper(Application application)
        {
            _application = application ?? throw new ArgumentNullException(nameof(application));
            // Remove the asterisks - they're syntax errors
            _stylesWrapper = new AvaloniaStylesWrapper(application.Styles);
        }

        public IResourceDictionary Resources => _application.Resources;
        public IApplicationLifetime? ApplicationLifetime => _application.ApplicationLifetime;
        public IStylesCollection AppStyles => _stylesWrapper;
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\AppSettings.cs
================================================================================

using Newtonsoft.Json;

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// Represents the application settings for the Avalonia Skin Manager.
    /// Provides functionality to load, save, and manage skin-related settings.
    /// </summary>
    public class AppSettings
    {
        private const string SettingsFileName = "appsettings.json";
        private static readonly string SettingsFilePath;
        private static AppSettings? _instance;

        /// <summary>
        /// Gets or sets the name of the currently selected skin.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the skin name. The default value is "Dark".
        /// </value>
        /// <remarks>
        /// This property is used to store the name of the skin selected by the user.
        /// It can be updated dynamically and is persisted using the <see cref="AppSettings.Save"/> method.
        /// </remarks>
        public string? Skin { get; set; } = "Dark";

        // Add other settings as needed
        /// <summary>
        /// Gets or sets a value indicating whether the application should use the system's default skin.
        /// </summary>
        /// <value>
        /// <c>true</c> if the application should use the system's skin; otherwise, <c>false</c>.
        /// </value>
        public bool UseSystemskin { get; set; } = false;

        // Update the static constructor in AppSettings.cs
        static AppSettings()
        {
            string appDataFolder;

            try
            {
                // Try to use a more appropriate app data folder
                appDataFolder = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                    "Avalonia.UIStudio.Appearance");
            }
            catch
            {
                // Fallback to current directory if permissions issue
                appDataFolder = Path.Combine(AppContext.BaseDirectory, "Settings");
            }

            if (!Directory.Exists(appDataFolder))
            {
                try
                {
                    Directory.CreateDirectory(appDataFolder);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Warning: Could not create settings directory: {ex.Message}");
                    // Fallback to temp directory
                    appDataFolder = Path.GetTempPath();
                }
            }

            SettingsFilePath = Path.Combine(appDataFolder, SettingsFileName);
        }

        /// <summary>
        /// Gets the singleton instance of the <see cref="AppSettings"/> class.
        /// </summary>
        /// <remarks>
        /// This property ensures that only one instance of <see cref="AppSettings"/> exists throughout the application.
        /// If the instance is not already initialized, it will be loaded using the <c>Load</c> method.
        /// </remarks>
        public static AppSettings Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = Load();
                }
                return _instance;
            }
        }

        private static AppSettings Load()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    string json = File.ReadAllText(SettingsFilePath);
                    var settings = JsonConvert.DeserializeObject<AppSettings>(json);
                    if (settings != null)
                        return settings;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading settings: {ex.Message}");
            }

            // Return default settings if loading fails
            return new AppSettings();
        }

        /// <summary>
        /// Saves the current application settings to a file.
        /// </summary>
        /// <remarks>
        /// This method serializes the current instance of <see cref="AppSettings"/> into a JSON format
        /// and writes it to the file specified by the settings file path. If an error occurs during
        /// the save operation, it is logged to the console.
        /// </remarks>
        /// <exception cref="System.IO.IOException">
        /// Thrown when an I/O error occurs while writing to the file.
        /// </exception>
        /// <exception cref="Newtonsoft.Json.JsonException">
        /// Thrown when an error occurs during JSON serialization.
        /// </exception>
        public void Save()
        {
            try
            {
                string json = JsonConvert.SerializeObject(this, Formatting.Indented);
                File.WriteAllText(SettingsFilePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving settings: {ex.Message}");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\AvaloniaStylesWrapper.cs
================================================================================

using System.Collections;
using Avalonia.Styling;
using Avalonia.UIStudio.Appearance.Interfaces;

namespace Avalonia.UIStudio.Appearance.Model
{
    public class AvaloniaStylesWrapper : IStylesCollection
    {
        private readonly Styles _styles;

        public AvaloniaStylesWrapper(Styles styles)
        {
            _styles = styles ?? throw new ArgumentNullException(nameof(styles));
        }

        public void Add(IStyle style)
        {
            _styles.Add(style);
        }

        public bool Remove(IStyle style)
        {
            return _styles.Remove(style);
        }

        public void Clear()
        {
            _styles.Clear();
        }

        // Fix: Make this a property, not a method, and delegate to the actual Styles collection
        public int Count => _styles.Count;

        public IEnumerator<IStyle> GetEnumerator()
        {
            return _styles.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\InheritableSkin.cs
================================================================================

using Avalonia.Media;
using System.Text.Json;

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// Represents a skin that can inherit from a base skin and override specific properties.
    /// </summary>
    public class InheritableSkin : Skin
    {
        private readonly HashSet<string> _setProperties = new();

        /// <summary>
        /// Gets or sets the name of the base skin this skin inherits from.
        /// </summary>
        public string? BaseSkinName { get; set; }

        /// <summary>
        /// Gets or sets the collection of property overrides for this skin.
        /// </summary>
        public Dictionary<string, object>? PropertyOverrides { get; set; } = new();

        /// <summary>
        /// Initializes a new instance of the InheritableSkin class.
        /// </summary>
        public InheritableSkin()
        {
            // Don't call base constructor to avoid setting default values
            // Initialize collections that are required
            ControlThemeUris = new Dictionary<string, string>();
            StyleUris = new();
            Typography = new TypographyScale();
            PropertyOverrides = new Dictionary<string, object>();
        }

        // Override property setters to track which properties have been explicitly set
        public new Color PrimaryColor
        {
            get => base.PrimaryColor;
            set
            {
                base.PrimaryColor = value;
                _setProperties.Add(nameof(PrimaryColor));
            }
        }

        public new Color SecondaryColor
        {
            get => base.SecondaryColor;
            set
            {
                base.SecondaryColor = value;
                _setProperties.Add(nameof(SecondaryColor));
            }
        }

        public new Color AccentColor
        {
            get => base.AccentColor;
            set
            {
                base.AccentColor = value;
                _setProperties.Add(nameof(AccentColor));
            }
        }

        public new Color PrimaryBackground
        {
            get => base.PrimaryBackground;
            set
            {
                base.PrimaryBackground = value;
                _setProperties.Add(nameof(PrimaryBackground));
            }
        }

        public new Color SecondaryBackground
        {
            get => base.SecondaryBackground;
            set
            {
                base.SecondaryBackground = value;
                _setProperties.Add(nameof(SecondaryBackground));
            }
        }

        public new Color PrimaryTextColor
        {
            get => base.PrimaryTextColor;
            set
            {
                base.PrimaryTextColor = value;
                _setProperties.Add(nameof(PrimaryTextColor));
            }
        }

        public new Color SecondaryTextColor
        {
            get => base.SecondaryTextColor;
            set
            {
                base.SecondaryTextColor = value;
                _setProperties.Add(nameof(SecondaryTextColor));
            }
        }

        public new FontFamily FontFamily
        {
            get => base.FontFamily;
            set
            {
                base.FontFamily = value;
                _setProperties.Add(nameof(FontFamily));
            }
        }

        public new double FontSizeSmall
        {
            get => base.FontSizeSmall;
            set
            {
                base.FontSizeSmall = value;
                _setProperties.Add(nameof(FontSizeSmall));
            }
        }

        public new double FontSizeMedium
        {
            get => base.FontSizeMedium;
            set
            {
                base.FontSizeMedium = value;
                _setProperties.Add(nameof(FontSizeMedium));
            }
        }

        public new double FontSizeLarge
        {
            get => base.FontSizeLarge;
            set
            {
                base.FontSizeLarge = value;
                _setProperties.Add(nameof(FontSizeLarge));
            }
        }

        public new FontWeight FontWeight
        {
            get => base.FontWeight;
            set
            {
                base.FontWeight = value;
                _setProperties.Add(nameof(FontWeight));
            }
        }

        public new Color BorderColor
        {
            get => base.BorderColor;
            set
            {
                base.BorderColor = value;
                _setProperties.Add(nameof(BorderColor));
            }
        }

        public new Thickness BorderThickness
        {
            get => base.BorderThickness;
            set
            {
                base.BorderThickness = value;
                _setProperties.Add(nameof(BorderThickness));
            }
        }

        public new double BorderRadius
        {
            get => base.BorderRadius;
            set
            {
                base.BorderRadius = value;
                _setProperties.Add(nameof(BorderRadius));
            }
        }

        public new Color ErrorColor
        {
            get => base.ErrorColor;
            set
            {
                base.ErrorColor = value;
                _setProperties.Add(nameof(ErrorColor));
            }
        }

        public new Color WarningColor
        {
            get => base.WarningColor;
            set
            {
                base.WarningColor = value;
                _setProperties.Add(nameof(WarningColor));
            }
        }

        public new Color SuccessColor
        {
            get => base.SuccessColor;
            set
            {
                base.SuccessColor = value;
                _setProperties.Add(nameof(SuccessColor));
            }
        }

        public new string? Name
        {
            get => base.Name;
            set
            {
                base.Name = value;
                _setProperties.Add(nameof(Name));
            }
        }

        /// <summary>
        /// Creates a resolved skin by applying inheritance and overrides.
        /// </summary>
        /// <param name="baseSkin">The base skin to inherit from.</param>
        /// <returns>A fully resolved Skin with all properties applied.</returns>
        public Skin CreateResolvedSkin(Skin? baseSkin = null)
        {
            var resolved = new Skin();

            // Start with base skin if provided
            if (baseSkin != null)
            {
                CopyPropertiesFrom(resolved, baseSkin);
            }

            // Apply current skin's explicitly set properties only
            CopySetPropertiesFrom(resolved, this);

            // Apply property overrides
            ApplyOverrides(resolved);

            return resolved;
        }

        private void CopyPropertiesFrom(Skin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }

        private void CopySetPropertiesFrom(Skin target, InheritableSkin source)
        {
            // Only copy properties that have been explicitly set
            if (_setProperties.Contains(nameof(PrimaryColor)))
                target.PrimaryColor = source.PrimaryColor;
            if (_setProperties.Contains(nameof(SecondaryColor)))
                target.SecondaryColor = source.SecondaryColor;
            if (_setProperties.Contains(nameof(AccentColor)))
                target.AccentColor = source.AccentColor;
            if (_setProperties.Contains(nameof(PrimaryBackground)))
                target.PrimaryBackground = source.PrimaryBackground;
            if (_setProperties.Contains(nameof(SecondaryBackground)))
                target.SecondaryBackground = source.SecondaryBackground;
            if (_setProperties.Contains(nameof(PrimaryTextColor)))
                target.PrimaryTextColor = source.PrimaryTextColor;
            if (_setProperties.Contains(nameof(SecondaryTextColor)))
                target.SecondaryTextColor = source.SecondaryTextColor;
            if (_setProperties.Contains(nameof(FontFamily)))
                target.FontFamily = source.FontFamily;
            if (_setProperties.Contains(nameof(FontSizeSmall)))
                target.FontSizeSmall = source.FontSizeSmall;
            if (_setProperties.Contains(nameof(FontSizeMedium)))
                target.FontSizeMedium = source.FontSizeMedium;
            if (_setProperties.Contains(nameof(FontSizeLarge)))
                target.FontSizeLarge = source.FontSizeLarge;
            if (_setProperties.Contains(nameof(FontWeight)))
                target.FontWeight = source.FontWeight;
            if (_setProperties.Contains(nameof(BorderColor)))
                target.BorderColor = source.BorderColor;
            if (_setProperties.Contains(nameof(BorderThickness)))
                target.BorderThickness = source.BorderThickness;
            if (_setProperties.Contains(nameof(BorderRadius)))
                target.BorderRadius = source.BorderRadius;
            if (_setProperties.Contains(nameof(ErrorColor)))
                target.ErrorColor = source.ErrorColor;
            if (_setProperties.Contains(nameof(WarningColor)))
                target.WarningColor = source.WarningColor;
            if (_setProperties.Contains(nameof(SuccessColor)))
                target.SuccessColor = source.SuccessColor;
            if (_setProperties.Contains(nameof(Name)))
                target.Name = source.Name;
        }

        private void ApplyOverrides(Skin target)
        {
            if (PropertyOverrides != null)
                foreach (var kvp in PropertyOverrides)
                {
                    var property = typeof(Skin).GetProperty(kvp.Key);
                    if (property != null && property.CanWrite)
                    {
                        try
                        {
                            var value = ConvertValue(kvp.Value, property.PropertyType);
                            property.SetValue(target, value);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to apply override for {kvp.Key}: {ex.Message}");
                        }
                    }
                }
        }

        // Update the ConvertValue method in InheritableSkin.cs
        private object? ConvertValue(object? value, Type targetType)
        {
            if (value == null) return null;

            if (targetType == typeof(Color) && value is string colorString)
            {
                return Color.Parse(colorString);
            }

            if (targetType == typeof(FontFamily) && value is string fontString)
            {
                return new FontFamily(fontString);
            }

            if (targetType == typeof(FontWeight) && value is string fontWeightString)
            {
                return Enum.TryParse<FontWeight>(fontWeightString, out var weight)
                    ? weight
                    : FontWeight.Normal;
            }

            if (targetType == typeof(Thickness))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new Thickness(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        return Thickness.Parse(element.GetString() ?? "0");
                    }
                    else if (element.ValueKind == JsonValueKind.Object)
                    {
                        var left = element.TryGetProperty("left", out var leftProp) ? leftProp.GetDouble() : 0;
                        var top = element.TryGetProperty("top", out var topProp) ? topProp.GetDouble() : 0;
                        var right = element.TryGetProperty("right", out var rightProp) ? rightProp.GetDouble() : 0;
                        var bottom = element.TryGetProperty("bottom", out var bottomProp) ? bottomProp.GetDouble() : 0;
                        return new Thickness(left, top, right, bottom);
                    }
                }
                else if (value is string thicknessString)
                {
                    return Thickness.Parse(thicknessString);
                }
            }

            if (targetType == typeof(CornerRadius))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new CornerRadius(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        var radiusString = element.GetString() ?? "0";
                        return double.TryParse(radiusString, out var radius)
                            ? new CornerRadius(radius)
                            : new CornerRadius(0);
                    }
                }
                else if (value is string radiusString)
                {
                    return double.TryParse(radiusString, out var radius)
                        ? new CornerRadius(radius)
                        : new CornerRadius(0);
                }
            }

            // Try standard type conversion as fallback
            try
            {
                return Convert.ChangeType(value, targetType);
            }
            catch
            {
                return targetType.IsValueType ? Activator.CreateInstance(targetType) : null;
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\PropertyValidationResult.cs
================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Avalonia.UIStudio.Appearance.Model
{
    public class PropertyValidationResult
    {
        public string PropertyName { get; set; }
        public object? Value { get; set; }
        public object? SuggestedValue { get; set; }
        public string Message { get; set; } = string.Empty;
        public bool IsValid { get; set; } = true;
        public bool IsError { get; set; } = false;
    }


}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SerializableSkin.cs
================================================================================

using Avalonia.Media;
using Newtonsoft.Json;

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableSkin
    {
        /// <summary>
        /// Gets or sets the name of the skin.
        /// </summary>
        /// <remarks>
        /// This property represents the unique identifier or display name of the skin.
        /// It is a required field and must not be null, empty, or whitespace.
        /// </remarks>
        public string? Name { get; set; } = "";
        /// <summary>
        /// Gets or sets a description of the skin, providing additional context or details about its purpose or design.
        /// </summary>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the version of the skin.
        /// </summary>
        /// <remarks>
        /// This property indicates the version of the skin, which can be useful for compatibility checks
        /// or identifying updates to the skin.
        /// </remarks>
        public string Version { get; set; } = "1.0";
        /// <summary>
        /// Gets or sets the author of the skin.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the skin's author.
        /// </value>
        public string Author { get; set; } = "";
        /// <summary>
        /// Gets or sets the date and time when the skin was created.
        /// </summary>
        /// <value>
        /// A <see cref="DateTime"/> representing the creation date and time of the skin.
        /// </value>
        public DateTime CreatedDate { get; set; } = DateTime.Now;

        // Colors as hex strings for JSON serialization
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryColor { get; set; } = "#343B48";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryColor { get; set; } = "#3D4654";
        /// <summary>
        /// 
        /// </summary>
        public string AccentColor { get; set; } = "#3498DB";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryBackground { get; set; } = "#2C313D";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryBackground { get; set; } = "#464F62";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryTextColor { get; set; } = "#FFFFFF";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryTextColor { get; set; } = "#CCCCCC";
        /// <summary>
        /// 
        /// </summary>
        public string BorderColor { get; set; } = "#5D6778";
        /// <summary>
        /// 
        /// </summary>
        public string ErrorColor { get; set; } = "#E74C3C";
        /// <summary>
        /// 
        /// </summary>
        public string WarningColor { get; set; } = "#F39C12";
        /// <summary>
        /// 
        /// </summary>
        public string SuccessColor { get; set; } = "#2ECC71";


        // Typography
        /// <summary>
        /// 
        /// </summary>
        public string FontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeSmall { get; set; } = 10;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public string FontWeight { get; set; } = "Normal";

        // Layout
        /// <summary>
        /// 
        /// </summary>
        public double BorderRadius { get; set; } = 4;
        /// <summary>
        /// 
        /// </summary>
        public SerializableThickness BorderThickness { get; set; } = new() { Left = 1, Top = 1, Right = 1, Bottom = 1 };

        // Advanced typography (optional)
        /// <summary>
        /// 
        /// </summary>
        public SerializableTypography? AdvancedTypography { get; set; }

        // Inheritance (optional)
        /// <summary>
        /// 
        /// </summary>
        [JsonIgnore]
        public SerializableSkin? BaseSkin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public Dictionary<string, object>? PropertyOverrides { get; set; }

        /// <summary>
        /// Gets or sets the list of control skin file paths relative to the skin base directory.
        /// </summary>
        public List<string>? ControlThemes { get; set; }
        /// <summary>
        /// Optional named assets like logos or backgrounds.
        /// </summary>
        public Dictionary<string, string>? Assets { get; set; }
        /// <summary>
        /// Name of the base skin (for inheritance), serialized for persistence.
        /// </summary>
        public string? BaseSkinName { get; set; }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class SkinConverterExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="skin"></param>
        /// <returns></returns>
        public static Skin ToSkin(this SerializableSkin skin)
        {
            return new Skin
            {
                Name = skin.Name,
                PrimaryColor = Color.Parse(skin.PrimaryColor),
                SecondaryColor = Color.Parse(skin.SecondaryColor),
                AccentColor = Color.Parse(skin.AccentColor),
                PrimaryBackground = Color.Parse(skin.PrimaryBackground),
                SecondaryBackground = Color.Parse(skin.SecondaryBackground),
                PrimaryTextColor = Color.Parse(skin.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(skin.SecondaryTextColor),
                BorderColor = Color.Parse(skin.BorderColor),
                ErrorColor = Color.Parse(skin.ErrorColor),
                WarningColor = Color.Parse(skin.WarningColor),
                SuccessColor = Color.Parse(skin.SuccessColor),
                FontFamily = new FontFamily(skin.FontFamily),
                FontSizeSmall = skin.FontSizeSmall,
                FontSizeMedium = skin.FontSizeMedium,
                FontSizeLarge = skin.FontSizeLarge,
                FontWeight = Enum.TryParse<FontWeight>(skin.FontWeight, true, out var fw)
                    ? fw
                    : FontWeight.Normal,
                BorderRadius = skin.BorderRadius,
                BorderThickness = new Thickness(
                    skin.BorderThickness.Left,
                    skin.BorderThickness.Top,
                    skin.BorderThickness.Right,
                    skin.BorderThickness.Bottom
                ),
                Typography =
                    new TypographyScale
                    {
                        DisplayLarge = skin.AdvancedTypography?.DisplayLarge ?? 57,
                        DisplayMedium = skin.AdvancedTypography?.DisplayMedium ?? 45,
                        DisplaySmall = skin.AdvancedTypography?.DisplaySmall ?? 36,
                        HeadlineLarge = skin.AdvancedTypography?.HeadlineLarge ?? 32,
                        HeadlineMedium = skin.AdvancedTypography?.HeadlineMedium ?? 28,
                        HeadlineSmall = skin.AdvancedTypography?.HeadlineSmall ?? 24,
                        TitleLarge = skin.AdvancedTypography?.TitleLarge ?? 22,
                        TitleMedium = skin.AdvancedTypography?.TitleMedium ?? 16,
                        TitleSmall = skin.AdvancedTypography?.TitleSmall ?? 14,
                        LabelLarge = skin.AdvancedTypography?.LabelLarge ?? 14,
                        LabelMedium = skin.AdvancedTypography?.LabelMedium ?? 12,
                        LabelSmall = skin.AdvancedTypography?.LabelSmall ?? 11,
                        BodyLarge = skin.AdvancedTypography?.BodyLarge ?? 16,
                        BodyMedium = skin.AdvancedTypography?.BodyMedium ?? 14,
                        BodySmall = skin.AdvancedTypography?.BodySmall ?? 12,
                    },
                HeaderFontFamily = new FontFamily(skin.AdvancedTypography?.HeaderFontFamily ?? skin.FontFamily),
                BodyFontFamily = new FontFamily(skin.AdvancedTypography?.BodyFontFamily ?? skin.FontFamily),
                MonospaceFontFamily =
                    new FontFamily(skin.AdvancedTypography?.MonospaceFontFamily ??
                                   "Consolas, Monaco, 'Courier New', monospace"),
                LineHeight = skin.AdvancedTypography?.LineHeight ?? 1.5,
                LetterSpacing = skin.AdvancedTypography?.LetterSpacing ?? 0,
                EnableLigatures = skin.AdvancedTypography?.EnableLigatures ?? true,
                ControlThemeUris = skin.ControlThemes?.ToDictionary(x => x, x => x) ?? new(),
                StyleUris = skin.PropertyOverrides?.ToDictionary(x => x.Key,
                    x => x.Value?.ToString()) ?? new(),
                AssetUris = skin.Assets?.ToDictionary(x => x.Key, x => x.Value) ?? new()
            };
        }
    }

}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SerializableThickness.cs
================================================================================

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableThickness
    {
        /// <summary>
        /// 
        /// </summary>
        public double Left { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Top { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Right { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Bottom { get; set; }

    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SerializableTypography.cs
================================================================================

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableTypography
    {
        /// <summary>
        /// 
        /// </summary>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// 
        /// </summary>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// 
        /// </summary>
        public double DisplaySmall { get; set; } = 36;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineSmall { get; set; } = 24;
        /// <summary>
        /// 
        /// </summary>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// 
        /// </summary>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double TitleSmall { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double LabelSmall { get; set; } = 11;
        /// <summary>
        /// 
        /// </summary>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double BodySmall { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>

        /// <summary>
        /// 
        /// </summary>
        public string? HeaderFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string? BodyFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string? MonospaceFontFamily { get; set; } = "Consolas, Monaco, 'Courier New', monospace";
        /// <summary>
        /// 
        /// </summary>
        public double LineHeight { get; set; } = 1.5;
        /// <summary>
        /// 
        /// </summary>
        public double LetterSpacing { get; set; } = 0;
        /// <summary>
        /// 
        /// </summary>
        public bool EnableLigatures { get; set; } = true;
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\Skin.cs
================================================================================

using Avalonia.Media;

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// Represents a customizable skin for an Avalonia application, defining colors, fonts, and other visual properties.
    /// </summary>
    /// <remarks>
    /// The <see cref="Skin"/> class provides a set of properties to define the appearance of an application, 
    /// including primary and secondary colors, background colors, text colors, font settings, and additional UI properties.
    /// It also includes functionality to convert colors to brushes and a default constructor for initializing a dark skin.
    /// </remarks>
    public class Skin
    {
        public string Description { get; set; }
        // Basic colors
        /// <summary>
        /// Gets or sets the primary color of the skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used as the main color for UI elements and serves as a foundation
        /// for the overall skin design. The default value for the dark skin is GunMetal Dark (#343B48).
        /// </remarks>
        public Color PrimaryColor { get; set; }
        /// <summary>
        /// Gets or sets the secondary color used in the skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used for medium-tone elements within the skin.
        /// The default value for the dark skin is <c>#3D4654</c> (GunMetal Medium).
        /// </remarks>
        public Color SecondaryColor { get; set; }
        /// <summary>
        /// Gets or sets the accent color of the skin.
        /// </summary>
        /// <remarks>
        /// The accent color is used to highlight key elements in the user interface,
        /// providing a visually distinct color that complements the primary and secondary colors.
        /// </remarks>
        public Color AccentColor { get; set; }
        // Backgrounds
        /// <summary>
        /// Gets or sets the primary background color of the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary background color.
        /// </value>
        public Color PrimaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the secondary background color of the skin.
        /// </summary>
        /// <remarks>
        /// This property defines the secondary background color used in the skin. 
        /// It is typically a lighter shade of the primary background color to provide contrast and visual hierarchy.
        /// </remarks>
        public Color SecondaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the primary text color used in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary text color. 
        /// The default value is white (<c>#FFFFFF</c>).
        /// </value>
        public Color PrimaryTextColor { get; set; }
        /// <summary>
        /// Gets or sets the color used for secondary text elements in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the secondary text color. The default value is a light gray color (#CCCCCC).
        /// </value>
        public Color SecondaryTextColor { get; set; }
        // Font properties
        /// <summary>
        /// Gets or sets the font family used for text rendering in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="FontFamily"/> representing the font family. The default value is "Segoe UI, San Francisco, Helvetica, Arial, sans-serif".
        /// </value>
        public FontFamily FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font size for small text elements in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small text elements. The default value is 10.
        /// </value>
        public double FontSizeSmall { get; set; }
        /// <summary>
        /// Gets or sets the medium font size used in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the medium font size.
        /// </value>
        public double FontSizeMedium { get; set; }
        /// <summary>
        /// Gets or sets the font size for large text elements in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large text elements. 
        /// The default value is 16.
        /// </value>
        public double FontSizeLarge { get; set; }
        /// <summary>
        /// Gets or sets the font weight used in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="FontWeight"/> value that specifies the weight of the font.
        /// The default value is <see cref="FontWeight.Normal"/>.
        /// </value>
        public FontWeight FontWeight { get; set; }
        /// <summary>
        /// Gets or sets the color of the border in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the border color.
        /// </value>
        public Color BorderColor { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the border for the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Thickness"/> structure that specifies the thickness of the border.
        /// </value>
        public Thickness BorderThickness { get; set; }
        /// <summary>
        /// Gets or sets the border radius applied to UI elements in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the radius of the border corners, in device-independent units (DIPs).
        /// </value>
        public double BorderRadius { get; set; }
        // Additional UI properties
        /// <summary>
        /// Gets or sets the color used to represent error states in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the error color. The default value is typically a shade of red.
        /// </value>
        public Color ErrorColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent warnings in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the warning color. The default value is "#F39C12".
        /// </value>
        public Color WarningColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent success states in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the success color.
        /// </value>
        public Color SuccessColor { get; set; }
        // Name of the skin
        /// <summary>
        /// Gets or sets the name of the skin.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the skin. 
        /// The default value is "Dark".
        /// </value>
        public string? Name { get; set; }
        // Constructor with default values
        // URIs to ControlTheme resources mapped by control type or key
        /// <summary>
        /// Gets or sets the dictionary of control theme resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// Keys typically represent control types or identifiers, and values are the associated resource URIs (e.g., avares URIs).
        /// </remarks>
        public Dictionary<string, string> ControlThemeUris { get; set; } = new();
        // URIs to general Style resources mapped by key
        /// <summary>
        /// Gets or sets the dictionary of style resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// These styles can define visual behavior for multiple controls or layout elements.
        /// </remarks>
        public Dictionary<string, string?> StyleUris { get; set; } = new();
        // Extended typography information such as font scaling and weight map
        /// <summary>
        /// Gets or sets the typography scale for the skin.
        /// </summary>
        /// <value>
        /// A <see cref="TypographyScale"/> object used to define consistent typography sizing and scaling for various text styles.
        /// </value>
        public TypographyScale? Typography { get; set; } = new();
        // Additional font families for specific text roles
        /// <summary>
        /// Gets or sets the font family used for headers.
        /// </summary>
        public FontFamily? HeaderFontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font family used for body text.
        /// </summary>
        public FontFamily? BodyFontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font family used for monospace content (e.g., code blocks).
        /// </summary>
        public FontFamily? MonospaceFontFamily { get; set; }
        // Line height and spacing for typographic elements
        /// <summary>
        /// Gets or sets the line height multiplier used in text layout.
        /// </summary>
        /// <remarks>
        /// This is typically a multiplier on the font size to determine the vertical spacing between lines.
        /// </remarks>
        public double LineHeight { get; set; } = 1.5;

        /// <summary>
        /// Gets or sets the letter spacing used in the skin.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing additional space between letters in DIPs. Default is 0.
        /// </value>
        public double LetterSpacing { get; set; } = 0;
        /// <summary>
        /// Gets or sets a value indicating whether ligatures are enabled in text rendering.
        /// </summary>
        /// <value>
        /// <c>true</c> to enable ligatures; otherwise, <c>false</c>.
        /// </value>
        public bool EnableLigatures { get; set; } = true;
        /// <summary>
        /// Dictionary of named asset URIs (images, SVGs, etc.).
        /// </summary>
        public Dictionary<string, string> AssetUris { get; set; } = new();
        /// <summary>
        /// 
        /// </summary>
        public InheritableSkin? BaseSkin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public Skin()
        {
            // Set default values for Dark skin
            PrimaryColor = Color.Parse("#343B48");        // GunMetal Dark
            SecondaryColor = Color.Parse("#3D4654");      // GunMetal Medium
            AccentColor = Color.Parse("#3498DB");         // Accent Blue
            PrimaryBackground = Color.Parse("#2C313D");   // Dark background
            SecondaryBackground = Color.Parse("#464F62"); // GunMetal Light
            PrimaryTextColor = Color.Parse("#FFFFFF");
            SecondaryTextColor = Color.Parse("#CCCCCC");
            FontFamily = new FontFamily("Segoe UI, San Francisco, Helvetica, Arial, sans-serif");
            FontSizeSmall = 10;
            FontSizeMedium = 12;
            FontSizeLarge = 16;
            FontWeight = FontWeight.Normal;
            BorderColor = Color.Parse("#5D6778");
            BorderThickness = new Thickness(1);
            BorderRadius = 4;
            ErrorColor = Color.Parse("#E74C3C");
            WarningColor = Color.Parse("#F39C12");
            SuccessColor = Color.Parse("#2ECC71");
            HeaderFontFamily = FontFamily;
            BodyFontFamily = FontFamily;
            MonospaceFontFamily = new FontFamily("Consolas, Monaco, 'Courier New', monospace");
            BaseSkin = null;
            Name = "Dark";
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseSkin"></param>
        public void InheritFrom(Skin baseSkin)
        {
            PrimaryColor = PrimaryColor == default ? baseSkin.PrimaryColor : PrimaryColor;
            SecondaryColor = SecondaryColor == default ? baseSkin.SecondaryColor : SecondaryColor;
            AccentColor = AccentColor == default ? baseSkin.AccentColor : AccentColor;
            PrimaryBackground = PrimaryBackground == default ? baseSkin.PrimaryBackground : PrimaryBackground;
            SecondaryBackground = SecondaryBackground == default ? baseSkin.SecondaryBackground : SecondaryBackground;
            PrimaryTextColor = PrimaryTextColor == default ? baseSkin.PrimaryTextColor : PrimaryTextColor;
            SecondaryTextColor = SecondaryTextColor == default ? baseSkin.SecondaryTextColor : SecondaryTextColor;
            BorderColor = BorderColor == default ? baseSkin.BorderColor : BorderColor;
            ErrorColor = ErrorColor == default ? baseSkin.ErrorColor : ErrorColor;
            WarningColor = WarningColor == default ? baseSkin.WarningColor : WarningColor;
            SuccessColor = SuccessColor == default ? baseSkin.SuccessColor : SuccessColor;

            FontFamily ??= baseSkin.FontFamily;
            HeaderFontFamily ??= baseSkin.HeaderFontFamily;
            BodyFontFamily ??= baseSkin.BodyFontFamily;
            MonospaceFontFamily ??= baseSkin.MonospaceFontFamily;

            FontSizeSmall = FontSizeSmall == 0 ? baseSkin.FontSizeSmall : FontSizeSmall;
            FontSizeMedium = FontSizeMedium == 0 ? baseSkin.FontSizeMedium : FontSizeMedium;
            FontSizeLarge = FontSizeLarge == 0 ? baseSkin.FontSizeLarge : FontSizeLarge;
            FontWeight = FontWeight == default ? baseSkin.FontWeight : FontWeight;

            BorderRadius = BorderRadius == 0 ? baseSkin.BorderRadius : BorderRadius;
            BorderThickness = BorderThickness == default ? baseSkin.BorderThickness : BorderThickness;

            LineHeight = LineHeight == 0 ? baseSkin.LineHeight : LineHeight;
            LetterSpacing = LetterSpacing == 0 ? baseSkin.LetterSpacing : LetterSpacing;
            // Typography scale
            Typography ??= new TypographyScale();
            if (baseSkin.Typography != null) Typography.ApplyFallbacksFrom(baseSkin.Typography);

            // Merge control theme URIs and styles (child overrides take precedence)
            foreach (var kvp in baseSkin.ControlThemeUris)
                ControlThemeUris.TryAdd(kvp.Key, kvp.Value);

            foreach (var kvp in baseSkin.StyleUris)
                StyleUris.TryAdd(kvp.Key, kvp.Value);
        }
        // Creates a brush from a color
        /// <summary>
        /// Converts the specified <see cref="Color"/> to a <see cref="SolidColorBrush"/>.
        /// </summary>
        /// <param name="color">The <see cref="Color"/> to convert.</param>
        /// <returns>A <see cref="SolidColorBrush"/> representing the specified color.</returns>
        public static SolidColorBrush ToBrush(Color color)
        {
            return new SolidColorBrush(color);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SkinImportResult.cs
================================================================================

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// 
    /// </summary>
    public class SkinImportResult
    {
        /// <summary>
        /// 
        /// </summary>
        public Skin? Skin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public bool Success { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public string? ErrorMessage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public List<string> Warnings { get; set; } = new();
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SkinSummaryInfo.cs
================================================================================

using Avalonia.Media;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Avalonia.UIStudio.Appearance.Model
{

    /// <summary>
    /// Represents information about a skin, including its name, description, and a preview color.
    /// </summary>
    /// <remarks>
    /// This class is used to encapsulate the details of a skin, which can be displayed in the UI
    /// or used for skin management purposes within the application.
    /// </remarks>
    public class SkinSummaryInfo
    {
        /// <summary>
        /// Gets or sets the name of the skin.
        /// </summary>
        /// <remarks>
        /// The name uniquely identifies the skin and is used for selection and application purposes.
        /// </remarks>
        public string Name { get; set; } = "";
        /// <summary>
        /// Gets or sets the description of the skin.
        /// </summary>
        /// <remarks>
        /// This property provides a textual description of the skin, which can be displayed in the user interface
        /// to give users more context about the skin's purpose or appearance.
        /// </remarks>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the brush used to represent the preview color of the skin.
        /// </summary>
        /// <remarks>
        /// This property is typically used to display a visual representation of the skin's accent color
        /// in the user interface, such as in skin selection controls.
        /// </remarks>
        public IBrush PreviewColor { get; set; } = Brushes.Transparent;
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SkinValidationMessage.cs
================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Avalonia.Media;

namespace Avalonia.UIStudio.Appearance.Model
{
    public class SkinValidationMessage
    {
        public bool IsError { get; set; }
        public string Message { get; set; } = string.Empty;

        /// <summary>
        /// Names of properties involved in this validation message.
        /// </summary>
        public List<string> InvolvedProperties { get; set; } = new();

        /// <summary>
        /// Suggested values for involved properties (if applicable).
        /// Example:
        /// { "PrimaryTextColor" => Color }
        /// { "FontSizeSmall" => 12.0 }
        /// { "Name" => "My Skin Name" }
        /// </summary>
        public Dictionary<string, object?> SuggestedValues { get; set; } = new();
    }


}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\SkinValidationResult.cs
================================================================================

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// Represents the result of skin validation.
    /// </summary>
    public class SkinValidationResult
    {
        public bool IsValid { get; set; } = true;

        public List<SkinValidationMessage> ValidationMessages { get; set; } = new();

        public List<string> Errors => ValidationMessages
            .Where(v => v.IsError)
            .Select(v => v.Message)
            .ToList();

        public List<string> Warnings => ValidationMessages
            .Where(v => !v.IsError)
            .Select(v => v.Message)
            .ToList();
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\TypographyScale.cs
================================================================================

// Skin/TypographySystem.cs

namespace Avalonia.UIStudio.Appearance.Model
{
    /// <summary>
    /// Defines typography scale and settings for skins.
    /// </summary>
    public class TypographyScale
    {
        // Display sizes (largest)
        /// <summary>
        /// Gets or sets the size of the largest display typography.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the largest display typography. 
        /// The default value is 57.
        /// </value>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// Gets or sets the medium display typography size.
        /// </summary>
        /// <value>
        /// The size of the medium display typography, typically used for prominent text elements.
        /// The default value is 45.
        /// </value>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// Gets or sets the size of the "Display Small" typography, typically used for smaller display text.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the "Display Small" typography. The default value is 36.
        /// </value>
        public double DisplaySmall { get; set; } = 36;

        // Headline sizes
        /// <summary>
        /// Gets or sets the font size for large headlines in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large headlines. 
        /// The default value is 32.
        /// </value>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// Gets or sets the font size for medium-sized headlines in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized headlines, typically used for emphasizing content
        /// that is less prominent than large headlines but more significant than small headlines.
        /// The default value is 28.
        /// </value>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// Gets or sets the font size for small headline text in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small headline text. 
        /// The default value is 24.
        /// </value>
        public double HeadlineSmall { get; set; } = 24;

        // Title sizes
        /// <summary>
        /// Gets or sets the font size for large titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for large titles, typically used for prominent headings or titles.
        /// The default value is 22.
        /// </value>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// Gets or sets the font size for medium-sized titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized titles, typically used for medium emphasis text elements.
        /// The default value is 16.
        /// </value>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for small titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for small titles, typically used for less prominent headings or titles.
        /// The default value is 14.
        /// </value>
        public double TitleSmall { get; set; } = 14;

        // Label sizes
        /// <summary>
        /// Gets or sets the font size for large labels in the typography scale.
        /// </summary>
        /// <value>
        /// The size of the font for large labels, typically used for prominent labeling.
        /// The default value is 14.
        /// </value>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for medium-sized labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized labels. The default value is 12.
        /// </value>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// Gets or sets the font size for small labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for small labels. The default value is 11.
        /// </value>
        public double LabelSmall { get; set; } = 11;

        // Body sizes
        /// <summary>
        /// Gets or sets the font size for large body text.
        /// </summary>
        /// <value>
        /// The font size for large body text, typically used for primary content areas.
        /// Default value is 16.
        /// </value>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for medium body text in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for medium body text. 
        /// The default value is 14.
        /// </value>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for small body text.
        /// </summary>
        /// <value>
        /// The font size for small body text, typically used for less prominent content.
        /// </value>
        public double BodySmall { get; set; } = 12;

        /// <summary>
        /// Applies a scale factor to all typography sizes.
        /// </summary>
        public void ApplyScale(double scaleFactor)
        {
            DisplayLarge *= scaleFactor;
            DisplayMedium *= scaleFactor;
            DisplaySmall *= scaleFactor;
            HeadlineLarge *= scaleFactor;
            HeadlineMedium *= scaleFactor;
            HeadlineSmall *= scaleFactor;
            TitleLarge *= scaleFactor;
            TitleMedium *= scaleFactor;
            TitleSmall *= scaleFactor;
            LabelLarge *= scaleFactor;
            LabelMedium *= scaleFactor;
            LabelSmall *= scaleFactor;
            BodyLarge *= scaleFactor;
            BodyMedium *= scaleFactor;
            BodySmall *= scaleFactor;
        }

        // Add these methods to TypographyScale.cs
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public TypographyScale Clone()
        {
            return new TypographyScale
            {
                DisplayLarge = DisplayLarge,
                DisplayMedium = DisplayMedium,
                DisplaySmall = DisplaySmall,
                HeadlineLarge = HeadlineLarge,
                HeadlineMedium = HeadlineMedium,
                HeadlineSmall = HeadlineSmall,
                TitleLarge = TitleLarge,
                TitleMedium = TitleMedium,
                TitleSmall = TitleSmall,
                LabelLarge = LabelLarge,
                LabelMedium = LabelMedium,
                LabelSmall = LabelSmall,
                BodyLarge = BodyLarge,
                BodyMedium = BodyMedium,
                BodySmall = BodySmall
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public void Reset()
        {
            DisplayLarge = 57;
            DisplayMedium = 45;
            DisplaySmall = 36;
            HeadlineLarge = 32;
            HeadlineMedium = 28;
            HeadlineSmall = 24;
            TitleLarge = 22;
            TitleMedium = 16;
            TitleSmall = 14;
            LabelLarge = 14;
            LabelMedium = 12;
            LabelSmall = 11;
            BodyLarge = 16;
            BodyMedium = 14;
            BodySmall = 12;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ValidateScale()
        {
            return DisplayLarge > DisplayMedium &&
                   DisplayMedium > DisplaySmall &&
                   HeadlineLarge > HeadlineMedium &&
                   HeadlineMedium > HeadlineSmall &&
                   TitleLarge > TitleMedium &&
                   TitleMedium > TitleSmall &&
                   BodyLarge > BodyMedium &&
                   BodyMedium > BodySmall;
        }

        public void ApplyFallbacksFrom(TypographyScale fallback)
        {
            DisplayLarge = DisplayLarge == 0 ? fallback.DisplayLarge : DisplayLarge;
            DisplayMedium = DisplayMedium == 0 ? fallback.DisplayMedium : DisplayMedium;
            DisplaySmall = DisplaySmall == 0 ? fallback.DisplaySmall : DisplaySmall;
            HeadlineLarge = HeadlineLarge == 0 ? fallback.HeadlineLarge : HeadlineLarge;
            HeadlineMedium = HeadlineMedium == 0 ? fallback.HeadlineMedium : HeadlineMedium;
            HeadlineSmall = HeadlineSmall == 0 ? fallback.HeadlineSmall : HeadlineSmall;
            TitleLarge = TitleLarge == 0 ? fallback.TitleLarge : TitleLarge;
            TitleMedium = TitleMedium == 0 ? fallback.TitleMedium : TitleMedium;
            TitleSmall = TitleSmall == 0 ? fallback.TitleSmall : TitleSmall;
            LabelLarge = LabelLarge == 0 ? fallback.LabelLarge : LabelLarge;
            LabelMedium = LabelMedium == 0 ? fallback.LabelMedium : LabelMedium;
            LabelSmall = LabelSmall == 0 ? fallback.LabelSmall : LabelSmall;
            BodyLarge = BodyLarge == 0 ? fallback.BodyLarge : BodyLarge;
            BodyMedium = BodyMedium == 0 ? fallback.BodyMedium : BodyMedium;
            BodySmall = BodySmall == 0 ? fallback.BodySmall : BodySmall;
        }

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Model\ValidatedProperty.cs
================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.Model
{
    public class ValidatedProperty
    {
        public SkinValidationMessage OriginalMessage { get; set; }
        public string Name { get; set; }
        public bool IsValid { get; set; }
        public object Value { get; set; }
        
        public object SuggestedValue { get; set; }
        
        public string Message { get; set; }

    }
    

    public class ValidatableProperty<T> : ReactiveObject
    {
        public PropertyValidationResult ValidationResult { get; } = new();

        private T _value;
        public T Value
        {
            get => _value;
            set
            {
                this.RaiseAndSetIfChanged(ref _value, value);
                ValidationResult.Value = value;
            }
        }

        public ValidatableProperty(string propertyName, T initialValue)
        {
            ValidationResult.PropertyName = propertyName;
            _value = initialValue;
            ValidationResult.Value = initialValue;
        }
    }

}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\SkinImportExportService.cs
================================================================================

// Skin/SkinImportExportService.cs

using Avalonia.Media;
using System.Text.Json;
using System.Text.Json.Serialization;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services
{
    /// <summary>
    /// Handles skin import and export operations.
    /// </summary>
    public class SkinImportExportService : ISkinImportExportService
    {
        private static readonly JsonSerializerOptions JsonOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        /// <summary>
        /// Exports a skin to a JSON file.
        /// </summary>
        public async Task<bool> ExportSkinAsync(Skin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableSkin = ConvertToSerializable(skin, description, author);
                var json = JsonSerializer.Serialize(serializableSkin, JsonOptions);

                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an advanced skin with typography to a JSON file.
        /// </summary>
        public async Task<bool> ExportAdvancedSkinAsync(Skin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableSkin = ConvertToSerializable(skin, description, author);

                // Add advanced typography
                if (skin.Typography != null)
                {
                    serializableSkin.AdvancedTypography = new SerializableTypography
                    {
                        DisplayLarge = skin.Typography.DisplayLarge,
                        DisplayMedium = skin.Typography.DisplayMedium,
                        DisplaySmall = skin.Typography.DisplaySmall,
                        HeadlineLarge = skin.Typography.HeadlineLarge,
                        HeadlineMedium = skin.Typography.HeadlineMedium,
                        HeadlineSmall = skin.Typography.HeadlineSmall,
                        TitleLarge = skin.Typography.TitleLarge,
                        TitleMedium = skin.Typography.TitleMedium,
                        TitleSmall = skin.Typography.TitleSmall,
                        LabelLarge = skin.Typography.LabelLarge,
                        LabelMedium = skin.Typography.LabelMedium,
                        LabelSmall = skin.Typography.LabelSmall,
                        BodyLarge = skin.Typography.BodyLarge,
                        BodyMedium = skin.Typography.BodyMedium,
                        BodySmall = skin.Typography.BodySmall,
                        HeaderFontFamily = skin.HeaderFontFamily?.ToString(),
                        BodyFontFamily = skin.BodyFontFamily?.ToString(),
                        MonospaceFontFamily = skin.MonospaceFontFamily?.ToString(),
                        LineHeight = skin.LineHeight,
                        LetterSpacing = skin.LetterSpacing,
                        EnableLigatures = skin.EnableLigatures
                    };
                }

                var json = JsonSerializer.Serialize(serializableSkin, JsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting advanced skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an inheritable skin to a JSON file.
        /// </summary>
        public async Task<bool> ExportInheritableSkinAsync(InheritableSkin skin, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableSkin = ConvertToSerializable(skin, description, author);

                // Add inheritance information
                serializableSkin.BaseSkinName = skin.BaseSkinName;
                serializableSkin.PropertyOverrides = skin.PropertyOverrides;

                var json = JsonSerializer.Serialize(serializableSkin, JsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting inheritable skin: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Imports a skin from a JSON file.
        /// </summary>
        public async Task<SkinImportResult> ImportSkinAsync(string filePath)
        {
            var result = new SkinImportResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.ErrorMessage = $"Skin file does not exist: {filePath}";
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, JsonOptions);

                if (serializableSkin == null)
                {
                    result.ErrorMessage = "Invalid skin file format";
                    return result;
                }

                // Validate before converting
                var validation = await ValidateSkinFileAsync(filePath);
                if (!validation.IsValid)
                {
                    result.ErrorMessage = $"Skin validation failed: {string.Join(", ", validation.Errors)}";
                    result.Warnings.AddRange(validation.Warnings);
                    return result;
                }

                result.Skin = ConvertFromSerializable(serializableSkin);
                result.Success = true;
            }
            catch (JsonException ex)
            {
                result.ErrorMessage = $"JSON parsing error: {ex.Message}";
            }
            catch (Exception ex)
            {
                result.ErrorMessage = $"Unexpected error importing skin: {ex.Message}";
            }

            return result;
        }

        /// <summary>
        /// Imports an advanced skin from a JSON file.
        /// </summary>
        public async Task<Skin?> ImportAdvancedSkinAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, JsonOptions);

                if (serializableSkin == null) return null;

                var baseSkin = ConvertFromSerializable(serializableSkin);
                

                // Apply advanced typography if present
                if (serializableSkin.AdvancedTypography != null)
                {
                    var typography = serializableSkin.AdvancedTypography;

                    baseSkin.Typography = new TypographyScale
                    {
                        DisplayLarge = typography.DisplayLarge,
                        DisplayMedium = typography.DisplayMedium,
                        DisplaySmall = typography.DisplaySmall,
                        HeadlineLarge = typography.HeadlineLarge,
                        HeadlineMedium = typography.HeadlineMedium,
                        HeadlineSmall = typography.HeadlineSmall,
                        TitleLarge = typography.TitleLarge,
                        TitleMedium = typography.TitleMedium,
                        TitleSmall = typography.TitleSmall,
                        LabelLarge = typography.LabelLarge,
                        LabelMedium = typography.LabelMedium,
                        LabelSmall = typography.LabelSmall,
                        BodyLarge = typography.BodyLarge,
                        BodyMedium = typography.BodyMedium,
                        BodySmall = typography.BodySmall
                    };

                    if (typography.HeaderFontFamily != null)
                        baseSkin.HeaderFontFamily = new FontFamily(typography.HeaderFontFamily);
                    if (typography.BodyFontFamily != null)
                        baseSkin.BodyFontFamily = new FontFamily(typography.BodyFontFamily);
                    if (typography.MonospaceFontFamily != null)
                        baseSkin.MonospaceFontFamily = new FontFamily(typography.MonospaceFontFamily);
                    baseSkin.LineHeight = typography.LineHeight;
                    baseSkin.LetterSpacing = typography.LetterSpacing;
                    baseSkin.EnableLigatures = typography.EnableLigatures;
                }

                return baseSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing advanced skin: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Imports an inheritable skin from a JSON file.
        /// </summary>
        public async Task<InheritableSkin?> ImportInheritableSkinAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, JsonOptions);

                if (serializableSkin == null) return null;

                var baseSkin = ConvertFromSerializable(serializableSkin);
                var inheritableSkin = new InheritableSkin();

                // Copy all properties from base skin
                CopyPropertiesToInheritable(inheritableSkin, baseSkin);

                // Set inheritance properties
                inheritableSkin.BaseSkinName = serializableSkin.BaseSkinName;
                inheritableSkin.PropertyOverrides = serializableSkin.PropertyOverrides ?? new Dictionary<string, object>();

                return inheritableSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing inheritable skin: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Validates a skin file before importing.
        /// </summary>
        public async Task<SkinValidationResult> ValidateSkinFileAsync(string filePath)
        {
            var result = new SkinValidationResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.ValidationMessages.Add(new SkinValidationMessage
                    {
                        IsError = true,
                        Message = "Skin file does not exist",
                        InvolvedProperties = new List<string>(),
                        SuggestedValues = new Dictionary<string, object?>()
                    });
                    result.IsValid = false;
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, JsonOptions);

                if (serializableSkin == null)
                {
                    result.ValidationMessages.Add(new SkinValidationMessage
                    {
                        IsError = true,
                        Message = "Invalid JSON format",
                        InvolvedProperties = new List<string>(),
                        SuggestedValues = new Dictionary<string, object?>()
                    });
                    return result;
                }

                // Validate required fields
                if (string.IsNullOrWhiteSpace(serializableSkin.Name))
                {
                    result.ValidationMessages.Add(new SkinValidationMessage
                    {
                        IsError = true,
                        Message = "Skin name is required",
                        InvolvedProperties = new List<string>(),
                        SuggestedValues = new Dictionary<string, object?>()
                    });
                }

                // Try to convert to validate color formats
                try
                {
                    var skin = ConvertFromSerializable(serializableSkin);
                    var validator = new SkinValidator();
                    var validationResult = validator.ValidateSkin(skin);

                    result.Errors.AddRange(validationResult.Errors);
                    result.Warnings.AddRange(validationResult.Warnings);
                    result.IsValid = validationResult.IsValid && result.Errors.Count == 0;
                }
                catch (Exception ex)
                {
                    result.ValidationMessages.Add(new SkinValidationMessage
                    {
                        IsError = true,
                        Message = $"Invalid skin data: {ex.Message}",
                        InvolvedProperties = new List<string>(),
                        SuggestedValues = new Dictionary<string, object?>()
                    });
                }
            }
            catch (JsonException)
            {
                result.IsValid = false;
                result.ValidationMessages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Invalid JSON format",
                    InvolvedProperties = new List<string>(),
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }
            catch (Exception ex)
            {
                result.IsValid = false;
                result.ValidationMessages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Error reading skin file: {ex.Message}",
                    InvolvedProperties = new List<string>(),
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }

            return result;
        }

        /// <summary>
        /// Exports multiple skins to a skin pack file.
        /// </summary>
        public async Task<bool> ExportSkinPackAsync(Dictionary<string, Skin> skins, string filePath, string packName, string? description = null)
        {
            try
            {
                var skinPack = new
                {
                    Name = packName,
                    Description = description,
                    Version = "1.0",
                    CreatedDate = DateTime.Now,
                    Skins = skins.Select(kvp => ConvertToSerializable(kvp.Value, null, null)).ToArray()
                };

                var json = JsonSerializer.Serialize(skinPack, JsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting skin pack: {ex.Message}");
                return false;
            }
        }

        private static SerializableSkin ConvertToSerializable(Skin skin, string? description, string? author)
        {
            return new SerializableSkin
            {
                Name = skin.Name ?? "Unnamed Skin",
                Description = description ?? "",
                Author = author ?? "",
                PrimaryColor = skin.PrimaryColor.ToString(),
                SecondaryColor = skin.SecondaryColor.ToString(),
                AccentColor = skin.AccentColor.ToString(),
                PrimaryBackground = skin.PrimaryBackground.ToString(),
                SecondaryBackground = skin.SecondaryBackground.ToString(),
                PrimaryTextColor = skin.PrimaryTextColor.ToString(),
                SecondaryTextColor = skin.SecondaryTextColor.ToString(),
                BorderColor = skin.BorderColor.ToString(),
                ErrorColor = skin.ErrorColor.ToString(),
                WarningColor = skin.WarningColor.ToString(),
                SuccessColor = skin.SuccessColor.ToString(),
                FontFamily = ParseFontFamily(skin.FontFamily.ToString()).ToString(),
                FontSizeSmall = skin.FontSizeSmall,
                FontSizeMedium = skin.FontSizeMedium,
                FontSizeLarge = skin.FontSizeLarge,
                FontWeight = skin.FontWeight.ToString(),
                BorderRadius = skin.BorderRadius,
                BorderThickness = new SerializableThickness
                {
                    Left = skin.BorderThickness.Left,
                    Top = skin.BorderThickness.Top,
                    Right = skin.BorderThickness.Right,
                    Bottom = skin.BorderThickness.Bottom
                }
            };
        }

        private static FontFamily ParseFontFamily(string fontFamily)
        {
            if (string.IsNullOrWhiteSpace(fontFamily))
                return FontFamily.Default;

            // Prevent problematic generic names being interpreted as relative URIs
            var safeFamilies = new[] { "serif", "sans-serif", "monospace" };
            foreach (var fam in safeFamilies)
            {
                if (fontFamily.Contains(fam))
                {
                    return FontFamily.Default;
                }
            }

            if (safeFamilies.Contains(fontFamily.Trim().ToLowerInvariant()))
            {
                return FontFamily.Default;
            }
                

            return new FontFamily(fontFamily);
        }


        private static Skin ConvertFromSerializable(SerializableSkin serializableSkin)
        {
            var fontWeight = Enum.TryParse<FontWeight>(serializableSkin.FontWeight, out var weight)
                ? weight
                : FontWeight.Normal;

            return new Skin
            {
                Name = serializableSkin.Name,
                PrimaryColor = Color.Parse(serializableSkin.PrimaryColor),
                SecondaryColor = Color.Parse(serializableSkin.SecondaryColor),
                AccentColor = Color.Parse(serializableSkin.AccentColor),
                PrimaryBackground = Color.Parse(serializableSkin.PrimaryBackground),
                SecondaryBackground = Color.Parse(serializableSkin.SecondaryBackground),
                PrimaryTextColor = Color.Parse(serializableSkin.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(serializableSkin.SecondaryTextColor),
                BorderColor = Color.Parse(serializableSkin.BorderColor),
                ErrorColor = Color.Parse(serializableSkin.ErrorColor),
                WarningColor = Color.Parse(serializableSkin.WarningColor),
                SuccessColor = Color.Parse(serializableSkin.SuccessColor),
                FontFamily = ParseFontFamily(serializableSkin.FontFamily),
                FontSizeSmall = serializableSkin.FontSizeSmall,
                FontSizeMedium = serializableSkin.FontSizeMedium,
                FontSizeLarge = serializableSkin.FontSizeLarge,
                FontWeight = fontWeight,
                BorderRadius = serializableSkin.BorderRadius,
                BorderThickness = new Thickness(
                    serializableSkin.BorderThickness.Left,
                    serializableSkin.BorderThickness.Top,
                    serializableSkin.BorderThickness.Right,
                    serializableSkin.BorderThickness.Bottom
                )
            };
        }

        private static void CopyPropertiesToInheritable(InheritableSkin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\SkinInheritanceManager.cs
================================================================================

using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services
{
    /// <summary>
    /// Manages skin inheritance and variant creation with dependency injection support.
    /// </summary>
    public class SkinInheritanceManager
    {
        private readonly Dictionary<string, InheritableSkin?> _inheritableSkins = new();
        private readonly Dictionary<string, Skin> _resolvedCache = new();
        private readonly ISkinManager _skinManager;

        /// <summary>
        /// Initializes a new instance of the SkinInheritanceManager class.
        /// </summary>
        /// <param name="skinManager">The skin manager to use for resolving base skins.</param>
        /// <exception cref="ArgumentNullException">Thrown when skinManager is null.</exception>
        public SkinInheritanceManager(ISkinManager skinManager)
        {
            _skinManager = skinManager ?? throw new ArgumentNullException(nameof(skinManager));
        }

        /// <summary>
        /// Registers an inheritable skin.
        /// </summary>
        public void RegisterInheritableSkin(string? name, InheritableSkin? skin)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentException("Skin name cannot be null or empty", nameof(name));
            if (skin == null)
                throw new ArgumentNullException(nameof(skin));

            skin.Name = name;
            _inheritableSkins[name] = skin;
            _resolvedCache.Remove(name); // Clear cache
        }

        /// <summary>
        /// Gets a resolved skin with inheritance applied.
        /// </summary>
        public Skin? GetResolvedSkin(string? name)
        {
            if (string.IsNullOrEmpty(name))
                return null;

            if (_resolvedCache.TryGetValue(name, out var cached))
            {
                return cached;
            }

            if (!_inheritableSkins.TryGetValue(name, out var inheritableSkin))
            {
                return null;
            }

            if (inheritableSkin != null)
            {
                var baseSkin = GetBaseSkin(inheritableSkin);
                var resolved = inheritableSkin.CreateResolvedSkin(baseSkin);

                _resolvedCache[name] = resolved;
                return resolved;
            }
            else
            {
                return null;
            }
        }

        private Skin? GetBaseSkin(InheritableSkin skin)
        {
            if (string.IsNullOrEmpty(skin.BaseSkinName))
            {
                return null;
            }

            // Handle recursive inheritance
            if (_inheritableSkins.TryGetValue(skin.BaseSkinName, out var baseInheritable))
            {
                return GetResolvedSkin(skin.BaseSkinName);
            }

            // Fall back to skin manager (now uses injected dependency)
            return _skinManager.GetSkin(skin.BaseSkinName);
        }

        /// <summary>
        /// Creates a skin variant by overriding specific properties.
        /// </summary>
        public InheritableSkin? CreateVariant(string? baseName, string? variantName, Dictionary<string, object>? overrides)
        {
            if (string.IsNullOrEmpty(baseName))
                throw new ArgumentException("Base skin name cannot be null or empty", nameof(baseName));
            if (string.IsNullOrEmpty(variantName))
                throw new ArgumentException("Variant skin name cannot be null or empty", nameof(variantName));
            if (overrides == null)
                throw new ArgumentNullException(nameof(overrides));

            var variant = new InheritableSkin
            {
                Name = variantName,
                BaseSkinName = baseName,
                PropertyOverrides = overrides
            };

            RegisterInheritableSkin(variantName, variant);
            return variant;
        }

        /// <summary>
        /// Clears the resolved skin cache.
        /// </summary>
        public void ClearCache()
        {
            _resolvedCache.Clear();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\SkinLoaderService.cs
================================================================================

using System.Text.Json;
using Avalonia.Platform;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services
{
    /// <summary>
    /// Defines a service for loading skins in an Avalonia application.
    /// </summary>
    /// <remarks>
    /// This interface provides methods to load skins skins from a specified directory.
    /// Implementations of this interface are responsible for parsing and managing skin-related resources.
    /// </remarks>
    public interface ISkinLoaderService
    {
        /// <summary>
        /// Loads a collection of skins from the specified root directory.
        /// </summary>
        /// <param name="skinsRoot">
        /// The root directory containing skin definitions.
        /// </param>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded skins.
        /// </returns>
        List<Skin> LoadSkins(string skinsRoot);
    }

    /// <summary>
    /// Provides functionality to load and manage skins for the Avalonia application.
    /// </summary>
    /// <remarks>
    /// This service is responsible for loading skins configurations and resources from a specified directory structure.
    /// It processes skins definitions, controlthemes, and styles, making them available for use within the application.
    /// </remarks>
    public class SkinLoaderService : ISkinLoaderService
    {

        // List of known embedded skins (keep in sync with package)
        private readonly string[] _embeddedSkins = new[]
        {
            "Dark", "Light", "Ocean Blue", "Cyberpunk",
            "RetroTerminal", "Purple Haze", "Forest Green", "High Contrast", "ModernIce", "Windows 11 Modern", "Zen Garden","Material Design 3"
        };


        public SkinLoaderService()
        {
            
            
        }

        /// <summary>
        /// Loads a collection of <see cref="Skin"/> objects from the specified root directory.
        /// </summary>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded skins.
        /// </returns>
        /// <remarks>
        /// This method scans the specified directory for subdirectories containing skin definitions.
        /// Each skin is expected to have a "skin.json" file and optionally "ControlThemes" and "Styles" directories
        /// containing .axaml files. The method parses these resources and constructs <see cref="Skin"/> objects
        /// with appropriate URIs for controlthemes and styles.
        /// </remarks>
        public List<Skin> LoadSkins(string skinsRoot = "avares://Avalonia.UIStudio.Appearance/Skins/")
        {
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var skins = new List<Skin>();

            var baseUri = new Uri(skinsRoot);

            // Build skin names list from avares assets
            List<string> skinNames = new List<string>();

            try
            {
                var skinJsonAssets = AssetLoader.GetAssets(new Uri(skinsRoot), null)
                    .Where(uri => uri.ToString().EndsWith("/skin.json", StringComparison.OrdinalIgnoreCase))
                    .ToList();

                // Extract skin names from avares uris
                foreach (var skinJsonUri in skinJsonAssets)
                {
                    var parts = skinJsonUri.ToString().Split('/');
                    if (parts.Length >= 2)
                    {
                        var skinName = parts[^2];  // the folder name before /skin.json
                        if (!string.IsNullOrWhiteSpace(skinName) && !skinNames.Contains(skinName))
                            skinNames.Add(skinName);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to enumerate skin folders: {ex.Message}");
            }

            // Now load each skin, UserOverrides first
            foreach (var skinName in skinNames)
            {
                bool loadedFromOverride = false;

                var userOverridePath = $"./Skins/UserOverrides/{skinName}/skin.json";
                if (File.Exists(userOverridePath))
                {
                    try
                    {
                        var json = File.ReadAllText(userOverridePath);
                        var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, jsonOptions);
                        if (serializableSkin != null)
                        {
                            var skin = serializableSkin.ToSkin();
                            skins.Add(skin);
                            loadedFromOverride = true;
                            Console.WriteLine($"Loaded skin '{skinName}' from UserOverrides.");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Failed to load user override skin '{skinName}': {ex.Message}");
                    }
                }

                if (!loadedFromOverride)
                {
                    try
                    {
                        var avaresPath = $"{skinsRoot}{skinName}/skin.json";
                        var avaresUri = new Uri(avaresPath);

                        using var stream = AssetLoader.Open(avaresUri);
                        using var reader = new StreamReader(stream);
                        var json = reader.ReadToEnd();

                        var serializableSkin = JsonSerializer.Deserialize<SerializableSkin>(json, jsonOptions);
                        if (serializableSkin is null) continue;

                        var skin = serializableSkin.ToSkin();
                        skins.Add(skin);
                        Console.WriteLine($"Loaded built-in skin '{skinName}'.");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Failed to load built-in skin '{skinName}': {ex.Message}");
                    }
                }
            }

            // Inheritance resolution
            foreach (var skin in skins)
            {
                if (skin.BaseSkin is { } baseskin)
                {
                    if (!string.IsNullOrWhiteSpace(baseskin.BaseSkinName))
                    {
                        var baseSkin = skins.FirstOrDefault(s => s.Name != null && s.Name.Equals(baseskin.BaseSkinName, StringComparison.OrdinalIgnoreCase));
                        if (baseSkin != null)
                        {
                            skin.InheritFrom(baseSkin);
                        }
                    }
                }
            }

            return skins;
        }

    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\SkinManager.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Media;
using Avalonia.Styling;
using Microsoft.Extensions.DependencyInjection;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services
{
    /// <summary>
    /// Manages the skins for an Avalonia application, providing functionality to register, retrieve, and apply skins.
    /// </summary>
    /// <remarks>
    /// This class serves as a singleton instance to manage the available skins and the currently applied skin. 
    /// It provides methods to register new skins, retrieve existing skins by name, and apply a specific skin.
    /// Additionally, it raises events when the skin is changed, allowing other components to react to skin updates.
    /// </remarks>
    public class SkinManager : ISkinManager
    {
        private readonly ISkinLoaderService _skinLoaderService;
        private readonly IApplication _application;
        private readonly Dictionary<string, Skin?> _availableSkins = new();
        private Skin? _currentSkin;
        private readonly IStylesCollection _styles;
        private readonly List<IStyle> _appliedControlThemes = new();
        private readonly List<IResourceProvider> _appliedControlThemeDictionaries = new();

        /// <summary>
        /// Gets the singleton instance of the <see cref="SkinManager"/> class, 
        /// which is responsible for managing skins in an Avalonia application.
        /// </summary>
        /// <value>
        /// The singleton instance of <see cref="SkinManager"/>.
        /// </value>
        /// <remarks>
        /// This property ensures that only one instance of <see cref="SkinManager"/> exists throughout the application.
        /// It provides centralized access to skin management functionality, including registering, retrieving, and applying skins.
        /// </remarks>
        public static SkinManager? Instance { get; set; }

        /// <summary>
        /// Gets the currently applied <see cref="Skin"/> in the application.
        /// </summary>
        /// <value>
        /// The <see cref="Skin"/> instance representing the current skin, or <c>null</c> if no skin is applied.
        /// </value>
        /// <remarks>
        /// Use this property to retrieve or monitor the active skin in the application. 
        /// Changes to the current skin can be handled through the <see cref="SkinChanged"/> event.
        /// </remarks>
        public Skin? CurrentSkin
        {
            get => _currentSkin;
            private set => _currentSkin = value;
        }

        /// <summary>
        /// Event that is raised when the skin is changed.
        /// </summary>
        public event EventHandler? SkinChanged;


        /// <summary>
        /// Initializes a new instance of the <see cref="SkinManager"/> class with dependency injection.
        /// </summary>
        /// <param name="skinLoaderService">The skin loader service for loading available skins.</param>
        /// <param name="application">The application abstraction for accessing resources and styles.</param>
        public SkinManager(ISkinLoaderService skinLoaderService, IApplication application)
        {
            _skinLoaderService = skinLoaderService ?? throw new ArgumentNullException(nameof(skinLoaderService));
            _application = application ?? throw new ArgumentNullException(nameof(application));
            _styles = application.AppStyles ?? throw new InvalidOperationException("Application.AppStyles is null.");

            RegisterDefaultSkins();
        }


        private void RegisterDefaultSkins()
        {
            string skinsPath = "avares://Avalonia.UIStudio.Appearance/Skins/";
            var skins = _skinLoaderService.LoadSkins(skinsPath);
            foreach (var skin in skins)
            {
                RegisterSkin(skin.Name, skin);
            }
                
        }

        /// <summary>
        /// Registers a new skin with the specified name.
        /// </summary>
        /// <param name="name">The name of the skin to register. This value must not be <c>null</c>.</param>
        /// <param name="skin">The <see cref="Skin"/> instance to register. This value must not be <c>null</c>.</param>
        /// <remarks>
        /// If both <paramref name="name"/> and <paramref name="skin"/> are not <c>null</c>, the skin is added to the collection of available skins.
        /// </remarks>
        public void RegisterSkin(string? name, Skin? skin)
        {
            if (skin != null && name != null)
            {
                skin.Name = name;
                _availableSkins[name] = skin;
            }
        }

        /// <summary>
        /// Retrieves a <see cref="Skin"/> instance by its name.
        /// </summary>
        /// <param name="name">The name of the skin to retrieve. If <c>null</c>, the current skin is returned.</param>
        /// <returns>
        /// The <see cref="Skin"/> instance associated with the specified name, 
        /// or the current skin if the name is not found or is <c>null</c>.
        /// </returns>
        public Skin? GetSkin(string? name)
        {
            if (name != null && _availableSkins.TryGetValue(name, out Skin? skin))
                return skin;
            return _currentSkin;
        }

        /// <summary>
        /// Retrieves the names of all available skins registered in the <see cref="SkinManager"/>.
        /// </summary>
        /// <returns>A list of strings representing the names of the available skins.</returns>
        public List<string> GetAvailableSkinNames() => _availableSkins.Keys.ToList();

        /// <summary>
        /// Applies a skin to the application by its name.
        /// </summary>
        /// <param name="skinName">
        /// The name of the skin to apply. If the skin with the specified name is not found, 
        /// an error message will be logged.
        /// </param>
        /// <remarks>
        /// If the specified skin exists, it will be applied, and the selected skin will be saved.
        /// If the skin does not exist or an error occurs during the application, an appropriate 
        /// message will be logged.
        /// </remarks>
        /// <exception cref="Exception">
        /// Logs any exception that occurs while applying the skin.
        /// </exception>
        public void ApplySkin(string? skinName)
        {
            try
            {
                if (skinName != null && _availableSkins.TryGetValue(skinName, out Skin? skin))
                {
                    ApplySkin(skin);
                    SaveSelectedSkin(skinName);
                }
                else
                {
                    Console.WriteLine($"Skin not found: {skinName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error applying skin {skinName}: {ex.Message}");
            }
        }

        /// <summary>
        /// Applies the specified skin to the application, updating resources and triggering the <see cref="SkinChanged"/> event.
        /// </summary>
        /// <param name="skin">The <see cref="Skin"/> to be applied. If <c>null</c>, a default skin will be applied.</param>
        /// <remarks>
        /// This method updates the application's resources and typography settings based on the provided skin.
        /// If an exception occurs during the application of the skin, it will be logged to the console.
        /// </remarks>
        public void ApplySkin(Skin? skin)
        {
            if (skin == null)
                skin = new Skin();

            _currentSkin = skin;

            try
            {
                UpdateResources();
                UpdateTypographyResources(skin);
                SkinChanged?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error applying custom skin: {ex.Message}");
            }
        }

        private void UpdateTypographyResources(Skin skin)
        {
            var resources = _application.Resources;
            if (resources == null) return;

            try
            {
                // Typography scale
                if (skin.Typography != null)
                {
                    resources["DisplayLargeFontSize"] = skin.Typography.DisplayLarge;
                    resources["DisplayMediumFontSize"] = skin.Typography.DisplayMedium;
                    resources["DisplaySmallFontSize"] = skin.Typography.DisplaySmall;
                    resources["HeadlineLargeFontSize"] = skin.Typography.HeadlineLarge;
                    resources["HeadlineMediumFontSize"] = skin.Typography.HeadlineMedium;
                    resources["HeadlineSmallFontSize"] = skin.Typography.HeadlineSmall;
                    resources["TitleLargeFontSize"] = skin.Typography.TitleLarge;
                    resources["TitleMediumFontSize"] = skin.Typography.TitleMedium;
                    resources["TitleSmallFontSize"] = skin.Typography.TitleSmall;
                    resources["LabelLargeFontSize"] = skin.Typography.LabelLarge;
                    resources["LabelMediumFontSize"] = skin.Typography.LabelMedium;
                    resources["LabelSmallFontSize"] = skin.Typography.LabelSmall;
                    resources["BodyLargeFontSize"] = skin.Typography.BodyLarge;
                    resources["BodyMediumFontSize"] = skin.Typography.BodyMedium;
                    resources["BodySmallFontSize"] = skin.Typography.BodySmall;
                }

                // Font families
                resources["HeaderFontFamily"] = skin.HeaderFontFamily;
                resources["BodyFontFamily"] = skin.BodyFontFamily;
                resources["MonospaceFontFamily"] = skin.MonospaceFontFamily;

                // Text properties
                resources["DefaultLineHeight"] = skin.LineHeight;
                resources["DefaultLetterSpacing"] = skin.LetterSpacing;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating typography resources: {ex.Message}");
            }
        }

        private void UpdateResources()
        {
            if (_currentSkin == null)
                return;

            var resources = _application.Resources;
            if (resources == null)
                return;

            UpdateBrush(resources, "PrimaryColorBrush", _currentSkin.PrimaryColor);
            UpdateBrush(resources, "SecondaryColorBrush", _currentSkin.SecondaryColor);
            UpdateBrush(resources, "AccentBlueBrush", _currentSkin.AccentColor);
            UpdateBrush(resources, "GunMetalDarkBrush", _currentSkin.PrimaryColor);
            UpdateBrush(resources, "GunMetalMediumBrush", _currentSkin.SecondaryColor);
            UpdateBrush(resources, "GunMetalLightBrush", _currentSkin.SecondaryBackground);
            UpdateBrush(resources, "BackgroundBrush", _currentSkin.PrimaryBackground);
            UpdateBrush(resources, "BackgroundLightBrush", _currentSkin.SecondaryBackground);
            var dark = new Color(_currentSkin.PrimaryBackground.A, (byte)(_currentSkin.PrimaryBackground.R * 0.8), (byte)(_currentSkin.PrimaryBackground.G * 0.8), (byte)(_currentSkin.PrimaryBackground.B * 0.8));
            UpdateBrush(resources, "BackgroundDarkBrush", dark);
            UpdateBrush(resources, "TextPrimaryBrush", _currentSkin.PrimaryTextColor);
            UpdateBrush(resources, "TextSecondaryBrush", _currentSkin.SecondaryTextColor);
            UpdateBrush(resources, "BorderBrush", _currentSkin.BorderColor);
            UpdateBrush(resources, "ErrorBrush", _currentSkin.ErrorColor);
            UpdateBrush(resources, "WarningBrush", _currentSkin.WarningColor);
            UpdateBrush(resources, "SuccessBrush", _currentSkin.SuccessColor);

            resources["DefaultFontFamily"] = _currentSkin.FontFamily;
            resources["FontSizeSmall"] = _currentSkin.FontSizeSmall;
            resources["FontSizeMedium"] = _currentSkin.FontSizeMedium;
            resources["FontSizeLarge"] = _currentSkin.FontSizeLarge;
            resources["DefaultFontWeight"] = _currentSkin.FontWeight;
            resources["BorderThickness"] = _currentSkin.BorderThickness;
            resources["CornerRadius"] = new CornerRadius(_currentSkin.BorderRadius);

            ApplyControlThemes(_currentSkin);
            ForceVisualUpdate();
        }

        private void ApplyControlThemes(Skin skin)
        {
            // Remove previously applied styles from Styles collection
            foreach (var style in _appliedControlThemes)
            {
                if (_styles.Contains(style))
                    _styles.Remove(style);
            }

            _appliedControlThemes.Clear();

            // Clear previously applied control themes from MergedDictionaries
            foreach (var controlThemeDict in _appliedControlThemeDictionaries)
            {
                _application.Resources.MergedDictionaries.Remove(controlThemeDict);
            }

            _appliedControlThemeDictionaries.Clear();
            
                // ✅ Add new ControlTheme dictionaries
                foreach (var kvp in skin.ControlThemeUris)
                {
                    Uri baseUri = new Uri($"avares://Avalonia.UIStudio.Appearance/Skins/{skin.Name}/", UriKind.RelativeOrAbsolute);

                    // Create a ResourceInclude instance, specifying the base URI and the source file
                    ResourceInclude myResourceInclude = new ResourceInclude(baseUri)
                    {
                        Source = new Uri(kvp.Value, UriKind.Relative)
                    };
                try
                {
                    _application.Resources.MergedDictionaries.Add(myResourceInclude);
                    _appliedControlThemeDictionaries.Add(myResourceInclude);
                }
                catch (Exception ex)
                {
                    var test = ex.Message;
                }
            }
            


            // ✅ Add new styles (normal StyleInclude)
            foreach (var kvp in skin.StyleUris)
            {
                if (kvp.Value != null)
                {
                    var style = new StyleInclude(new Uri("avares://Avalonia.UIStudio.Appearance/"))
                    {
                        Source = new Uri(kvp.Value)
                    };

                    _styles.Add(style);
                    _appliedControlThemes.Add(style);
                }
            }
        }


        private void UpdateBrush(IResourceDictionary dict, string key, Color color)
        {
            if (dict.TryGetValue(key, out var existingBrush) && existingBrush is SolidColorBrush brush)
                brush.Color = color;
            else
                dict[key] = new SolidColorBrush(color);
        }

        private void ForceVisualUpdate()
        {
            if (_application.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                foreach (var window in desktop.Windows)
                {
                    window.InvalidateVisual();
                    InvalidateRecursive(window);
                }
            }
        }

        private void InvalidateRecursive(Control control)
        {
            control.InvalidateVisual();

            if (control is Panel panel)
            {
                foreach (var child in panel.Children)
                    InvalidateRecursive(child);
            }
            else if (control is ContentControl cc && cc.Content is Control c)
                InvalidateRecursive(c);
            else if (control is ItemsControl ic && ic.ItemsPanelRoot is Control ip)
                InvalidateRecursive(ip);
        }

        /// <summary>
        /// Saves the name of the currently selected skin to the application settings.
        /// </summary>
        /// <param name="skinName">
        /// The name of the skin to save. If <c>null</c>, no action is performed.
        /// </param>
        /// <remarks>
        /// This method updates the skin name in the application settings and persists the changes.
        /// It is typically called after applying a new skin to ensure the selected skin is remembered
        /// across application sessions.
        /// </remarks>
        public void SaveSelectedSkin(string? skinName)
        {
            if (skinName != null)
            {
                AppSettings.Instance.Skin = skinName;
                AppSettings.Instance.Save();
            }
        }

        public string GetSkinFilePath(Skin skin)
        {
            // You may want to make this more configurable
            return $"./Skins/{skin.Name}/skin.json";
        }

        public void ReloadSkins()
        {
            _availableSkins.Clear();
            RegisterDefaultSkins();
            LoadSavedSkin();
        }

        /// <summary>
        /// Loads the previously saved skin and applies it to the application.
        /// </summary>
        /// <remarks>
        /// This method retrieves the saved skin name from the application settings and applies it if it exists
        /// in the list of available skins. If no saved skin is found or the saved skin is not available,
        /// no changes are made to the current skin.
        /// </remarks>
        /// <example>
        /// Example usage:
        /// <code>
        /// var skinManager = SkinManager.Instance;
        /// skinManager.LoadSavedSkin();
        /// </code>
        /// </example>
        public void LoadSavedSkin()
        {
            var skinName = AppSettings.Instance.Skin;
            if (!string.IsNullOrEmpty(skinName) && _availableSkins.ContainsKey(skinName))
                ApplySkin(skinName);
        }
    }
}


================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\SkinValidator.cs
================================================================================

using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services.ValidationRules;

namespace Avalonia.UIStudio.Appearance.Services
{
    /// <summary>
    /// Validates skin configurations and provides error recovery.
    /// </summary>
    public class SkinValidator
    {
        private readonly List<ISkinValidationRule> _validationRules;

        /// <summary>
        /// Initializes a new instance of the <see cref="SkinValidator"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the default validation rules for skin validation, 
        /// including checks for color contrast, font size, border consistency, naming conventions, 
        /// and accessibility compliance.
        /// </remarks>
        public SkinValidator()
        {
            _validationRules = new List<ISkinValidationRule>
            {
                new ColorContrastValidationRule(),
                new FontSizeValidationRule(),
                new BorderValidationRule(),
                new NameValidationRule(),
                new AccessibilityValidationRule()
            };
        }

        /// <summary>
        /// Validates a skin and returns validation results.
        /// </summary>
        // Update the ValidateSkin method in SkinValidator class
        public SkinValidationResult ValidateSkin(Skin skin)
        {
            var result = new SkinValidationResult();

            foreach (var rule in _validationRules)
            {
                var ruleMessages = rule.Validate(skin);
                result.ValidationMessages.AddRange(ruleMessages);
            }

            result.IsValid = result.ValidationMessages.All(v => !v.IsError);

            return result;
        }

        /// <summary>
        /// Attempts to fix validation errors automatically.
        /// </summary>
        public Skin AutoFixSkin(Skin skin)
        {
            var cloneSkin = CloneSkin(skin);

            // Fix null or invalid name
            if (string.IsNullOrWhiteSpace(cloneSkin.Name))
            {
                cloneSkin.Name = "Custom Skin";
            }

            // Ensure font sizes are within reasonable bounds
            cloneSkin.FontSizeSmall = Math.Max(8, Math.Min(20, cloneSkin.FontSizeSmall));
            cloneSkin.FontSizeMedium = Math.Max(10, Math.Min(24, cloneSkin.FontSizeMedium));
            cloneSkin.FontSizeLarge = Math.Max(12, Math.Min(32, cloneSkin.FontSizeLarge));

            // Ensure border radius is positive
            cloneSkin.BorderRadius = Math.Max(0, cloneSkin.BorderRadius);

            // Fix color contrast issues
            cloneSkin = FixColorContrast(cloneSkin);

            return cloneSkin;
        }

        private Skin CloneSkin(Skin original)
        {
            return new Skin
            {
                Name = original.Name,
                PrimaryColor = original.PrimaryColor,
                SecondaryColor = original.SecondaryColor,
                AccentColor = original.AccentColor,
                PrimaryBackground = original.PrimaryBackground,
                SecondaryBackground = original.SecondaryBackground,
                PrimaryTextColor = original.PrimaryTextColor,
                SecondaryTextColor = original.SecondaryTextColor,
                FontFamily = original.FontFamily,
                FontSizeSmall = original.FontSizeSmall,
                FontSizeMedium = original.FontSizeMedium,
                FontSizeLarge = original.FontSizeLarge,
                FontWeight = original.FontWeight,
                BorderColor = original.BorderColor,
                BorderThickness = original.BorderThickness,
                BorderRadius = original.BorderRadius,
                ErrorColor = original.ErrorColor,
                WarningColor = original.WarningColor,
                SuccessColor = original.SuccessColor
            };
        }

        private Skin FixColorContrast(Skin skin)
        {
            // Calculate contrast ratio and adjust if needed
            var primaryContrastRatio = CalculateContrastRatio(skin.PrimaryTextColor, skin.PrimaryBackground);

            if (primaryContrastRatio < 4.5) // WCAG AA minimum
            {
                // Adjust text color for better contrast
                skin.PrimaryTextColor = AdjustColorForContrast(skin.PrimaryTextColor, skin.PrimaryBackground, 4.5);
            }

            var secondaryContrastRatio = CalculateContrastRatio(skin.SecondaryTextColor, skin.SecondaryBackground);

            if (secondaryContrastRatio < 3.0) // More lenient for secondary text
            {
                skin.SecondaryTextColor =
                    AdjustColorForContrast(skin.SecondaryTextColor, skin.SecondaryBackground, 3.0);
            }

            return skin;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="foreground"></param>
        /// <param name="background"></param>
        /// <returns></returns>
        public double CalculateContrastRatio(Color foreground, Color background)
        {
            try
            {
                var fgLuminance = GetRelativeLuminance(foreground);
                var bgLuminance = GetRelativeLuminance(background);

                var lighter = Math.Max(fgLuminance, bgLuminance);
                var darker = Math.Min(fgLuminance, bgLuminance);

                return (lighter + 0.05) / (darker + 0.05);
            }
            catch (Exception)
            {
                // Return a safe default contrast ratio
                return 1.0;
            }
        }

        private double GetRelativeLuminance(Color color)
        {
            var r = GetLuminanceComponent(color.R / 255.0);
            var g = GetLuminanceComponent(color.G / 255.0);
            var b = GetLuminanceComponent(color.B / 255.0);

            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        }

        private double GetLuminanceComponent(double component)
        {
            return component <= 0.03928
                ? component / 12.92
                : Math.Pow((component + 0.055) / 1.055, 2.4);
        }

        public Color AdjustColorForContrast(Color foreground, Color background, double targetRatio)
        {
            var bgLuminance = GetRelativeLuminance(background);
            var isDarkBackground = bgLuminance < 0.5;

            // For dark backgrounds, make text lighter; for light backgrounds, make text darker
            var step = isDarkBackground ? 10 : -10;
            var adjustedColor = foreground;

            for (int i = 0; i < 25; i++) // Limit iterations to prevent infinite loop
            {
                var ratio = CalculateContrastRatio(adjustedColor, background);
                if (ratio >= targetRatio) break;

                adjustedColor = Color.FromRgb(
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.R + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.G + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.B + step))
                );
            }

            return adjustedColor;
        }
    }
   
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\AppSkin.axaml
================================================================================

<!--  Themes/AppTheme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ColorTheme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/CustomThemes.axaml" />

    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Border.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
    </ControlTheme>

    <ControlTheme x:Key="CardBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="BoxShadow" Value="0 1 3 0 #15000000" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
    </ControlTheme>

    <!--  NEW: Toolbar Container Border Theme  -->
    <ControlTheme x:Key="ToolbarContainerBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Button.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Design.PreviewWith>
        <StackPanel
            Width="400"
            Background="{DynamicResource BackgroundBrush}"
            Spacing="15">
            <!--  Primary Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Primary Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Elevated Primary"
                    Theme="{StaticResource ElevatedPrimaryButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Gradient Primary"
                    Theme="{StaticResource GradientPrimaryButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Modern Primary"
                    Theme="{StaticResource ModernPrimaryButtonTheme}" />
            </WrapPanel>

            <!--  Secondary Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Secondary Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Outlined"
                    Theme="{StaticResource OutlineButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Ghost"
                    Theme="{StaticResource GhostButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Soft"
                    Theme="{StaticResource SoftButtonTheme}" />
            </WrapPanel>

            <!--  Status Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Status Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Success"
                    Theme="{StaticResource SuccessButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Warning"
                    Theme="{StaticResource WarningButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Danger"
                    Theme="{StaticResource DangerButtonTheme}" />
            </WrapPanel>

            <!--  Specialty Buttons  -->
            <TextBlock
                Margin="0,10,0,5"
                FontWeight="Bold"
                Text="Specialty Buttons" />
            <WrapPanel>
                <Button
                    Margin="5"
                    Content="Glass"
                    Theme="{StaticResource GlassButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Neon"
                    Theme="{StaticResource NeonButtonTheme}" />
                <Button
                    Margin="5"
                    Content="Minimal"
                    Theme="{StaticResource MinimalButtonTheme}" />
            </WrapPanel>
        </StackPanel>
    </Design.PreviewWith>

    <!--  Enhanced Primary Button with Elevation  -->
    <ControlTheme x:Key="ElevatedPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #40000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Transitions>
                        <Transitions>
                            <BoxShadowsTransition Property="BoxShadow" Duration="0:0:0.2" />
                        </Transitions>
                    </Border.Transitions>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="0 4 16 0 #60000000" />
        </Style>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="0 1 4 0 #30000000" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="BoxShadow" Value="none" />
        </Style>
    </ControlTheme>

    <!--  Gradient Primary Button  -->
    <ControlTheme x:Key="GradientPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="20,10" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.2" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border BoxShadow="0 2 8 0 #4027AE60" CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,100%">
                            <GradientStop Offset="0" Color="#3498DB" />
                            <GradientStop Offset="1" Color="#2980B9" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.05)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Modern Primary Button  -->
    <ControlTheme x:Key="ModernPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="18,10" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <DoubleTransition Property="Opacity" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid>
                        <!--  Overlay for hover effect  -->
                        <Border
                            Name="PART_Overlay"
                            Background="White"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Opacity="0" />

                        <ContentPresenter
                            Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Overlay">
            <Setter Property="Opacity" Value="0.1" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Overlay">
            <Setter Property="Opacity" Value="0.2" />
        </Style>
    </ControlTheme>

    <!--  Outline Button Theme  -->
    <ControlTheme x:Key="OutlineButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <BrushTransition Property="Foreground" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  Ghost Button Theme  -->
    <ControlTheme x:Key="GhostButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        </Style>
    </ControlTheme>

    <!--  Soft Button Theme  -->
    <ControlTheme x:Key="SoftButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Success Button Theme  -->
    <ControlTheme x:Key="SuccessButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 0 30 0 #803498DB, inset 0 0 20 0 #203498DB"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Warning Button Theme  -->
    <ControlTheme x:Key="WarningButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 0 30 0 #803498DB, inset 0 0 20 0 #203498DB"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Danger Button Theme  -->
    <ControlTheme x:Key="DangerButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ErrorBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.15" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BoxShadow="0 1 4 0 #30000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="translateY(-1px)" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="translateY(1px)" />

        </Style>
    </ControlTheme>

    <!--  Glass Button Theme  -->
    <ControlTheme x:Key="GlassButtonTheme" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#40FFFFFF" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.2" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 4 0 #30000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0%,0%" EndPoint="0%,100%">
                            <GradientStop Offset="0" Color="#20FFFFFF" />
                            <GradientStop Offset="1" Color="#10FFFFFF" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />

        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
    </ControlTheme>

    <!--  Neon Button Theme  -->
    <ControlTheme x:Key="NeonButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Transitions">
            <Transitions>

                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #4027AE60"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">

            <Setter Property="Background" Value="#103498DB" />
        </Style>

        <Style Selector="^:pressed">

            <Setter Property="Background" Value="#203498DB" />
        </Style>
    </ControlTheme>

    <!--  Minimal Button Theme  -->
    <ControlTheme x:Key="MinimalButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,6" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Foreground" Duration="0:0:0.2" />
                <DoubleTransition Property="Opacity" Duration="0:0:0.15" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
    </ControlTheme>


    <!--  Primary Button Theme  -->
    <ControlTheme x:Key="PrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Secondary Button Theme  -->
    <ControlTheme x:Key="SecondaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Browse Button Theme  -->
    <ControlTheme x:Key="BrowseButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="PART_Border"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 2 0 #10000000"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    IsHitTestVisible="True">
                    <ContentPresenter
                        x:Name="PART_ContentPresenter"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        IsHitTestVisible="True" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource BackgroundDarkBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryDark}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="RenderTransform" Value="none" />
        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:.075" />
            </Transitions>
        </Setter>

        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    x:Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    RecognizesAccessKey="True" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>

        <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

        <Style Selector="^.accent">
            <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.9" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.8" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
                <Setter Property="Opacity" Value="0.6" />
            </Style>
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="ToolbarButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="15,5" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  NEW: Toolbar Primary Button Theme (for Analyze button)  -->
    <ControlTheme x:Key="ToolbarPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="20,8" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Existing default ControlTheme  -->

</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\CheckBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Design.PreviewWith>
        <Border
            Width="300"
            Padding="20"
            Background="{DynamicResource BackgroundBrush}">
            <StackPanel Spacing="10">
                <CheckBox Content="Unchecked" />
                <CheckBox Content="Checked" IsChecked="True" />
                <CheckBox
                    Content="Indeterminate"
                    IsChecked="{x:Null}"
                    IsThreeState="True" />
                <CheckBox Content="Disabled" IsEnabled="False" />
                <CheckBox
                    Content="Disabled Checked"
                    IsChecked="True"
                    IsEnabled="False" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>

    <ControlTheme x:Key="CustomCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="8,2,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid ColumnDefinitions="Auto,*">
                    <Border
                        Name="PART_Border"
                        Width="16"
                        Height="16"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource CornerRadius}">
                        <Panel>
                            <!--  Checked state checkmark  -->
                            <Path
                                Name="CheckMark"
                                Width="10"
                                Height="10"
                                Margin="0,1,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 1,5 L 4,9 L 9,1"
                                IsVisible="False"
                                Stretch="Uniform"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeLineCap="Round"
                                StrokeThickness="2" />

                            <!--  Indeterminate state indicator  -->
                            <Rectangle
                                Name="IndeterminateMark"
                                Width="9"
                                Height="9"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{DynamicResource TextPrimaryBrush}"
                                IsVisible="False"
                                RadiusX="1"
                                RadiusY="1" />
                        </Panel>
                    </Border>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}"
                        TextWrapping="Wrap" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Normal state  -->
        <Style Selector="^">
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>

        <!--  PointerOver state  -->
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Checked state  -->
        <Style Selector="^:checked /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:checked /template/ Path#CheckMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Indeterminate state  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.7" />
        </Style>

        <Style Selector="^:indeterminate /template/ Rectangle#IndeterminateMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ColorTheme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=netstandard">

    <!--  Color Brushes  -->
    <!--  Base colors  -->
    <Color x:Key="GunMetalDark">#343B48</Color>
    <Color x:Key="GunMetalMedium">#3D4654</Color>
    <Color x:Key="GunMetalLight">#464F62</Color>

    <Color x:Key="PrimaryColor">#2C313D</Color>
    <Color x:Key="SecondaryColor">#3D4654</Color>
    <Color x:Key="BackgroundLight">#F5F5F5</Color>
    <Color x:Key="BackgroundDark">#222831</Color>

    <Color x:Key="TextPrimaryLight">Pink</Color>
    <Color x:Key="TextPrimaryDark">#FFFFFF</Color>
    <Color x:Key="TextSecondaryLight">#555555</Color>
    <Color x:Key="TextSecondaryDark">#BBCDE5</Color>
    <Color x:Key="BorderLight">#CCCCCC</Color>
    <Color x:Key="BorderDark">#5D6778</Color>


    <!--  Accent Colors  -->
    <Color x:Key="AccentBlue">#2D7DD2</Color>
    <Color x:Key="AccentGreen">#52A447</Color>
    <Color x:Key="AccentRed">#E45649</Color>
    <Color x:Key="AccentOrange">#E5C07B</Color>
    <Color x:Key="AccentPurple">#C678DD</Color>
    <Color x:Key="AccentCyan">#56B6C2</Color>


    <!--  Status colors  -->
    <Color x:Key="ErrorColor">#E74C3C</Color>
    <Color x:Key="WarningColor">#F39C12</Color>
    <Color x:Key="SuccessColor">#2ECC71</Color>

    <!--  Brushes - Dynamic based on theme  -->
    <SolidColorBrush x:Key="GunMetalDarkBrush" Color="{DynamicResource GunMetalDark}" />
    <SolidColorBrush x:Key="GunMetalMediumBrush" Color="{DynamicResource GunMetalMedium}" />
    <SolidColorBrush x:Key="GunMetalLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="GunMetalAccentBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="AccentBlueBrush" Color="{DynamicResource AccentBlue}" />
    <SolidColorBrush x:Key="PrimaryColorBrush" Color="{DynamicResource PrimaryColor}" />
    <SolidColorBrush x:Key="SecondaryColorBrush" Color="{DynamicResource SecondaryColor}" />

    <!--  Dynamic Background Brushes  -->
    <SolidColorBrush x:Key="BackgroundBrush" Color="{DynamicResource BackgroundDark}" />
    <SolidColorBrush x:Key="BackgroundLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="BackgroundDarkBrush" Color="{DynamicResource BackgroundDark}" />

    <!--  Dynamic Text Brushes  -->
    <SolidColorBrush x:Key="TextPrimaryBrush" Color="{DynamicResource TextPrimaryDark}" />
    <SolidColorBrush x:Key="TextSecondaryBrush" Color="{DynamicResource TextSecondaryDark}" />

    <!--  Border Brush  -->
    <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource BorderDark}" />

    <!--  Status Brushes  -->
    <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource ErrorColor}" />
    <SolidColorBrush x:Key="WarningBrush" Color="{DynamicResource WarningColor}" />
    <SolidColorBrush x:Key="SuccessBrush" Color="{DynamicResource SuccessColor}" />

    <!--  Font Settings  -->
    <FontFamily x:Key="DefaultFontFamily">Segoe UI, San Francisco, Helvetica, Arial, sans-serif</FontFamily>
    <sys:Double x:Key="FontSizeSmall">12</sys:Double>
    <sys:Double x:Key="FontSizeNormal">14</sys:Double>
    <sys:Double x:Key="FontSizeMedium">16</sys:Double>
    <sys:Double x:Key="FontSizeLarge">24</sys:Double>
    <FontWeight x:Key="DefaultFontWeight">Normal</FontWeight>
    <FontWeight x:Key="HeadingFontWeight">SemiBold</FontWeight>

    <!--  Border Settings  -->
    <Thickness x:Key="BorderThickness">1</Thickness>
    <CornerRadius x:Key="CornerRadius">4</CornerRadius>

    <!--  Margin and Padding Presets  -->
    <Thickness x:Key="StandardMargin">16</Thickness>
    <Thickness x:Key="StandardPadding">16</Thickness>
    <Thickness x:Key="SmallMargin">8</Thickness>
    <Thickness x:Key="SmallPadding">8</Thickness>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ComboBox.Theme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <!--  ComboBox Theming Constants  -->
  <x:Double x:Key="ComboBoxPopupMaxHeight">400</x:Double>
  <Thickness x:Key="ComboBoxDropdownContentMargin">4</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderThickness">1</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderPadding">4</Thickness>
  <Thickness x:Key="ComboBoxTopHeaderMargin">0,0,0,4</Thickness>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItems">15</x:Int32>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItemsThatCanBeShownOnOneSide">7</x:Int32>
  <Thickness x:Key="ComboBoxPadding">12,5,0,7</Thickness>
  <Thickness x:Key="ComboBoxEditableTextPadding">11,5,32,6</Thickness>
  <x:Double x:Key="ComboBoxMinHeight">32</x:Double>

  <ControlTheme x:Key="{x:Type ComboBox}" TargetType="ComboBox">
    <Setter Property="Padding" Value="{DynamicResource ComboBoxPadding}" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
    <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MinHeight" Value="{DynamicResource ComboBoxMinHeight}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="PlaceholderForeground" Value="{DynamicResource TextSecondaryBrush}" />
    <Setter Property="Template">
      <ControlTemplate>
        <DataValidationErrors>
          <Grid ColumnDefinitions="*,32">
            <Border
                x:Name="Background"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                MinWidth="120"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}" />
            <Border
                x:Name="HighlightBackground"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                IsVisible="False" />
            <TextBlock
                x:Name="PlaceholderTextBlock"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Foreground="{TemplateBinding PlaceholderForeground}"
                IsVisible="{TemplateBinding SelectionBoxItem,
                                                        Converter={x:Static ObjectConverters.IsNull}}"
                Text="{TemplateBinding PlaceholderText}" />
            <ContentControl
                x:Name="ContentPresenter"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" />

            <Border
                x:Name="DropDownOverlay"
                Grid.Column="1"
                Width="30"
                Margin="0,1,1,1"
                HorizontalAlignment="Right"
                Background="Transparent"
                IsVisible="False" />

            <PathIcon
                x:Name="DropDownGlyph"
                Grid.Column="1"
                Width="12"
                Height="12"
                Margin="0,0,10,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z"
                Foreground="{DynamicResource TextPrimaryBrush}"
                IsHitTestVisible="False"
                UseLayoutRounding="False" />

            <Popup
                Name="PART_Popup"
                MinWidth="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}}"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                InheritsTransform="True"
                IsLightDismissEnabled="True"
                IsOpen="{TemplateBinding IsDropDownOpen,
                                                     Mode=TwoWay}"
                PlacementTarget="Background"
                WindowManagerAddShadowHint="False">
              <Border
                  x:Name="PopupBorder"
                  Padding="{DynamicResource ComboBoxDropdownBorderPadding}"
                  HorizontalAlignment="Stretch"
                  Background="{DynamicResource BackgroundBrush}"
                  BorderBrush="{DynamicResource BorderBrush}"
                  BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}"
                  CornerRadius="{DynamicResource CornerRadius}">
                <ScrollViewer
                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                    IsDeferredScrollingEnabled="{TemplateBinding (ScrollViewer.IsDeferredScrollingEnabled)}"
                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter
                      Name="PART_ItemsPresenter"
                      Margin="{DynamicResource ComboBoxDropdownContentMargin}"
                      ItemsPanel="{TemplateBinding ItemsPanel}" />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </DataValidationErrors>
      </ControlTemplate>
    </Setter>

    <!--  PointerOver State  -->
    <Style Selector="^:pointerover /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Pressed State  -->
    <Style Selector="^:pressed /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Error State  -->
    <Style Selector="^:error /template/ Border#Background">
      <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
    </Style>

    <!--  Focus Pressed State  -->
    <Style Selector="^:focused:pressed">
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Focused State  -->
    <Style Selector="^:focus-visible">
      <Style Selector="^ /template/ Border#HighlightBackground">
        <Setter Property="IsVisible" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Disabled State  -->
    <Style Selector="^:disabled">
      <Style Selector="^ /template/ Border#Background">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="8,4" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <ControlTemplate>
        <ContentPresenter
            Name="PART_ContentPresenter"
            Padding="{TemplateBinding Padding}"
            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Content="{TemplateBinding Content}"
            ContentTemplate="{TemplateBinding ContentTemplate}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Foreground="{TemplateBinding Foreground}" />
      </ControlTemplate>
    </Setter>

    <!--  PointerOver state  -->
    <Style Selector="^:pointerover /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Disabled state  -->
    <Style Selector="^:disabled /template/ ContentPresenter">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      <Setter Property="Opacity" Value="0.6" />
    </Style>

    <!--  Pressed state  -->
    <Style Selector="^:pressed /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Selected state  -->
    <Style Selector="^:selected">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <!--  Selected Disabled state  -->
      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <!--  Selected PointerOver state  -->
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.9" />
      </Style>
      <!--  Selected Pressed state  -->
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.8" />
      </Style>
    </Style>
  </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\CustomThemes.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <!--  Colors and Brushes  -->
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ColorTheme.axaml" />
        <!--  Controls  -->
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/Button.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/CheckBox.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ComboBox.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/Expander.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/TabControl.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/TextBox.Theme.axaml" />

        <!--  New Themes  -->
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/Window.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/Separator.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/PathIcon.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/Border.Theme.axaml" />
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/TextBlock.Theme.axaml" />


    </ResourceDictionary.MergedDictionaries>

    <!--  Default Control Mappings  -->
    <ControlTheme
        x:Key="{x:Type Window}"
        BasedOn="{StaticResource DefaultWindowTheme}"
        TargetType="Window" />
    <ControlTheme
        x:Key="{x:Type Button}"
        BasedOn="{StaticResource PrimaryButtonTheme}"
        TargetType="Button" />
    <ControlTheme
        x:Key="{x:Type CheckBox}"
        BasedOn="{StaticResource CustomCheckBoxTheme}"
        TargetType="CheckBox" />
    <ControlTheme
        x:Key="{x:Type TextBox}"
        BasedOn="{StaticResource DialogTextBoxTheme}"
        TargetType="TextBox" />

    <ControlTheme
        x:Key="{x:Type Separator}"
        BasedOn="{StaticResource HorizontalSeparatorTheme}"
        TargetType="Separator" />
    <Design.PreviewWith>
        <StackPanel Margin="25" Spacing="20">
            <Button Content="Default Button" />
            <CheckBox>Default Option</CheckBox>
            <ComboBox>
                <ComboBoxItem>Item 1</ComboBoxItem>
                <ComboBoxItem>Item 2</ComboBoxItem>
                <ComboBoxItem>Item 3</ComboBoxItem>
            </ComboBox>
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\DataGridCell.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridCell}" TargetType="DataGridCell">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="CellBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid x:Name="PART_CellRoot" ColumnDefinitions="*,Auto">

                        <!--  Current/Selected Visual  -->
                        <Rectangle
                            x:Name="CurrencyVisual"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="Transparent"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource AccentBlueBrush}"
                            StrokeThickness="2" />

                        <!--  Focus Visual  -->
                        <Grid
                            x:Name="FocusVisual"
                            Grid.Column="0"
                            IsHitTestVisible="False"
                            IsVisible="False">
                            <Rectangle
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource AccentBlueBrush}"
                                StrokeThickness="2" />
                            <Rectangle
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource BackgroundBrush}"
                                StrokeThickness="1" />
                        </Grid>

                        <!--  Content  -->
                        <ContentPresenter
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />

                        <!--  Invalid Visual  -->
                        <Rectangle
                            x:Name="InvalidVisualElement"
                            Grid.Column="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource ErrorBrush}"
                            StrokeThickness="2" />

                        <!--  Right Grid Line  -->
                        <Rectangle
                            Name="PART_RightGridLine"
                            Grid.Column="1"
                            Width="1"
                            VerticalAlignment="Stretch"
                            Fill="{DynamicResource BorderBrush}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

        <!--  Selected State  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <!--  Current Cell Visual  -->
        <Style Selector="^:current /template/ Rectangle#CurrencyVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Focus Visual  -->
        <Style Selector="^:focus /template/ Grid#FocusVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Invalid State  -->
        <Style Selector="^:invalid /template/ Rectangle#InvalidVisualElement">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Selected + Hover State  -->
        <Style Selector="^:selected:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\DataGridColumnHeader.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridColumnHeader}" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Border
                        Name="BackgroundBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- Content -->
                            <ContentPresenter
                                Name="HeaderContent"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Foreground="{TemplateBinding Foreground}" />

                            <!-- Sort Indicator -->
                            <Grid
                                Name="SortIndicator"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="4,0,8,0"
                                VerticalAlignment="Center"
                                IsVisible="False">
                                
                                <!-- Ascending Arrow -->
                                <Path
                                    Name="SortAscending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 4 L 4 0 L 8 4 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />

                                <!-- Descending Arrow -->
                                <Path
                                    Name="SortDescending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 0 L 4 4 L 8 0 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />
                            </Grid>
                        </Grid>
                    </Border>

                    <!-- Resize Grip -->
                    <Thumb
                        Name="PART_RightHeaderGripper"
                        Width="8"
                        HorizontalAlignment="Right"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        Cursor="SizeWE" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!-- Hover State -->
        <Style Selector="^:pointerover /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Pressed State -->
        <Style Selector="^:pressed /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Sort States --><!--
        <Style Selector="^[SortDirection=Ascending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Ascending] /template/ Path#SortAscending">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="^[SortDirection=Descending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Descending] /template/ Path#SortDescending">
            <Setter Property="IsVisible" Value="True" />
        </Style>-->

        <!-- Disabled State -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#HeaderContent">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\DataGridRow.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--<ControlTheme x:Key="{x:Type DataGridRow}" TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="DGR_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">

                    <SelectiveScrollingGrid>
                        <SelectiveScrollingGrid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </SelectiveScrollingGrid.ColumnDefinitions>
                        <SelectiveScrollingGrid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </SelectiveScrollingGrid.RowDefinitions>

    -->
    <!--  Row Header  -->
    <!--
                        <DataGridRowHeader
                            Name="PART_RowHeader"
                            Grid.RowSpan="2"
                            Grid.Column="0"
                            IsVisible="{Binding HeadersVisibility}" />

    -->
    <!--  Cell Presenter  -->
    <!--
                        <DataGridCellsPresenter
                            Name="PART_CellsPresenter"
                            Grid.Row="0"
                            Grid.Column="1"
                            ItemsPanel="{TemplateBinding ItemsPanel}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

    -->
    <!--  Row Details  -->
    <!--
                        <DataGridDetailsPresenter
                            Name="PART_DetailsPresenter"
                            Grid.Row="1"
                            Grid.Column="1"
                            SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGridConverters.DataGridSelectiveScrollingOrientationConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                            Visibility="{TemplateBinding DetailsVisibility}" />
                    </SelectiveScrollingGrid>
                </Border>
            </ControlTemplate>
        </Setter>

    -->
    <!--  Normal State  -->
    <!--
        <Style Selector="^">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        </Style>

    -->
    <!--  Alternating Row  -->
    <!--
        <Style Selector="^:nth-child(2n)">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  Hover State  -->
    <!--
        <Style Selector="^:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>

    -->
    <!--  Selected State  -->
    <!--
        <Style Selector="^:selected /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,1" />
        </Style>

    -->
    <!--  Selected + Hover State  -->
    <!--
        <Style Selector="^:selected:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

    -->
    <!--  Focus State  -->
    <!--
        <Style Selector="^:focus /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
        </Style>

    -->
    <!--  Invalid State  -->
    <!--
        <Style Selector="^:invalid /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

    -->
    <!--  Disabled State  -->
    <!--
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

    -->
    <!--  Editing State  -->
    <!--
        <Style Selector="^:editing /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  New Item Placeholder  -->
    <!--
        <Style Selector="^:new-item-placeholder /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,0" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
    </ControlTheme>-->

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Expander.axaml
================================================================================

<!--  Updated Expander Theme using ResumeForge Dynamic Color Resources  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ResumeForgeExpanderToggleButtonTheme" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="ToggleButtonBackground"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid x:Name="ToggleButtonGrid" ColumnDefinitions="*,Auto">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                        <Border
                            x:Name="ExpandCollapseChevronBorder"
                            Grid.Column="1"
                            Width="20"
                            Height="20"
                            Margin="8,0"
                            Background="Transparent"
                            CornerRadius="2">
                            <Path
                                x:Name="ExpandCollapseChevron"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="50%,50%"
                                Stretch="None"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeThickness="1.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Rotation animations for expand/collapse  -->
        <Style Selector="^[Tag=expanded] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <Style Selector="^[Tag=collapsed] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="0%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="0" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Background" Duration="0:0:0.2" />
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>
        <Style Selector="^:pointerover /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Stroke" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
        <Style Selector="^:disabled /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

    <!--  Direction-specific themes  -->
    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonUpTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 7 L 7 0 L 14 7" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonDownTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 14 0" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonLeftTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 7 0 L 0 7 L 7 14" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonRightTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 0 14" />
        </Style>
    </ControlTheme>

    <!--  Main Expander Theme  -->
    <ControlTheme x:Key="ResumeForgeExpanderTheme" TargetType="Expander">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="ContentTransition">
            <Setter.Value>
                <CrossFade Duration="00:00:00.25" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
                    <ToggleButton
                        x:Name="ExpanderHeader"
                        MinHeight="{TemplateBinding MinHeight}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsChecked="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}"
                        IsEnabled="{TemplateBinding IsEnabled}" />
                    <Border
                        x:Name="ExpanderContent"
                        MinHeight="{TemplateBinding MinHeight}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsVisible="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </DockPanel>
            </ControlTemplate>
        </Setter>

        <!--  Prevent render transform on pressed state  -->
        <Style Selector="^ /template/ ToggleButton#ExpanderHeader:pressed">
            <Setter Property="RenderTransform" Value="{x:Null}" />
        </Style>

        <!--  Left/Right direction alignment  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader, ^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>

        <!--  Tag setting for animation states  -->
        <Style Selector="^:expanded /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Tag" Value="expanded" />
        </Style>

        <Style Selector="^:not(:expanded) /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{Binding $parent[Expander].CornerRadius}" />
            <Setter Property="Tag" Value="collapsed" />
        </Style>

        <!--  Corner radius adjustments for expanded states  -->
        <Style Selector="^:expanded:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:up /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>
        <Style Selector="^:expanded:left /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>

        <!--  DockPanel positioning for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Right" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Bottom" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Left" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Top" />
        </Style>

        <!--  Theme assignment for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonLeftTheme}" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonUpTheme}" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonRightTheme}" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonDownTheme}" />
        </Style>

        <!--  Border thickness adjustments for different directions  -->
        <Style Selector="^:left /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="1,0,0,0" />
        </Style>
        <Style Selector="^:up /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,1,0,0" />
        </Style>
        <Style Selector="^:right /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,1,0" />
        </Style>
        <Style Selector="^:down /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,0,1" />
        </Style>
    </ControlTheme>

    <Design.PreviewWith>
        <Border Padding="20">
            <StackPanel
                Width="350"
                Orientation="Vertical"
                Spacing="20">
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Up"
                    Theme="{StaticResource SimpleExpanderToggleButtonTheme}">
                    <Expander.Header>
                        <Grid ColumnDefinitions="*, Auto">
                            <TextBlock Grid.Column="0" Text="Expand" />
                            <TextBlock Grid.Column="1" Text="Up" />
                        </Grid>
                    </Expander.Header>
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Down"
                    Header="Expand Down">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Left"
                    Header="Expand Left">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Right"
                    Header="Expand Right">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\OtherControlThemes.axaml
================================================================================

<!--  Themes/MissingControlThemes.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  TreeView Theme  -->
    <ControlTheme x:Key="{x:Type TreeView}" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  TreeViewItem Theme  -->
    <ControlTheme x:Key="{x:Type TreeViewItem}" TargetType="TreeViewItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Template">
            <ControlTemplate>
                <StackPanel>
                    <Border
                        Name="PART_Header"
                        MinHeight="24"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid ColumnDefinitions="Auto,Auto,*">
                            <Border Name="PART_Indent" Grid.Column="0" />
                            <ToggleButton
                                Name="PART_ExpandCollapseChevron"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="2,0"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="False"
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                <Path
                                    Width="10"
                                    Height="10"
                                    Data="M 0 0 L 4 4 L 0 8 Z"
                                    Fill="{DynamicResource TextPrimaryBrush}"
                                    RenderTransformOrigin="50%,50%"
                                    Stretch="Uniform">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="90" />
                                    </Path.RenderTransform>
                                </Path>
                            </ToggleButton>
                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="2"
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />
                        </Grid>
                    </Border>
                    <ItemsPresenter
                        Name="PART_ItemsPresenter"
                        IsVisible="{TemplateBinding IsExpanded}"
                        ItemsPanel="{TemplateBinding ItemsPanel}" />
                </StackPanel>
            </ControlTemplate>
        </Setter>

        <!--  TreeViewItem States  -->
        <Style Selector="^:expanded /template/ RotateTransform#ExpandCollapseChevronRotateTransform">
            <Setter Property="Angle" Value="90" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  ListBox Theme  -->
    <ControlTheme x:Key="{x:Type ListBox}" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ListBoxItem Theme  -->
    <ControlTheme x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="2" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  Menu Theme  -->
    <ControlTheme x:Key="{x:Type Menu}" TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  MenuItem Theme  -->
    <ControlTheme x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Name="PART_IconPresenter"
                                Grid.Column="0"
                                Width="16"
                                Height="16"
                                Margin="0,0,8,0"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Icon}" />

                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="1"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />

                            <TextBlock
                                Name="PART_InputGestureText"
                                Grid.Column="2"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                FontSize="11"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="{TemplateBinding InputGesture}" />

                            <Path
                                Name="PART_ChevronPath"
                                Grid.Column="3"
                                Width="8"
                                Height="8"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                Data="M 0 0 L 4 4 L 0 8 Z"
                                Fill="{DynamicResource TextSecondaryBrush}"
                                IsVisible="False" />
                        </Grid>
                    </Border>

                    <Popup
                        Name="PART_Popup"
                        HorizontalOffset="-1"
                        IsLightDismissEnabled="False"
                        IsOpen="{TemplateBinding IsSubMenuOpen,
                                                 Mode=TwoWay}"
                        OverlayInputPassThroughElement="{Binding $parent[Menu]}"
                        Placement="RightEdgeAlignedTop"
                        VerticalOffset="-1">
                        <Border
                            MinWidth="120"
                            Padding="4"
                            Background="{DynamicResource BackgroundBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="4">
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  MenuItem States  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:separator">
            <Setter Property="Template">
                <ControlTemplate>
                    <Separator Margin="8,2" />
                </ControlTemplate>
            </Setter>
        </Style>
        <Style Selector="^:selected /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:submenuopen /template/ Path#PART_ChevronPath">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>

    <!--  ProgressBar Theme  -->
    <ControlTheme x:Key="{x:Type ProgressBar}" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Track"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid ClipToBounds="True">
                        <Border
                            Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            Background="{TemplateBinding Foreground}"
                            CornerRadius="{TemplateBinding CornerRadius}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Indeterminate state animation  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Indicator">
            <Style.Animations>
                <Animation IterationCount="Infinite" Duration="0:0:2">
                    <KeyFrame Cue="0%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationStartPosition}" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationEndPosition}" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
    </ControlTheme>

    <!--  Slider Theme  -->
    <ControlTheme x:Key="{x:Type Slider}" TargetType="Slider">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Grid.Styles>
                        <Style Selector="Track">
                            <Setter Property="Minimum" Value="{TemplateBinding Minimum}" />
                            <Setter Property="Maximum" Value="{TemplateBinding Maximum}" />
                            <Setter Property="Value" Value="{TemplateBinding Value, Mode=TwoWay}" />
                        </Style>
                    </Grid.Styles>

                    <!--  Horizontal Slider  -->
                    <Border
                        Name="HorizontalTemplate"
                        MinHeight="20"
                        Background="Transparent">
                        <Grid RowDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Row="1"
                                Orientation="Horizontal">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <!--  Vertical Slider  -->
                    <Border
                        Name="VerticalTemplate"
                        MinWidth="20"
                        Background="Transparent">
                        <Grid ColumnDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Column="1"
                                Orientation="Vertical">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Orientation-specific visibility  -->
        <Style Selector="^:horizontal /template/ Border#VerticalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>
        <Style Selector="^:vertical /template/ Border#HorizontalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  DatePicker Theme  -->
    <ControlTheme x:Key="{x:Type DatePicker}" TargetType="DatePicker">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Grid ColumnDefinitions="*,Auto">
                        <Border
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Button
                            Name="PART_TextButton"
                            Grid.Column="0"
                            Padding="8,4"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}" />

                        <Button
                            Name="PART_CalendarButton"
                            Grid.Column="1"
                            Width="30"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}">
                            <Path
                                Width="16"
                                Height="16"
                                Data="M19,3H18V1H16V3H8V1H6V3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V8H19M7,10V12H9V10M11,10V12H13V10M15,10V12H17V10"
                                Fill="{DynamicResource AccentBlueBrush}"
                                Stretch="Uniform" />
                        </Button>

                        <Popup
                            Name="PART_Popup"
                            Grid.Column="0"
                            InheritsTransform="True"
                            IsLightDismissEnabled="True"
                            PlacementTarget="{TemplateBinding}">
                            <Border
                                Padding="8"
                                Background="{DynamicResource BackgroundBrush}"
                                BorderBrush="{DynamicResource BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="4">
                                <Calendar Name="PART_Calendar" />
                            </Border>
                        </Popup>
                    </Grid>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  States  -->
        <Style Selector="^:pointerover /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:focus /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\PathIcon.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
    </ControlTheme>

    <ControlTheme x:Key="SmallPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </ControlTheme>

    <ControlTheme x:Key="LargePathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningIconTheme" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Fill" Value="{DynamicResource WarningBrush}" />
        <Setter Property="Stretch" Value="Uniform" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Separator.Theme.axaml
================================================================================

<!-- Separator.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTheme x:Key="HorizontalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,8,0,8" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </ControlTheme>
    
    <ControlTheme x:Key="VerticalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Margin" Value="8,0,8,0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </ControlTheme>
    
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\TabControl.Theme.axaml
================================================================================


<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  ====================== TAB CONTROL THEME ======================  -->
    <ControlTheme x:Key="CustomTabControlTheme" TargetType="TabControl">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{DynamicResource CornerRadius}">
                    <DockPanel>
                        <Border
                            Padding="4,8,4,0"
                            Background="{DynamicResource GunMetalDarkBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0"
                            BoxShadow="0 1 5 0 #20000000"
                            CornerRadius="{DynamicResource CornerRadius}"
                            DockPanel.Dock="Top">
                            <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                        </Border>
                        <ContentPresenter
                            Name="PART_SelectedContentHost"
                            Margin="0,0,0,0"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectedContent}"
                            ContentTemplate="{TemplateBinding SelectedContentTemplate}" />
                    </DockPanel>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ====================== TAB ITEM THEME ======================  -->
    <ControlTheme x:Key="CustomTabItemTheme" TargetType="TabItem">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Padding" Value="16,10" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter
                            Name="PART_ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}" />
                    </Border>
                    <Border
                        Name="PART_SelectedIndicator"
                        Height="3"
                        Margin="0"
                        VerticalAlignment="Bottom"
                        Background="{DynamicResource AccentBlueBrush}"
                        CornerRadius="1.5"
                        IsVisible="False" />
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  Selected state  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_SelectedIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Pointer over (hover) state  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>

        <!--  Selected + hover state  -->
        <Style Selector="^:selected:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
        </Style>

        <!--  Pressed state  -->
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.5" />
        </Style>
    </ControlTheme>

    <!--  Add this theme to set the items panel for the tab control  -->
    <ItemsPanelTemplate x:Key="TabItemsPanelTemplate">
        <WrapPanel Orientation="Horizontal" />
    </ItemsPanelTemplate>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\TextBlock.Theme.axaml
================================================================================

<!--  TextBlock.Theme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="CaptionTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeSmall}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatsTitleTheme" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
    </ControlTheme>
    <ControlTheme x:Key="MediumTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme
        x:Key="LabelTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5,0" />
    </ControlTheme>
    <ControlTheme
        x:Key="SubheaderTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
    </ControlTheme>
    <ControlTheme x:Key="TextBlockLargePrimaryBrush" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
    <ControlTheme
        x:Key="StatsValueTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Margin" Value="0,5,0,5" />
    </ControlTheme>
    <ControlTheme
        x:Key="SectionHeaderTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Margin" Value="0,0,0,5" />
    </ControlTheme>
    <ControlTheme x:Key="HeaderTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="TitleBarTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="StatusBarMainTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <!--  Design Preview for TextBlock Themes  -->
    <Design.PreviewWith>
        <StackPanel Spacing="8">
            <TextBlock Text="Caption TextBlock Skin" Theme="{StaticResource CaptionTextBlockTheme}" />
            <TextBlock Text="Stats Title Skin" Theme="{StaticResource StatsTitleTheme}" />
            <TextBlock Text="Medium TextBlock" Theme="{StaticResource MediumTextBlock}" />
            <TextBlock Text="Label TextBlock Skin" Theme="{StaticResource LabelTextBlockTheme}" />
            <TextBlock Text="Subheader TextBlock Skin" Theme="{StaticResource SubheaderTextBlockTheme}" />
            <TextBlock Text="TextBlock Large Primary Brush" Theme="{StaticResource TextBlockLargePrimaryBrush}" />
            <TextBlock Text="Stats Value Skin" Theme="{StaticResource StatsValueTheme}" />
            <TextBlock Text="Section Header Skin" Theme="{StaticResource SectionHeaderTheme}" />
            <TextBlock Text="Header TextBlock Skin" Theme="{StaticResource HeaderTextBlockTheme}" />
            <TextBlock Text="Title Bar TextBlock Skin" Theme="{StaticResource TitleBarTextBlockTheme}" />
            <TextBlock Text="StatusBar Main Text" Theme="{StaticResource StatusBarMainTextTheme}" />
            <TextBlock Text="StatusBar Warning Text" Theme="{StaticResource StatusBarWarningTextTheme}" />

        </StackPanel>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\TextBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--  TextBox Theme with Static TextPresenter Properties  -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ColorTheme.axaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTheme x:Key="DialogTextBoxTheme" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Padding" Value="5,5" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                <DockPanel
                                    x:Name="PART_InnerDockPanel"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="1"
                                    Margin="{TemplateBinding Padding}">
                                    <TextBlock
                                        Name="PART_FloatingWatermark"
                                        DockPanel.Dock="Top"
                                        Foreground="{DynamicResource AccentBlueBrush}"
                                        IsVisible="False"
                                        Text="{TemplateBinding Watermark}" />
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                        BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Foreground="{DynamicResource TextSecondaryBrush}"
                                                Opacity="0.6"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                LetterSpacing="{TemplateBinding LetterSpacing}"
                                                LineHeight="{TemplateBinding LineHeight}"
                                                PasswordChar="{TemplateBinding PasswordChar}"
                                                RevealPassword="{TemplateBinding RevealPassword}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                        <ScrollViewer.Styles>
                                            <Style Selector="ScrollContentPresenter#PART_ContentPresenter">
                                                <Setter Property="Cursor" Value="IBeam" />
                                            </Style>
                                        </ScrollViewer.Styles>
                                    </ScrollViewer>
                                </DockPanel>
                                <ContentPresenter
                                    Grid.Column="2"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark, ^ /template/ TextBlock#PART_FloatingWatermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="Opacity" Value="0.9" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            </Style>
        </Style>

        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
        </Style>

        <Style Selector="^ /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="Cursor" Value="IBeam" />
        </Style>

        <Style Selector="^[UseFloatingWatermark=true]:not(:empty) /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="CustomTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 0 #15000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid>
                        <TextBlock
                            x:Name="PART_Watermark"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Foreground="#99FFFFFF"
                            IsVisible="{TemplateBinding Text,
                                                        Converter={x:Static StringConverters.IsNullOrEmpty}}"
                            Text="{TemplateBinding Watermark}" />

                        <ScrollViewer
                            x:Name="PART_ScrollViewer"
                            HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                            <Panel>
                                <TextPresenter
                                    x:Name="PART_TextPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    CaretBrush="{DynamicResource TextPrimaryBrush}"
                                    CaretIndex="{TemplateBinding CaretIndex}"
                                    Foreground="{StaticResource TextPrimaryBrush}"
                                    PasswordChar="{TemplateBinding PasswordChar}"
                                    RevealPassword="{TemplateBinding RevealPassword}"
                                    SelectionBrush="{DynamicResource AccentBlueBrush}"
                                    SelectionEnd="{TemplateBinding SelectionEnd}"
                                    SelectionForegroundBrush="{DynamicResource TextPrimaryBrush}"
                                    SelectionStart="{TemplateBinding SelectionStart}"
                                    Text="{TemplateBinding Text,
                                                           Mode=TwoWay}"
                                    TextAlignment="{TemplateBinding TextAlignment}"
                                    TextWrapping="{TemplateBinding TextWrapping}" />
                            </Panel>
                        </ScrollViewer>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>
        <Style Selector="^:focus">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Background="{DynamicResource BackgroundLightBrush}">
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource CustomTextBoxTheme}" />
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource DialogTextBoxTheme}" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ValidationDecorator.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:viewModels="clr-namespace:Avalonia.UIStudio.Appearance.ViewModels">

    <converters:BoolToBorderBrushConverter x:Key="BoolToBorderBrushConverter" />
    <Design.PreviewWith>
        <StackPanel
            Width="300"
            Margin="20"
            Background="White">
            <controls:ValidationDecorator Margin="20" Theme="{StaticResource ValidationDecoratorAlternate}">

                <StackPanel>
                    <TextBlock Foreground="Black" Text="Hello Stuff" />
                </StackPanel>

            </controls:ValidationDecorator>
            <Decorator>
                <TextBlock Foreground="Black" Text="Hi Decorator People" />
            </Decorator>
        </StackPanel>
    </Design.PreviewWith>

    <!--<ControlTheme x:Key="ValidationDecoratorAlternate" TargetType="controls:ValidationDecorator">
        <Setter Property="Child" Value="{Binding Content}" />
        <Setter Property="Template">
            <ControlTemplate x:DataType="controls:ValidationDecorator">
                <Border
                    Margin="0,0,0,4"
                    Padding="0"
                    BorderBrush="{Binding ValidatedProperty.OriginalMessage.IsError, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToBorderBrushConverter}}"
                    BorderThickness="1"
                    CornerRadius="4">
                    <StackPanel Spacing="2">
    -->
    <!--  Content  -->
    <!--
                        <ContentPresenter Name="PART_ContentPresenter" Content="{Binding Child}" />
    -->
    <!--  Error Message  -->
    <!--
                        <TextBlock
                            FontSize="11"
                            Foreground="Red"
                            IsVisible="{Binding !ValidatedProperty.IsValid, RelativeSource={RelativeSource TemplatedParent}}"
                            Text="{Binding ValidatedProperty.Message, RelativeSource={RelativeSource TemplatedParent}}">
                            <TextBlock.Transitions>
                                <Transitions>
                                    <DoubleTransition Property="Opacity" Duration="0:0:0.2" />
                                </Transitions>
                            </TextBlock.Transitions>
                        </TextBlock>
    -->
    <!--  Suggested Value  -->
    <!--
                        <TextBlock
                            FontSize="10"
                            Foreground="Orange"
                            IsVisible="{Binding ValidatedProperty.SuggestedValue, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static ObjectConverters.IsNotNull}}"
                            Text="{Binding ValidatedProperty.SuggestedValue, RelativeSource={RelativeSource TemplatedParent}, StringFormat='Suggested: {0}'}">
                            <TextBlock.Transitions>
                                <Transitions>
                                    <DoubleTransition Property="Opacity" Duration="0:0:0.2" />
                                </Transitions>
                            </TextBlock.Transitions>
                        </TextBlock>
                    </StackPanel>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>-->


</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Window.Theme.axaml
================================================================================

<!-- Window.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Window Theme -->
    <ControlTheme x:Key="DefaultWindowTheme" TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>

    <!-- Dialog Window Theme -->
    <ControlTheme x:Key="DialogWindowTheme" BasedOn="{StaticResource DefaultWindowTheme}" TargetType="Window">
        <Setter Property="SystemDecorations" Value="Full" />
        <Setter Property="WindowStartupLocation" Value="CenterScreen" />
        <Setter Property="SizeToContent" Value="Height" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MaxWidth" Value="600" />
        <Setter Property="Padding" Value="8" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\ViewModels\EditableSkinViewModel.cs
================================================================================

using System.Reflection.Metadata;
using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Model;
using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.ViewModels;

public class EditableSkinViewModel : ReactiveObject
{
    public Skin Skin { get; set; }
    
    public EditableSkinViewModel(Skin skin)
    {
        Skin = skin;
        Name = new ValidatableProperty<string>(nameof(Name), skin.Name);
        Description = new ValidatableProperty<string>(nameof(Description), skin.Description);

        PrimaryColor = new ValidatableProperty<Color>(nameof(PrimaryColor), skin.PrimaryColor);
        SecondaryColor = new ValidatableProperty<Color>(nameof(SecondaryColor), skin.SecondaryColor);
        PrimaryBackground = new ValidatableProperty<Color>(nameof(PrimaryBackground), skin.PrimaryBackground);
        SecondaryBackground = new ValidatableProperty<Color>(nameof(SecondaryBackground), skin.SecondaryBackground);
            
        AccentColor = new ValidatableProperty<Color>(nameof(AccentColor), skin.AccentColor);
        PrimaryTextColor = new ValidatableProperty<Color>(nameof(PrimaryTextColor), skin.PrimaryTextColor);
        SecondaryTextColor = new ValidatableProperty<Color>(nameof(SecondaryTextColor), skin.SecondaryTextColor);

        FontFamily = new ValidatableProperty<string>(nameof(FontFamily), skin.FontFamily.Name);
        
        
        FontSizeSmall = new ValidatableProperty<double>(nameof(FontSizeSmall), skin.FontSizeSmall);
        FontSizeMedium = new ValidatableProperty<double>(nameof(FontSizeMedium), skin.FontSizeMedium);
        FontSizeLarge = new ValidatableProperty<double>(nameof(FontSizeLarge), skin.FontSizeLarge);

        BorderRadius = new ValidatableProperty<double>(nameof(BorderRadius), skin.BorderRadius);
        BorderThickness = new ValidatableProperty<Thickness>(nameof(BorderThickness), skin.BorderThickness);
        BorderColor = new ValidatableProperty<Color>(nameof(BorderColor), skin.BorderColor);

        SuccessColor = new ValidatableProperty<Color>(nameof(SuccessColor), skin.SuccessColor);
        WarningColor = new ValidatableProperty<Color>(nameof(WarningColor), skin.WarningColor);
        ErrorColor = new ValidatableProperty<Color>(nameof(ErrorColor), skin.ErrorColor);
    }

    /// <summary>
    /// Pushes edited ValidatableProperty values back into Skin model.
    /// Call this before saving or applying.
    /// </summary>
    public void MapBackToSkin()
    {
        Skin.Name = Name.Value;
        Skin.Description = Description.Value;

        Skin.PrimaryColor = PrimaryColor.Value;
        Skin.SecondaryColor = SecondaryColor.Value;
        Skin.PrimaryBackground = PrimaryBackground.Value;
        Skin.SecondaryBackground = SecondaryBackground.Value;
        Skin.AccentColor = AccentColor.Value;
        Skin.PrimaryTextColor = PrimaryTextColor.Value;
        Skin.SecondaryTextColor = SecondaryTextColor.Value;

        Skin.FontFamily = new FontFamily(FontFamily.Value);
        Skin.FontSizeSmall = FontSizeSmall.Value;
        Skin.FontSizeMedium = FontSizeMedium.Value;
        Skin.FontSizeLarge = FontSizeLarge.Value;

        Skin.BorderRadius = BorderRadius.Value;
        Skin.BorderThickness = BorderThickness.Value;
        Skin.BorderColor = BorderColor.Value;

        Skin.SuccessColor = SuccessColor.Value;
        Skin.WarningColor = WarningColor.Value;
        Skin.ErrorColor = ErrorColor.Value;
    }


    public ValidatableProperty<string> Name { get; set; }
    public ValidatableProperty<string> Description { get; set; }

    public ValidatableProperty<Color> PrimaryColor { get; set; }
    public ValidatableProperty<Color> SecondaryColor { get; set; }
    public ValidatableProperty<Color> PrimaryBackground { get; set; }
    public ValidatableProperty<Color> SecondaryBackground { get; set; }
    public ValidatableProperty<Color> AccentColor { get; set; }
    public ValidatableProperty<Color> PrimaryTextColor { get; set; }
    public ValidatableProperty<Color> SecondaryTextColor { get; set; }
    public ValidatableProperty<string> FontFamily { get; set; }
    public ValidatableProperty<string> HeaderFontFamily { get; set; }
    public ValidatableProperty<string> BodyFontFamily { get; set; }
    public ValidatableProperty<string> MonospaceFontFamily { get; set; }
    public ValidatableProperty<double> FontSizeSmall { get; set; }
    public ValidatableProperty<double> FontSizeMedium { get; set; }
    public ValidatableProperty<double> FontSizeLarge { get; set; }

    public ValidatableProperty<double> BorderRadius { get; set; }
    public ValidatableProperty<Thickness> BorderThickness { get; set; }

    public ValidatableProperty<Color> BorderColor { get; set; }

    public ValidatableProperty<Color> SuccessColor { get; set; }
    public ValidatableProperty<Color> WarningColor { get; set; }
    public ValidatableProperty<Color> ErrorColor { get; set; }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\ViewModels\QuickSkinSwitcherViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.ViewModels
{
    /// <summary>
    /// 
    /// </summary>
    public class QuickSkinSwitcherViewModel : ViewModelBase, IQuickSkinSwitcherViewModel
    {
        private readonly ILogger _logger;
        private readonly ISkinManager _skinManager;
        private SkinSummaryInfo? _selectedSkin;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSkinSwitcherViewModel"/> class
        /// with a default logger instance.
        /// </summary>
        public QuickSkinSwitcherViewModel(ISkinManager skinManager) : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance, skinManager)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSkinSwitcherViewModel"/> class
        /// with the specified logger instance.
        /// </summary>
        /// <param name="logger">
        /// An instance of <see cref="ILogger"/> used for logging operations within the view model.
        /// </param>
        /// <param name="skinManager"></param>
        public QuickSkinSwitcherViewModel(ILogger logger, ISkinManager skinManager)
        {
            _logger = logger;
            _skinManager = skinManager;
            AvailableSkins = new ObservableCollection<SkinSummaryInfo>();

            LoadAvailableSkins();
            LoadCurrentSkin();

            // Subscribe to skin manager changes to keep in sync
            skinManager.SkinChanged += OnSkinChanged;
        }

        /// <summary>
        /// Gets the collection of available skins that can be selected and applied
        /// within the application.
        /// </summary>
        /// <remarks>
        /// This property is populated by the <see cref="LoadAvailableSkins"/> method,
        /// which retrieves the skins from the <see cref="SkinManager"/>. The collection
        /// is updated dynamically to reflect the available skins.
        /// </remarks>
        public ObservableCollection<SkinSummaryInfo> AvailableSkins { get; }

        /// <summary>
        /// Gets or sets the currently selected skin.
        /// </summary>
        /// <remarks>
        /// When a new skin is selected, the corresponding skin is applied automatically.
        /// The selected skin is synchronized with the <see cref="AvailableSkins"/> collection.
        /// </remarks>
        public SkinSummaryInfo? SelectedSkin
        {
            get => _selectedSkin;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedSkin, value) != null)
                {
                    ApplySkin(value);
                }
            }
        }

        private void LoadAvailableSkins()
        {
            try
            {
                
                var skinNames = _skinManager.GetAvailableSkinNames();

                AvailableSkins.Clear();

                foreach (var skinName in skinNames)
                {
                    var skin = _skinManager.GetSkin(skinName);
                    if (skin != null)
                    {
                        var skinSummaryInfo = new SkinSummaryInfo
                        {
                            Name = skinName,
                            Description = GetSkinDescription(skinName),
                            PreviewColor = new SolidColorBrush(skin.AccentColor)
                        };
                        AvailableSkins.Add(skinSummaryInfo);
                    }
                }

                _logger.LogDebug("Loaded {ThemeCount} themes for quick switcher", AvailableSkins.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load skins for quick switcher");
            }
        }

        private void LoadCurrentSkin()
        {
            try
            {
                var currentSkin = _skinManager.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    var currentSkinItem = AvailableSkins.FirstOrDefault(t => t.Name == currentSkin.Name);
                    if (currentSkinItem != null)
                    {
                        // Set without triggering the setter to avoid recursive application
                        _selectedSkin = currentSkinItem;
                        this.RaisePropertyChanged(nameof(SelectedSkin));
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current skin for quick switcher");
            }
        }

        private void ApplySkin(SkinSummaryInfo? skinInfo)
        {
            try
            {
                if (skinInfo != null)
                {
                    _skinManager.ApplySkin(skinInfo.Name);
                    _logger.LogInformation("Quick skin switch to: {ThemeName}", skinInfo.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply skin via quick switcher: {ThemeName}", skinInfo?.Name);
            }
        }

        private void OnSkinChanged(object? sender, EventArgs e)
        {
            // Update selected skin when skin changes externally
            try
            {
                LoadCurrentSkin();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to update quick switcher after skin change");
            }
        }

        private static string GetSkinDescription(string skinName)
        {
            return skinName switch
            {
                "Dark" => "Professional dark skin",
                "Light" => "Clean light skin",
                "Ocean Blue" => "Deep blue ocean skin",
                "Forest Green" => "Nature-inspired green",
                "Purple Haze" => "Rich purple skin",
                "High Contrast" => "Maximum contrast",
                "Cyberpunk" => "Futuristic neon skin",
                _ => "Custom skin"
            };
        }

        /// <summary>
        /// Releases the resources used by the <see cref="QuickSkinSwitcherViewModel"/> class.
        /// </summary>
        /// <param name="disposing">
        /// A value indicating whether the method is being called explicitly to release managed resources.
        /// If <c>true</c>, managed resources are released; otherwise, only unmanaged resources are released.
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _skinManager.SkinChanged -= OnSkinChanged;
            }
            base.Dispose(disposing);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\ViewModels\SkinSettingsViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using System.Reactive;
using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;
using Avalonia.UIStudio.Appearance.Services;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.ViewModels
{
    public class SkinSettingsViewModel : ViewModelBase
    {
        private readonly ILogger _logger;
        private readonly ISkinManager _skinManager;
        private readonly ISkinImportExportService _skinImportExportService;
        private readonly SkinValidator _skinValidator = new();
        private SkinSummaryInfo? _selectedSkin;
        private EditableSkinViewModel? _editableSkin;
        private SkinValidationResult? _validationResult;
        private bool _isSubscribedToSkinChanged;
        private bool _isApplyingSkin = false;

        private readonly Dictionary<string, ValidatedProperty> _validatedProperties = new();

        private bool _isEditMode;
        private Color _validatedPrimaryColor;

        //public SkinSettingsViewModel() : this(
        //    Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance, SkinManager.Instance)
        //{
        //}

        public SkinSettingsViewModel(ILogger<SkinSettingsViewModel> logger, ISkinManager skinManager, ISkinImportExportService skinImportExportService)
        {
            _logger = logger;
            _skinManager = skinManager;
            _skinImportExportService = skinImportExportService;
            AvailableSkins = new ObservableCollection<SkinSummaryInfo>();
            ApplySkinCommand = ReactiveCommand.Create(ApplySkin);
            ApplyChangesCommand = ReactiveCommand.Create(SaveChanges);
            _skinManager.SkinChanged += _skinManager_SkinChanged;
            _isSubscribedToSkinChanged = true;
            LoadAvailableSkins();
            LoadCurrentSkin();
        }

        private void _skinManager_SkinChanged(object? sender, EventArgs e)
        {
            if (_isApplyingSkin)
            {
                // Skip handling SkinChanged caused by our own ApplySkin
                return;
            }

            _logger.LogInformation("SkinChanged detected. Reloading EditableSkin.");
            LoadEditableSkin();
            ValidateSkin();
        }

        public ObservableCollection<SkinSummaryInfo> AvailableSkins { get; }

        public ReactiveCommand<Unit, Unit> ApplySkinCommand { get; }
        public ReactiveCommand<Unit, Unit> ApplyChangesCommand { get; }

        public SkinSummaryInfo? SelectedSkin
        {
            get => _selectedSkin;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedSkin, value) != null)
                {
                    if (value != null && !_isApplyingSkin)
                    {
                        _isApplyingSkin = true;

                        _skinManager.ApplySkin(value.Name);
                        _logger.LogInformation("Skin changed to: {ThemeName}", value.Name);

                        LoadEditableSkin();

                        _isApplyingSkin = false;
                    }
                }

            }
        }

        public EditableSkinViewModel? EditableSkin
        {
            get => _editableSkin;
            private set
            {
                if (this.RaiseAndSetIfChanged(ref _editableSkin, value) != null)
                {
                    AttachPropertyChangedHandler();
                    ValidateSkin();
                }
            }
        }

        // Renamed and fixed: ValidatedProperties is a stable dictionary
        public Dictionary<string, ValidatedProperty> ValidatedProperties => _validatedProperties;

        // Added: indexer so you can use {Binding [FontSizeLarge]} in XAML
        public ValidatedProperty? this[string propertyName]
        {
            get
            {
                _validatedProperties.TryGetValue(propertyName, out var vp);
                return vp;
            }
        }

        public SkinValidationResult? ValidationResult
        {
            get => _validationResult;
            private set
            {
                this.RaiseAndSetIfChanged(ref _validationResult, value);

                // Clear and repopulate ValidatedProperties dictionary
                _validatedProperties.Clear();

                if (ValidationResult != null)
                {
                    foreach (var result in ValidationResult.ValidationMessages)
                    {
                        foreach (var prop in result.InvolvedProperties)
                        {
                            ValidatedProperty add = new ValidatedProperty
                            {
                                OriginalMessage = result,
                                Message = result.Message,
                                IsValid = !result.IsError,
                                Name = prop
                            };

                            if (result.SuggestedValues.TryGetValue(prop, out var suggestedValue))
                            {
                                add.SuggestedValue = suggestedValue;
                            }

                            _validatedProperties[prop] = add;
                        }
                    }
                }

                // Notify UI that dictionary contents changed
                this.RaisePropertyChanged(nameof(ValidatedProperties));
                this.RaisePropertyChanged(nameof(Errors));
                this.RaisePropertyChanged(nameof(Warnings));
            }
        }

        public List<string> Errors => ValidationResult?.Errors ?? new List<string>();
        public List<string> Warnings => ValidationResult?.Warnings ?? new List<string>();

        public bool IsEditMode
        {
            get => _isEditMode;
            set => this.RaiseAndSetIfChanged(ref _isEditMode, value);
        }

        public void ResetToDefault()
        {
            try
            {
                var defaultSkin = AvailableSkins.FirstOrDefault(t => t.Name == "Dark");
                if (defaultSkin != null)
                {
                    SelectedSkin = defaultSkin;
                    _logger.LogInformation("Reset to default skin: Dark");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to reset to default skin");
            }
        }

        private void LoadAvailableSkins()
        {
            try
            {
                
                var skinNames = _skinManager?.GetAvailableSkinNames();

                AvailableSkins.Clear();

                if (skinNames != null)
                {
                    foreach (var skinName in skinNames)
                    {
                        var skin = _skinManager?.GetSkin(skinName);
                        if (skin != null)
                        {
                            var skinInfo = new SkinSummaryInfo
                            {
                                Name = skinName,
                                Description = GetSkinDescription(skinName),
                                PreviewColor = new SolidColorBrush(skin.AccentColor)
                            };
                            AvailableSkins.Add(skinInfo);
                        }
                    }
                }

                _logger.LogInformation("Loaded {ThemeCount} available skins", AvailableSkins.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load available skins");
            }
        }

        private void LoadCurrentSkin()
        {
            try
            {
                var currentSkin = _skinManager.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    SelectedSkin = AvailableSkins.FirstOrDefault(t => t.Name == currentSkin.Name);
                }

                SelectedSkin ??= AvailableSkins.FirstOrDefault(t => t.Name == "Dark");

                LoadEditableSkin();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current skin");
            }
        }

        private void LoadEditableSkin()
        {
            var currentSkin = _skinManager.CurrentSkin;
            if (currentSkin != null)
            {
                EditableSkin = new EditableSkinViewModel(CloneSkin(currentSkin));
            }
        }

        private void ApplySkin()
        {
            try
            {
                if (SelectedSkin != null && !_isApplyingSkin)
                {
                    _isApplyingSkin = true;

                    _skinManager.ApplySkin(SelectedSkin.Name);
                    SkinManager.Instance.ApplySkin(SelectedSkin.Name);
                    _logger.LogInformation("Applied skin: {ThemeName}", SelectedSkin.Name);

                    LoadEditableSkin();

                    _isApplyingSkin = false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply skin: {ThemeName}", SelectedSkin?.Name);
                _isApplyingSkin = false;  // Ensure flag is reset even on exception
            }
        }

        private async void SaveChanges()
        {
            try
            {
                if (EditableSkin?.Skin != null)
                {
                    // 1️⃣ First: push ValidatableProperty values back to Skin
                    EditableSkin.MapBackToSkin();
                    string userOverridePath = $"./Skins/UserOverrides/{EditableSkin.Skin.Name}/skin.json";
                    Directory.CreateDirectory(Path.GetDirectoryName(userOverridePath)!);

                    await _skinImportExportService.ExportSkinAsync(EditableSkin.Skin, userOverridePath);

                    _logger.LogInformation("Saved edited skin to: {FilePath}", userOverridePath);

                    // 3️⃣ Reload available skins so SkinManager knows the updated version
                    _skinManager.ReloadSkins();

                    // 4️⃣ Re-apply the saved skin from SkinManager
                    _skinManager.ApplySkin(EditableSkin.Skin.Name);

                    _logger.LogInformation("Reloaded and re-applied saved skin: {SkinName}", EditableSkin.Skin.Name);

                    // 5️⃣ Reload EditableSkin with the fresh saved version
                    LoadEditableSkin();
                    var currentSkin = _skinManager.CurrentSkin;
                    if (currentSkin?.Name != null)
                    {
                        SelectedSkin = AvailableSkins.FirstOrDefault(t => t.Name == currentSkin.Name);
                    }
                    ValidateSkin();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to save and apply edited skin");
            }
        }


        private void ValidateSkin()
        {
            if (EditableSkin?.Skin == null) return;

            var result = _skinValidator.ValidateSkin(EditableSkin.Skin);
            ValidationResult = result;

            _logger.LogInformation("Validated EditableSkin: {ErrorCount} errors, {WarningCount} warnings",
                result.Errors.Count, result.Warnings.Count);
        }

        private void AttachPropertyChangedHandler()
        {
            if (EditableSkin != null)
            {
                EditableSkin.PropertyChanged -= EditableSkin_PropertyChanged;
                EditableSkin.PropertyChanged += EditableSkin_PropertyChanged;
            }
        }

        private void EditableSkin_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            ValidateSkin();
        }

        private Skin CloneSkin(Skin original)
        {
            return new Skin
            {
                Name = original.Name,
                Description = original.Description,
                PrimaryColor = original.PrimaryColor,
                SecondaryColor = original.SecondaryColor,
                AccentColor = original.AccentColor,
                PrimaryBackground = original.PrimaryBackground,
                SecondaryBackground = original.SecondaryBackground,
                PrimaryTextColor = original.PrimaryTextColor,
                SecondaryTextColor = original.SecondaryTextColor,
                FontFamily = original.FontFamily,
                FontSizeSmall = original.FontSizeSmall,
                FontSizeMedium = original.FontSizeMedium,
                FontSizeLarge = original.FontSizeLarge,
                FontWeight = original.FontWeight,
                BorderColor = original.BorderColor,
                BorderThickness = original.BorderThickness,
                BorderRadius = original.BorderRadius,
                ErrorColor = original.ErrorColor,
                WarningColor = original.WarningColor,
                SuccessColor = original.SuccessColor,
                Typography = original.Typography?.Clone(),
                ControlThemeUris = new Dictionary<string, string>(original.ControlThemeUris),
                StyleUris = new Dictionary<string, string?>(original.StyleUris),
                AssetUris = new Dictionary<string, string>(original.AssetUris),
                HeaderFontFamily = original.HeaderFontFamily,
                BodyFontFamily = original.BodyFontFamily,
                MonospaceFontFamily = original.MonospaceFontFamily,
                LineHeight = original.LineHeight,
                LetterSpacing = original.LetterSpacing,
                EnableLigatures = original.EnableLigatures
            };
        }

        private static string GetSkinDescription(string skinName)
        {
            return skinName switch
            {
                "Dark" => "Professional dark skin with blue accents. Easy on the eyes for extended use.",
                "Light" => "Clean light skin with dark text. Perfect for bright environments.",
                "Ocean Blue" => "Deep blue skin inspired by ocean depths. Calming and focused.",
                "Forest Green" => "Nature-inspired green skin. Relaxing and earthy.",
                "Purple Haze" => "Rich purple skin with mystical vibes. Creative and bold.",
                "High Contrast" => "Maximum contrast for accessibility. Clear and distinct colors.",
                "Cyberpunk" => "Futuristic neon skin with hot pink accents. Edgy and modern.",
                _ => "Custom skin with unique color combinations."
            };
        }
    }
}


================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\ViewModels\ViewModelBase.cs
================================================================================

using ReactiveUI;

namespace Avalonia.UIStudio.Appearance.ViewModels
{
    /// <summary>
    /// Serves as the base class for all ViewModel classes in the AvaloniaSkinManager application.
    /// </summary>
    /// <remarks>
    /// This class provides common functionality for ViewModel classes, including support for 
    /// reactive property changes and resource management through the <see cref="IDisposable"/> interface.
    /// </remarks>
    public class ViewModelBase : ReactiveObject, IDisposable
    {
        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method is part of the <see cref="IDisposable"/> implementation and ensures that 
        /// both managed and unmanaged resources are properly released. It calls the 
        /// <see cref="Dispose(bool)"/> method with a value of <c>true</c>, and suppresses 
        /// finalization of the object to prevent redundant resource cleanup.
        /// </remarks>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TODO release managed resources here
            }
        }

        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method calls the <see cref="Dispose(bool)"/> method with a value of <c>true</c> 
        /// to release managed resources and suppresses finalization of the object.
        /// </remarks>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Views\SkinSettingsDialog.axaml
================================================================================

<Window
    x:Class="Avalonia.UIStudio.Appearance.Views.SkinSettingsDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Avalonia.UIStudio.Appearance.Controls"
    xmlns:converters="clr-namespace:Avalonia.UIStudio.Appearance.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons1="clr-namespace:Avalonia.UIStudio.Icons;assembly=Avalonia.UIStudio.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewModels="clr-namespace:Avalonia.UIStudio.Appearance.ViewModels"
    xmlns:views="clr-namespace:Avalonia.UIStudio.Appearance.Views"
    Title="Skin Settings"
    x:DataType="viewModels:SkinSettingsViewModel"
    Background="{DynamicResource BackgroundBrush}"
    Icon="avares://Avalonia.UIStudio.Icons/Assets/jonBuilt.ico"
    SizeToContent="WidthAndHeight"
    WindowStartupLocation="CenterOwner"
    mc:Ignorable="d">
    <Window.Resources>
        <ResourceDictionary>
            <converters:BoolToEditModeContentConverter x:Key="BoolToEditModeContentConverter" />
            <ResourceDictionary.MergedDictionaries>
                <ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/AppSkin.axaml" />
                <!--<ResourceInclude Source="avares://Avalonia.UIStudio.Appearance/Skins/ValidationDecorator.axaml" />-->
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Window.Styles>
        <SimpleTheme />
        <StyleInclude Source="avares://Avalonia.Controls.ColorPicker/Themes/Fluent/Fluent.xaml" />
    </Window.Styles>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource PrimaryBackground}"
            BorderBrush="{DynamicResource BorderColor}"
            BorderThickness="0,0,0,1">
            <StackPanel Spacing="10">
                <StackPanel Orientation="Horizontal" Spacing="10">
                    <Path
                        Width="24"
                        Height="24"
                        Data="{x:Static icons1:ApplicationIcons.SettingsGeometry}"
                        Fill="{DynamicResource AccentBlueBrush}"
                        Stretch="Uniform" />
                    <TextBlock
                        VerticalAlignment="Center"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Skin Settings" />
                </StackPanel>

                <TextBlock
                    FontSize="12"
                    Foreground="{DynamicResource TextSecondaryBrush}"
                    Text="Customize the appearance of Drive Space Analyzer. Changes take effect immediately."
                    TextWrapping="Wrap" />
            </StackPanel>
        </Border>

        <Border Grid.Row="1" Padding="20">
            <!--  Main Content  -->
            <StackPanel Spacing="25">

                <!--  Current Theme Selection  -->
                <StackPanel Spacing="15">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Select Skin" />

                    <ComboBox
                        MinWidth="200"
                        Background="{DynamicResource PrimaryBackground}"
                        BorderBrush="{DynamicResource BorderColor}"
                        Foreground="{DynamicResource PrimaryTextBrush}"
                        ItemsSource="{Binding AvailableSkins}"
                        SelectedItem="{Binding SelectedSkin}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Spacing="10">
                                    <Ellipse
                                        Width="16"
                                        Height="16"
                                        VerticalAlignment="Center"
                                        Fill="{Binding PreviewColor}" />
                                    <TextBlock
                                        VerticalAlignment="Center"
                                        FontWeight="Medium"
                                        Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </StackPanel>
                <TabControl Theme="{StaticResource CustomTabControlTheme}">
                    <TabItem Header="Skin Preview" Theme="{StaticResource CustomTabItemTheme}">
                        <StackPanel>
                            <Border
                                Padding="20"
                                Background="{DynamicResource BackgroundBrush}"
                                BorderBrush="{DynamicResource BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="8">
                                <StackPanel Spacing="15">

                                    <!--  Color Swatches  -->
                                    <StackPanel Spacing="10">
                                        <TextBlock
                                            FontSize="14"
                                            FontWeight="Medium"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="Color Palette" />

                                        <WrapPanel>
                                            <!--  Primary Colors  -->
                                            <StackPanel Margin="0,0,15,0" Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Primary" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource BackgroundBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>

                                            <!--  Secondary Colors  -->
                                            <StackPanel Margin="0,0,15,0" Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Secondary" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource BackgroundLightBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>

                                            <!--  Accent Colors  -->
                                            <StackPanel Margin="0,0,15,0" Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Accent" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource AccentBlueBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>

                                            <!--  Status Colors  -->
                                            <StackPanel Margin="0,0,15,0" Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Error" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource ErrorBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>

                                            <StackPanel Margin="0,0,15,0" Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Warning" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource WarningBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>

                                            <StackPanel Spacing="5">
                                                <TextBlock
                                                    FontSize="11"
                                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                                    Text="Success" />
                                                <Border
                                                    Width="40"
                                                    Height="40"
                                                    Background="{DynamicResource SuccessBrush}"
                                                    BorderBrush="{DynamicResource BorderBrush}"
                                                    BorderThickness="1"
                                                    CornerRadius="4" />
                                            </StackPanel>
                                        </WrapPanel>
                                    </StackPanel>

                                    <!--  UI Elements Preview  -->
                                    <StackPanel Spacing="10">
                                        <TextBlock
                                            FontSize="14"
                                            FontWeight="Medium"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="UI Elements" />

                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                            <Button Content="Primary Button" />

                                            <Button Content="Secondary Button" />
                                        </StackPanel>

                                        <TextBox
                                            Width="200"
                                            Background="{DynamicResource BackgroundLightBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="Sample text input"
                                            Watermark="Placeholder text..." />

                                        <CheckBox
                                            Content="Sample checkbox"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            IsChecked="True" />
                                    </StackPanel>

                                    <!--  Text Preview  -->
                                    <StackPanel Spacing="8">
                                        <TextBlock
                                            FontSize="14"
                                            FontWeight="Medium"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="Typography" />

                                        <TextBlock
                                            FontSize="16"
                                            FontWeight="Bold"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="Primary Heading Text" />

                                        <TextBlock
                                            FontSize="14"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="Regular body text that would appear in the application interface." />

                                        <TextBlock
                                            FontSize="12"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Secondary text used for descriptions and less important information." />
                                    </StackPanel>
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Skin Editor" Theme="{StaticResource CustomTabItemTheme}">
                        <StackPanel>
                            <StackPanel>
                                <TextBlock
                                    FontSize="16"
                                    FontWeight="SemiBold"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Skin Editor - Full Properties" />
                                <Border
                                    MinWidth="520"
                                    Padding="15"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource BorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="4">
                                    <Border.Styles>
                                        <Style Selector="TextBlock.Label">
                                            <Setter Property="Theme" Value="{StaticResource StatsTitleTheme}" />
                                        </Style>
                                        <Style Selector="Rectangle.ColorPreview">
                                            <Setter Property="Width" Value="64" />
                                            <Setter Property="Height" Value="32" />
                                        </Style>
                                        <Style Selector="Rectangle.CurrentValue">
                                            <Setter Property="IsVisible" Value="{Binding !DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                        </Style>
                                    </Border.Styles>
                                    <!--  General Info  -->
                                    <StackPanel Spacing="15">
                                    
                                    
                                    
                                        <Expander>
                                            <Expander.Header>
                                                <TextBlock Text="General Info" Theme="{StaticResource SectionHeaderTheme}" />
                                            </Expander.Header>
                                            <Expander.Content>
                                                <StackPanel>
                                                    <TextBlock FontWeight="Bold" Text="General Info" />
                                                    <controls:TextEditorControl
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Name"
                                                        PropertyName="Name"
                                                        ValidatedProperty="{Binding ValidatedProperties[Name]}"
                                                        Value="{Binding EditableSkin.Name.Value, Mode=TwoWay}" />
                                                    <controls:TextEditorControl
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Description"
                                                        PropertyName="Description"
                                                        ValidatedProperty="{Binding ValidatedProperties[Description]}"
                                                        Value="{Binding EditableSkin.Description.Value, Mode=TwoWay}" />
                                                </StackPanel>
                                            </Expander.Content>
                                        </Expander>
                                    
                                    <!--  Color Palette  -->
                                    
                                        <Expander>
                                            <Expander.Header>
                                                <TextBlock Text="Color Palette" Theme="{StaticResource SectionHeaderTheme}" />
                                            </Expander.Header>
                                            <Expander.Content>
                                                <StackPanel>
                                                    <TextBlock FontWeight="Bold" Text="Color Palette" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[PrimaryColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Primary Color"
                                                        PropertyName="PrimaryColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.PrimaryColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[SecondaryColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Secondary Color"
                                                        PropertyName="SecondaryColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.SecondaryColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[AccentColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Accent Color"
                                                        PropertyName="AccentColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.AccentColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[ErrorColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Error Color"
                                                        PropertyName="ErrorColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.ErrorColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[SuccessColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Success Color"
                                                        PropertyName="SuccessColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.SuccessColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[WarningColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Warning Color"
                                                        PropertyName="WarningColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.WarningColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[PrimaryBackground]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Primary Background"
                                                        PropertyName="PrimaryBackground"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.PrimaryBackground.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[SecondaryBackground]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Secondary Background"
                                                        PropertyName="SecondaryBackground"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.SecondaryBackground.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[PrimaryTextColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Primary Text Color"
                                                        PropertyName="PrimaryTextColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.PrimaryTextColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:ColorEditorControl
                                                        DataContext="{Binding ValidatedProperties[SecondaryTextColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Secondary Text Color"
                                                        PropertyName="SecondaryTextColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.SecondaryTextColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                </StackPanel>
                                            </Expander.Content>
                                        </Expander>
                                    
                                    <!--  Typography Section  -->
                                    
                                        <Expander>
                                            <Expander.Header>
                                                <TextBlock Text="Typography" Theme="{StaticResource SectionHeaderTheme}" />
                                            </Expander.Header>
                                            <Expander.Content>
                                                <StackPanel>
                                                    <TextBlock FontWeight="Bold" Text="Typography" />
                                                    <controls:FontFamilyEditorControl
                                                        DataContext="{Binding ValidatedProperties[FontFamily]}"
                                                        Label="Font Family"
                                                        PropertyName="FontFamily"
                                                        ValidatedProperty="{Binding ValidatedProperties[FontFamily]}"
                                                        Value="{Binding DataContext.EditableSkin.FontFamily.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:NumericEditorControl
                                                        DataContext="{Binding ValidatedProperties[FontSizeSmall]}"
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Font Size Small"
                                                        Maximum="24"
                                                        Minimum="6"
                                                        PropertyName="FontSizeSmall"
                                                        ValidatedProperty="{Binding ValidatedProperties[FontSizeSmall]}"
                                                        Value="{Binding DataContext.EditableSkin.FontSizeSmall.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:NumericEditorControl
                                                        Margin="0"
                                                        Padding="0"
                                                        DataContext="{Binding ValidatedProperties[FontSizeMedium]}"
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Font Size Medium"
                                                        Maximum="24"
                                                        Minimum="6"
                                                        PropertyName="FontSizeMedium"
                                                        ValidatedProperty="{Binding ValidatedProperties[FontSizeMedium]}"
                                                        Value="{Binding DataContext.EditableSkin.FontSizeMedium.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                    <controls:NumericEditorControl
                                                        Margin="0"
                                                        Padding="0"
                                                        DataContext="{Binding ValidatedProperties[FontSizeLarge]}"
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Font Size Large"
                                                        Maximum="24"
                                                        Minimum="6"
                                                        PropertyName="FontSizeLarge"
                                                        ValidatedProperty="{Binding ValidatedProperties[FontSizeLarge]}"
                                                        Value="{Binding DataContext.EditableSkin.FontSizeLarge.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                </StackPanel>
                                            </Expander.Content>
                                        </Expander>
                                    
                                    <!--  Borders  -->
                                    
                                        <Expander>
                                            <Expander.Header>
                                                <TextBlock Text="Borders" Theme="{StaticResource SectionHeaderTheme}" />
                                            </Expander.Header>
                                            <Expander.Content>
                                                <Grid Grid.RowDefinitions="Auto,Auto,Auto,Auto">
                                                    <TextBlock
                                                        Grid.Row="0"
                                                        FontWeight="Bold"
                                                        Text="Borders" />
                                                    <controls:ColorEditorControl
                                                        Grid.Row="1"
                                                        DataContext="{Binding ValidatedProperties[BorderColor]}"
                                                        IsEditMode="{Binding DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                        Label="Border Color"
                                                        PropertyName="BorderColor"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.BorderColor.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />

                                                    <controls:NumericEditorControl
                                                        Grid.Row="2"
                                                        Margin="0"
                                                        Padding="0"
                                                        DataContext="{Binding ValidatedProperties[BorderRadius]}"
                                                        IsEditMode="{Binding IsEditMode}"
                                                        Label="Border Radius"
                                                        Maximum="24"
                                                        Minimum="6"
                                                        PropertyName="BorderRadius"
                                                        ValidatedProperty="{Binding ValidatedProperties[BorderRadius]}"
                                                        Value="{Binding EditableSkin.BorderRadius.Value, Mode=TwoWay}" />

                                                    <controls:TextEditorControl
                                                        Grid.Row="3"
                                                        DataContext="{Binding ValidatedProperties[BorderThickness]}"
                                                        Label="Border Thickness"
                                                        ValidatedProperty="{Binding}"
                                                        Value="{Binding DataContext.EditableSkin.BorderThickness.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}">
                                                        <Grid RowDefinitions="Auto,Auto">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="Auto" MinWidth="150" />
                                                                <ColumnDefinition Width="*" />
                                                                <ColumnDefinition Width="Auto" />
                                                                <ColumnDefinition Width="Auto" />
                                                            </Grid.ColumnDefinitions>
                                                            <TextBlock
                                                                Grid.Row="0"
                                                                Grid.Column="0"
                                                                Classes="Label"
                                                                Text="Border Thickness" />
                                                            <TextBlock
                                                                Grid.Row="0"
                                                                Grid.Column="1"
                                                                IsVisible="{Binding Message, Converter={x:Static ObjectConverters.IsNotNull}}"
                                                                Text="{Binding Message, FallbackValue=OK}"
                                                                Theme="{StaticResource CaptionTextBlockTheme}" />
                                                            <TextBox
                                                                Grid.Row="0"
                                                                Grid.Column="2"
                                                                IsReadOnly="{Binding !DataContext.IsEditMode, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}"
                                                                Text="{Binding DataContext.EditableSkin.BorderThickness.Value, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=views:SkinSettingsDialog}}" />
                                                        </Grid>
                                                    </controls:TextEditorControl>
                                                </Grid>
                                            </Expander.Content>
                                        </Expander>
                                    </StackPanel>
                                </Border>
                            </StackPanel>
                            <!--  Validation Summary  -->
                        <ItemsControl x:Name="ErrorsItemControl" ItemsSource="{Binding Errors}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Foreground="Red" Text="{Binding}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <ItemsControl x:Name="WarningsItemControl" ItemsSource="{Binding Warnings, Mode=OneWay}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Foreground="Orange" Text="{Binding}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </StackPanel>
        </Border>
        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource PrimaryBackground}"
            BorderBrush="{DynamicResource BorderColor}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">

                <ToggleButton
                    Padding="15,8"
                    Content="{Binding IsEditMode, Converter={StaticResource BoolToEditModeContentConverter}}"
                    IsChecked="{Binding IsEditMode}" />
                <Button
                    Click="ResetButton_Click"
                    Content="Reset to Default"
                    Theme="{StaticResource SecondaryButtonTheme}" />
                <Button
                    Click="CloseButton_Click"
                    Content="Close"
                    Theme="{StaticResource DangerButtonTheme}" />
                <Button
                    Command="{Binding ApplyChangesCommand}"
                    Content="Save Changes"
                    Theme="{StaticResource PrimaryButtonTheme}" />
                <Button
                    Command="{Binding ApplySkinCommand}"
                    Content="Apply Skin"
                    Theme="{StaticResource PrimaryButtonTheme}" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Views\SkinSettingsDialog.axaml.cs
================================================================================

using Avalonia.UIStudio.Appearance.Extensions;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Interactivity;
using Avalonia.UIStudio.Appearance.ViewModels;
using Microsoft.Extensions.DependencyInjection;

namespace Avalonia.UIStudio.Appearance.Views;

/// <summary>
/// Represents a dialog window for managing skin settings in the application.
/// </summary>
/// <remarks>
/// This class provides a user interface for selecting, applying, and resetting skins.
/// It is backed by the <see cref="SkinSettingsViewModel"/> 
/// to handle the logic and data binding for skin management.
/// </remarks>
public partial class SkinSettingsDialog : Window
{
    /// <summary>
    /// Initializes a new instance of the <see cref="SkinSettingsDialog"/> class.
    /// </summary>
    /// <remarks>
    /// This constructor sets up the dialog by initializing its components and 
    /// assigning a new instance of <see cref="SkinSettingsViewModel"/> as its data context.
    /// </remarks>
    ///
    public SkinSettingsDialog()
    {
        InitializeComponent();
        DataContext = Application.Current.GetRequiredService<SkinSettingsViewModel>();
    }
    public SkinSettingsDialog(IServiceProvider serviceProvider)
    {
        InitializeComponent();
        var viewModel = serviceProvider.GetRequiredService<SkinSettingsViewModel>();
        DataContext = viewModel;
    }

    private void ResetButton_Click(object? sender, RoutedEventArgs e)
    {
        if (DataContext is SkinSettingsViewModel viewModel)
        {
            viewModel.ResetToDefault();
        }
    }

    private void CloseButton_Click(object? sender, RoutedEventArgs e)
    {
        Close();

    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\ValidationRules\AccessibilityValidationRule.cs
================================================================================

using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services.ValidationRules;

public class AccessibilityValidationRule : ISkinValidationRule
{
    public List<SkinValidationMessage> Validate(Skin skin)
    {
        var result = new SkinValidationResult();

        // Text & background contrast
        ValidateContrast(result, "PrimaryTextColor", skin.PrimaryTextColor, skin.PrimaryBackground);
        ValidateContrast(result, "SecondaryTextColor", skin.SecondaryTextColor, skin.PrimaryBackground);
        ValidateContrast(result, "BorderColor", skin.BorderColor, skin.PrimaryBackground);

        // Font sizes
        ValidateFontSize(result, "FontSizeSmall", skin.FontSizeSmall, 12.0, 20.0);
        ValidateFontSize(result, "FontSizeMedium", skin.FontSizeMedium, 14.0, 24.0);
        ValidateFontSize(result, "FontSizeLarge", skin.FontSizeLarge, 18.0, 32.0);


        // Feedback colors
        ValidateContrast(result, "WarningColor", skin.WarningColor, skin.PrimaryBackground);
        ValidateContrast(result, "SuccessColor", skin.SuccessColor, skin.PrimaryBackground);
        ValidateContrast(result, "ErrorColor", skin.ErrorColor, skin.PrimaryBackground);

        ValidateVisualStability(result,skin);
        
        
        // Optional info-level UX guidance: warning vs success similarity
        if (AreStatusColorsTooSimilar(skin.WarningColor, skin.SuccessColor))
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = false,
                Message = "WarningColor and SuccessColor are perceptually too similar.",
                InvolvedProperties = new List<string> { "WarningColor", "SuccessColor" }
            });
        }
        // Update IsValid
        result.IsValid = !result.ValidationMessages.Any(vm => vm.IsError);

        return result.ValidationMessages;
    }

    public void ValidateStatusColorDifferentiation(SkinValidationResult result, Skin skin)
    {
        ValidateColorSimilarity(result, "WarningColor", skin.WarningColor, "SuccessColor", skin.SuccessColor);
        ValidateColorSimilarity(result, "WarningColor", skin.WarningColor, "ErrorColor", skin.ErrorColor);
        ValidateColorSimilarity(result, "SuccessColor", skin.SuccessColor, "ErrorColor", skin.ErrorColor);
    }

    public void ValidateColorSimilarity(SkinValidationResult result, string nameA, Color a, string nameB, Color b)
    {
        if (AreStatusColorsTooSimilar(a, b))
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = false,
                Message = $"{nameA} and {nameB} are perceptually too similar.",
                InvolvedProperties = new List<string> { nameA, nameB }
            });
        }
    }


    public bool AreColorsHueSimilar(Color c1, Color c2, double hueThreshold = 30)
    {
        var h1 = RgbToHue(c1);
        var h2 = RgbToHue(c2);
        double diff = Math.Abs(h1 - h2);
        return diff < hueThreshold || diff > 360 - hueThreshold;
    }

    public bool AreStatusColorsTooSimilar(Color a, Color b)
    {
        double hueDiff = Math.Abs(RgbToHue(a) - RgbToHue(b));
        double lumDiff = Math.Abs(RelativeLuminance(a) - RelativeLuminance(b));
        return hueDiff < 30 && lumDiff < 0.2;
    }
    private double RgbToHue(Color color)
    {
        double r = color.R / 255.0;
        double g = color.G / 255.0;
        double b = color.B / 255.0;

        double max = Math.Max(r, Math.Max(g, b));
        double min = Math.Min(r, Math.Min(g, b));
        double delta = max - min;

        if (delta == 0) return 0;

        if (max == r)
            return 60 * (((g - b) / delta) % 6);
        else if (max == g)
            return 60 * (((b - r) / delta) + 2);
        else // max == b
            return 60 * (((r - g) / delta) + 4);
    }

    private void ValidateVisualStability(SkinValidationResult result, Skin skin)
    {
        ValidateColorSaturation(result, "AccentColor", skin.AccentColor);
        ValidateColorSaturation(result, "ErrorColor", skin.ErrorColor);
    }

    private void ValidateColorSaturation(SkinValidationResult result, string propertyName, Color color)
    {
        if (IsHighSaturationColor(color))
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = false,
                Message = $"{propertyName} uses very bright, saturated colors.",
                InvolvedProperties = new List<string> { propertyName }
            });
        }
    }

    private bool IsHighSaturationColor(Color color)
    {
        double r = color.R / 255.0;
        double g = color.G / 255.0;
        double b = color.B / 255.0;

        double max = Math.Max(r, Math.Max(g, b));
        double min = Math.Min(r, Math.Min(g, b));
        double saturation = max == 0 ? 0 : (max - min) / max;

        return saturation > 0.8;
    }

    private void ValidateContrast(SkinValidationResult result, string propertyName, Color fg, Color bg)
    {
        var contrast = ContrastRatio(fg, bg);
        if (contrast < 4.5)
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = true,
                Message = $"{propertyName} contrast vs background is too low ({contrast:F2}:1).",
                InvolvedProperties = new List<string> { propertyName, "PrimaryBackground" },
                SuggestedValues = new Dictionary<string, object?>
                {
                    { propertyName, SuggestBetterColor(fg, bg) }
                }
            });
        }
    }

    private void ValidateFontSize(SkinValidationResult result, string propertyName, double px, double min, double max)
    {
        if (px < min)
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = true,
                Message = $"{propertyName} ({px}px) is below minimum of {min}px.",
                InvolvedProperties = new List<string> { propertyName },
                SuggestedValues = new Dictionary<string, object?>
                {
                    { propertyName, min }
                }
            });
        }
        else if (px > max)
        {
            result.ValidationMessages.Add(new SkinValidationMessage
            {
                IsError = false,
                Message = $"{propertyName} ({px}px) is unusually large — consider reducing (max recommended {max}px).",
                InvolvedProperties = new List<string> { propertyName },
                SuggestedValues = new Dictionary<string, object?>
                {
                    { propertyName, max }
                }
            });
        }
    }

    public void ValidateFontSize(SkinValidationResult result, Skin skin)
    {
        ValidateFontSize(result, "FontSizeSmall", skin.FontSizeSmall, 12.0, 20.0);
        ValidateFontSize(result, "FontSizeMedium", skin.FontSizeMedium, 14.0, 24.0);
        ValidateFontSize(result, "FontSizeLarge", skin.FontSizeLarge, 18.0, 32.0);
    }
    
    
    public void ValidateStatusColors(SkinValidationResult result, Skin skin)
    {
        ValidateContrast(result, "WarningColor", skin.WarningColor, skin.PrimaryBackground);
        ValidateContrast(result, "SuccessColor", skin.SuccessColor, skin.PrimaryBackground);
        ValidateContrast(result, "ErrorColor", skin.ErrorColor, skin.PrimaryBackground);
    }


    private double ContrastRatio(Color c1, Color c2)
    {
        double L1 = RelativeLuminance(c1);
        double L2 = RelativeLuminance(c2);
        return (Math.Max(L1, L2) + 0.05) / (Math.Min(L1, L2) + 0.05);
    }

    private double RelativeLuminance(Color color)
    {
        double R = ToLinear(color.R / 255.0);
        double G = ToLinear(color.G / 255.0);
        double B = ToLinear(color.B / 255.0);
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    }

    private double ToLinear(double channel) =>
        channel <= 0.03928 ? channel / 12.92 : Math.Pow((channel + 0.055) / 1.055, 2.4);

    // Optionally: suggest a slightly darker/lighter color for better contrast
    private Color SuggestBetterColor(Color original, Color background)
    {
        double contrast = ContrastRatio(original, background);

        // If contrast too low, suggest darkening
        if (contrast < 4.5)
        {
            double factor = 0.8; // Darken by 20%
            return Color.FromRgb(
                (byte)(original.R * factor),
                (byte)(original.G * factor),
                (byte)(original.B * factor));
        }

        return original; // Already acceptable
    }
}
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\ValidationRules\BorderValidationRule.cs
================================================================================

using Avalonia.Media;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services.ValidationRules
{
    public class BorderValidationRule : ISkinValidationRule
    {
        public List<SkinValidationMessage> Validate(Skin skin)
        {
            var messages = new List<SkinValidationMessage>();

            ValidateBorderThickness(skin, messages);
            ValidateBorderRadius(skin, messages);
            ValidateBorderColorContrast(skin, messages);

            return messages;
        }

        private void ValidateBorderThickness(Skin skin, List<SkinValidationMessage> messages)
        {
            var thickness = skin.BorderThickness;

            // Negative values
            if (thickness.Left < 0 || thickness.Top < 0 || thickness.Right < 0 || thickness.Bottom < 0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Border thickness values cannot be negative.",
                    InvolvedProperties = new List<string> { "BorderThickness" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderThickness", new Thickness(Math.Max(0, thickness.Left), Math.Max(0, thickness.Top), Math.Max(0, thickness.Right), Math.Max(0, thickness.Bottom)) }
                    }
                });
            }

            // Excessive thickness
            var maxThickness = Math.Max(Math.Max(thickness.Left, thickness.Right),
                                      Math.Max(thickness.Top, thickness.Bottom));

            if (maxThickness > 10)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Border thickness ({maxThickness}) is very large and may impact usability.",
                    InvolvedProperties = new List<string> { "BorderThickness" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderThickness", new Thickness(
                            Math.Min(thickness.Left, 10),
                            Math.Min(thickness.Top, 10),
                            Math.Min(thickness.Right, 10),
                            Math.Min(thickness.Bottom, 10)) }
                    }
                });
            }

            // All zero thickness
            if (thickness.Left == 0 && thickness.Top == 0 && thickness.Right == 0 && thickness.Bottom == 0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "All border thickness values are zero — borders will be invisible.",
                    InvolvedProperties = new List<string> { "BorderThickness" },
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }
        }

        private void ValidateBorderRadius(Skin skin, List<SkinValidationMessage> messages)
        {
            var radius = skin.BorderRadius;

            // Negative radius
            if (radius < 0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Border radius ({radius}) cannot be negative.",
                    InvolvedProperties = new List<string> { "BorderRadius" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderRadius", 0.0 }
                    }
                });
            }

            // Excessive radius
            if (radius > 50)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Border radius ({radius}) is very large and may cause visual issues.",
                    InvolvedProperties = new List<string> { "BorderRadius" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderRadius", 50.0 }
                    }
                });
            }

            // Very small radius
            if (radius > 0 && radius < 1)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Border radius ({radius}) is very small and may not be visible.",
                    InvolvedProperties = new List<string> { "BorderRadius" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderRadius", 1.0 }
                    }
                });
            }
        }

        private void ValidateBorderColorContrast(Skin skin, List<SkinValidationMessage> messages)
        {
            var validator = new SkinValidator();

            // Border vs PrimaryBackground
            var primaryBorderContrast = validator.CalculateContrastRatio(skin.BorderColor, skin.PrimaryBackground);
            if (primaryBorderContrast < 1.5)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Border color has insufficient contrast against primary background (ratio: {primaryBorderContrast:F2}).",
                    InvolvedProperties = new List<string> { "BorderColor", "PrimaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderColor", validator.AdjustColorForContrast(skin.BorderColor, skin.PrimaryBackground, 1.5) },
                        { "PrimaryBackground", null }
                    }
                });
            }
            else if (primaryBorderContrast < 2.0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Border color has low contrast against primary background (ratio: {primaryBorderContrast:F2}).",
                    InvolvedProperties = new List<string> { "BorderColor", "PrimaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderColor", validator.AdjustColorForContrast(skin.BorderColor, skin.PrimaryBackground, 2.0) },
                        { "PrimaryBackground", null }
                    }
                });
            }

            // Border vs SecondaryBackground
            var secondaryBorderContrast = validator.CalculateContrastRatio(skin.BorderColor, skin.SecondaryBackground);
            if (secondaryBorderContrast < 1.5)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Border color has insufficient contrast against secondary background (ratio: {secondaryBorderContrast:F2}).",
                    InvolvedProperties = new List<string> { "BorderColor", "SecondaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderColor", validator.AdjustColorForContrast(skin.BorderColor, skin.SecondaryBackground, 1.5) },
                        { "SecondaryBackground", null }
                    }
                });
            }
            else if (secondaryBorderContrast < 2.0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Border color has low contrast against secondary background (ratio: {secondaryBorderContrast:F2}).",
                    InvolvedProperties = new List<string> { "BorderColor", "SecondaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "BorderColor", validator.AdjustColorForContrast(skin.BorderColor, skin.SecondaryBackground, 2.0) },
                        { "SecondaryBackground", null }
                    }
                });
            }

            // Border vs PrimaryTextColor
            var textSimilarity = validator.CalculateContrastRatio(skin.BorderColor, skin.PrimaryTextColor);
            if (textSimilarity < 1.2)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Border color is very similar to primary text color, which may cause visual confusion.",
                    InvolvedProperties = new List<string> { "BorderColor", "PrimaryTextColor" },
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\ValidationRules\ColorValidationRule.cs
================================================================================

using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services.ValidationRules
{
    public class ColorContrastValidationRule : ISkinValidationRule
    {
        public List<SkinValidationMessage> Validate(Skin skin)
        {
            var messages = new List<SkinValidationMessage>();
            var validator = new SkinValidator();

            // Check primary text contrast
            var primaryContrast = validator.CalculateContrastRatio(skin.PrimaryTextColor, skin.PrimaryBackground);
            if (primaryContrast < 4.5) // WCAG AA standard
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AA standard (4.5:1)",
                    InvolvedProperties = new List<string> { "PrimaryTextColor", "PrimaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "PrimaryTextColor", validator.AdjustColorForContrast(skin.PrimaryTextColor, skin.PrimaryBackground, 4.5) },
                        { "PrimaryBackground", null }
                    }
                });
            }
            else if (primaryContrast < 7.0) // WCAG AAA standard
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AAA standard (7.0:1)",
                    InvolvedProperties = new List<string> { "PrimaryTextColor", "PrimaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "PrimaryTextColor", validator.AdjustColorForContrast(skin.PrimaryTextColor, skin.PrimaryBackground, 7.0) },
                        { "PrimaryBackground", null }
                    }
                });
            }

            // Check secondary text contrast
            var secondaryContrast = validator.CalculateContrastRatio(skin.SecondaryTextColor, skin.SecondaryBackground);
            if (secondaryContrast < 3.0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Secondary text contrast ratio ({secondaryContrast:F2}) is below minimum standard (3.0:1)",
                    InvolvedProperties = new List<string> { "SecondaryTextColor", "SecondaryBackground" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "SecondaryTextColor", validator.AdjustColorForContrast(skin.SecondaryTextColor, skin.SecondaryBackground, 3.0) },
                        { "SecondaryBackground", null }
                    }
                });
            }

            // Check accent color readability
            var accentContrast = validator.CalculateContrastRatio(skin.PrimaryTextColor, skin.AccentColor);
            if (accentContrast < 3.0)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = $"Accent color contrast with primary text ({accentContrast:F2}) may be difficult to read",
                    InvolvedProperties = new List<string> { "PrimaryTextColor", "AccentColor" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "PrimaryTextColor", validator.AdjustColorForContrast(skin.PrimaryTextColor, skin.AccentColor, 3.0) },
                        { "AccentColor", null }
                    }
                });
            }

            return messages;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\ValidationRules\FontValidationRule.cs
================================================================================

using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services.ValidationRules
{
    public class FontSizeValidationRule : ISkinValidationRule
    {
        private const double SmallMin = 8.0;
        private const double SmallMax = 20.0;
        private const double MediumMin = 10.0;
        private const double MediumMax = 24.0;
        private const double LargeMin = 12.0;
        private const double LargeMax = 32.0;

        public List<SkinValidationMessage> Validate(Skin skin)
        {
            var messages = new List<SkinValidationMessage>();

            // FontSizeSmall
            if (skin.FontSizeSmall < SmallMin || skin.FontSizeSmall > SmallMax)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Small font size ({skin.FontSizeSmall}px) must be between {SmallMin} and {SmallMax} px.",
                    InvolvedProperties = new List<string> { "FontSizeSmall" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "FontSizeSmall", Math.Clamp(skin.FontSizeSmall, SmallMin, SmallMax) }
                    }
                });
            }

            // FontSizeMedium
            if (skin.FontSizeMedium < MediumMin || skin.FontSizeMedium > MediumMax)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Medium font size ({skin.FontSizeMedium}px) must be between {MediumMin} and {MediumMax} px.",
                    InvolvedProperties = new List<string> { "FontSizeMedium" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "FontSizeMedium", Math.Clamp(skin.FontSizeMedium, MediumMin, MediumMax) }
                    }
                });
            }

            // FontSizeLarge
            if (skin.FontSizeLarge < LargeMin || skin.FontSizeLarge > LargeMax)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Large font size ({skin.FontSizeLarge}px) must be between {LargeMin} and {LargeMax} px.",
                    InvolvedProperties = new List<string> { "FontSizeLarge" },
                    SuggestedValues = new Dictionary<string, object?>
                    {
                        { "FontSizeLarge", Math.Clamp(skin.FontSizeLarge, LargeMin, LargeMax) }
                    }
                });
            }

            // Logical font size progression checks
            if (skin.FontSizeSmall >= skin.FontSizeMedium)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Small font size should be smaller than medium font size.",
                    InvolvedProperties = new List<string> { "FontSizeSmall", "FontSizeMedium" },
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }

            if (skin.FontSizeMedium >= skin.FontSizeLarge)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Medium font size should be smaller than large font size.",
                    InvolvedProperties = new List<string> { "FontSizeMedium", "FontSizeLarge" },
                    SuggestedValues = new Dictionary<string, object?>()
                });
            }

            return messages;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Services\ValidationRules\NameValidationRule.cs
================================================================================

using System.Text.RegularExpressions;
using Avalonia.UIStudio.Appearance.Interfaces;
using Avalonia.UIStudio.Appearance.Model;

namespace Avalonia.UIStudio.Appearance.Services.ValidationRules
{
    public class NameValidationRule : ISkinValidationRule
    {
        private static readonly string[] ReservedNames = { "Default", "System", "Auto", "None", "Null", "Empty" };
        private static readonly string[] GenericNames = { "Theme", "Skin", "Custom", "New" };
        private static readonly string[] ProblematicNames = { "Test", "Debug", "Temp", "Sample" };
        private static readonly string[] FilesystemConflictNames = { "con", "prn", "aux", "nul", "com1", "lpt1" };

        private const int MinLength = 2;
        private const int MaxLength = 50;
        private const int QuiteLongThreshold = 30;

        public List<SkinValidationMessage> Validate(Skin skin)
        {
            var messages = new List<SkinValidationMessage>();

            var name = skin.Name ?? string.Empty;

            // Empty or whitespace
            if (string.IsNullOrWhiteSpace(name))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Skin name is empty or whitespace.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", "Custom Skin" } }
                });
                return messages; // No point validating further if empty
            }

            name = name.Trim();

            // Too short
            if (name.Length < MinLength)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Skin name is too short (minimum {MinLength} characters required).",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", "Custom Skin" } }
                });
            }

            // Too long
            if (name.Length > MaxLength)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Skin name is too long (max {MaxLength} characters allowed).",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name.Substring(0, MaxLength) } }
                });
            }

            // Leading/trailing whitespace
            if (skin.Name != name)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name has leading or trailing whitespace.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name } }
                });
            }

            // Multiple consecutive spaces
            if (Regex.IsMatch(name, @" {2,}"))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name contains multiple consecutive spaces.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", Regex.Replace(name, @" {2,}", " ") } }
                });
            }

            // Starts with special character
            if (Regex.IsMatch(name, @"^[\-\._]"))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name starts with a special character.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name.TrimStart('-', '_', '.') } }
                });
            }

            // Invalid characters (allow letters, digits, spaces, hyphens, underscores, dots)
            if (!Regex.IsMatch(name, @"^[a-zA-Z0-9 _\.\-]+$"))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = "Skin name contains invalid characters.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", SanitizeName(name) } }
                });
            }

            // Reserved names
            if (ReservedNames.Any(r => string.Equals(r, name, StringComparison.OrdinalIgnoreCase)))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = true,
                    Message = $"Skin name '{name}' is a reserved name.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name + " Custom" } }
                });
            }

            // Generic names
            if (GenericNames.Any(g => string.Equals(g, name, StringComparison.OrdinalIgnoreCase)))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name is too generic.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name + " Custom" } }
                });
            }

            // Quite long
            if (name.Length > QuiteLongThreshold)
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name is quite long and may be hard to read.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name } }
                });
            }

            // Problematic names
            if (ProblematicNames.Any(p => string.Equals(p, name, StringComparison.OrdinalIgnoreCase)))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name might be confusing (common debug/test name).",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name + " Custom" } }
                });
            }

            // Filesystem conflict patterns
            if (FilesystemConflictNames.Any(f => string.Equals(f, name, StringComparison.OrdinalIgnoreCase)))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name matches common reserved names in file systems.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", name + " Skin" } }
                });
            }

            // Short name not capitalized
            if (name.Length <= 3 && !char.IsUpper(name[0]))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Short skin name should be capitalized.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", char.ToUpper(name[0]) + name.Substring(1) } }
                });
            }

            // Contains version numbers (simple pattern vX.X or vX)
            if (Regex.IsMatch(name, @"\bv\d+(\.\d+)?\b", RegexOptions.IgnoreCase))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name contains version numbers.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", Regex.Replace(name, @"\bv\d+(\.\d+)?\b", "").Trim() } }
                });
            }

            // Excessive capitalization
            if (name.Length >= 3 && name.All(char.IsUpper))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name has excessive capitalization.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name.ToLower()) } }
                });
            }

            // Ends with "Theme" or "Skin"
            if (Regex.IsMatch(name, @"(Theme|Skin)$", RegexOptions.IgnoreCase))
            {
                messages.Add(new SkinValidationMessage
                {
                    IsError = false,
                    Message = "Skin name ends with 'theme' or 'skin'.",
                    InvolvedProperties = new List<string> { "Name" },
                    SuggestedValues = new Dictionary<string, object?> { { "Name", Regex.Replace(name, @"\b(Theme|Skin)$", "").Trim() } }
                });
            }

            return messages;
        }

        private string SanitizeName(string name)
        {
            // Allow letters, digits, spaces, hyphens, underscores, dots
            var sanitized = new string(name.Where(c => char.IsLetterOrDigit(c) || c == ' ' || c == '-' || c == '_' || c == '.').ToArray()).Trim();
            return sanitized.Length >= 3 ? sanitized : "Custom Skin";
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Arctic White\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Arctic White\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Autumn Leaves\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Autumn Leaves\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Coffee Brown\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Coffee Brown\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Coral Reef\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Coral Reef\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Cyberpunk\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        RecognizesAccessKey="True" />
                </Border>
            </ControlTemplate>
        </Setter>
        <!--<Style Selector="Button:pointerover > Border#border">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>

        -->
        <!--  Style for :pressed  -->
        <!--
        <Style Selector="Button:pressed > Border#border">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        -->
        <!--  Style for :disabled  -->
        <!--
        <Style Selector="Button:disabled > Border#border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>-->
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Cyberpunk\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Cyberpunk\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="{DynamicResource DefaultFontWeight}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Margin="2"
                        Padding="{TemplateBinding Padding}"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden">
                        <TextPresenter x:Name="PART_TextPresenter" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Margin="50" Spacing="20">
            <TextBox Width="150" />
            <TextBox Width="150" Watermark="watermark text" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Dark\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Dark\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Electric Blue\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Electric Blue\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Forest Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Forest Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\High Contrast\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\High Contrast\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Lavender Dreams\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Lavender Dreams\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Light\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Light\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Material Design 3\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Material Design 3\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Midnight Purple\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Midnight Purple\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernExpanderTheme" TargetType="Expander">
        <Setter Property="Padding" Value="6" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTabControlTheme" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\ModernIce\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Neon Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Neon Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernExpanderTheme" TargetType="Expander">
        <Setter Property="Padding" Value="6" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTabControlTheme" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Ocean Blue\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="MaterialDesign3ButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Padding" Value="24,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="RenderTransform" Value="scale(1)" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.15" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.15" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />

            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 1 #1A000000, 0 1 2 0 #33000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.96)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.38" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Filled Button Variant (Primary)  -->
        <Style Selector="^.filled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="0 1 3 1 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.filled:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#5A3F93" />
            <Setter Property="BoxShadow" Value="0 2 6 2 #1A000000, 0 1 2 0 #33000000" />
        </Style>
        <Style Selector="^.filled:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4F3783" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #1A000000" />
        </Style>

        <!--  Text Button Variant  -->
        <Style Selector="^.text /template/ Border#PART_Border">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^.text /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.text:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#1A6750A4" />
        </Style>
        <Style Selector="^.text:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#336750A4" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Purple Haze\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Purple Haze\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="0" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroExpanderTheme" TargetType="Expander">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTabControlTheme" TargetType="TabControl">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\RetroTerminal\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Rose Gold\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Rose Gold\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Slate Grey\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Slate Grey\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Steel Blue\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Steel Blue\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Sunset Orange\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Sunset Orange\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="{x:Type TextBlock}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Windows 11 Modern\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 0 #10000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 0 #15000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 1 2 0 #20000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Accent Button Variant  -->
        <Style Selector="^.accent /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.accent /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style Selector="^.accent:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#106EBE" />
            <Setter Property="BorderBrush" Value="#106EBE" />
        </Style>
        <Style Selector="^.accent:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#005A9E" />
            <Setter Property="BorderBrush" Value="#005A9E" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Windows 11 Modern\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />

        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BoxShadow="0 1 3 0 #08000000"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />

                                <DockPanel Grid.Column="1" Margin="{TemplateBinding Padding}">
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Opacity="0.7"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                    </ScrollViewer>
                                </DockPanel>

                                <ContentPresenter
                                    Grid.Column="2"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 2 6 0 #10000000" />
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 0 0 1 #4D0078D4" />
        </Style>

        <!--  Error State  -->
        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ TextBlock#PART_Watermark">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Zen Garden\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="Padding" Value="16,10" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Background" Duration="0:0:0.2" />
                <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.1" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 2 8 0 #15000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="RenderTransform" Value="scale(1.02)" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 4 12 0 #20000000" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="0 1 4 0 #25000000" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.5" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>

        <!--  Primary Button Variant  -->
        <Style Selector="^.primary /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^.primary /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
        </Style>
        <Style Selector="^.primary:pointerover /template/ Border#PART_Border">
            <Setter Property="Background" Value="#4A6A4A" />
            <Setter Property="BorderBrush" Value="#4A6A4A" />
        </Style>
        <Style Selector="^.primary:pressed /template/ Border#PART_Border">
            <Setter Property="Background" Value="#3F5A3F" />
            <Setter Property="BorderBrush" Value="#3F5A3F" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\Avalonia.UIStudio\Avalonia.UIStudio.Appearance\Skins\Zen Garden\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="#4D5D7C5B" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="6" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                <BrushTransition Property="Background" Duration="0:0:0.2" />
            </Transitions>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            BoxShadow="inset 0 1 3 0 #10000000" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                
                                <DockPanel
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}">
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                
                                                Opacity="0.8"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text, Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                    </ScrollViewer>
                                </DockPanel>
                                
                                <ContentPresenter
                                    Grid.Column="2"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!-- Hover State -->
        <Style Selector="^:pointerover /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 2 #2D5D7C5B" />
        </Style>

        <!-- Focused State -->
        <Style Selector="^:focus /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 3 #4D5D7C5B" />
        </Style>

        <!-- Error State -->
        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
            <Setter Property="BoxShadow" Value="inset 0 1 3 0 #10000000, 0 0 0 2 #4DB85450" />
        </Style>

        <!-- Disabled State -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ Border#PART_BorderElement">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BoxShadow" Value="none" />
        </Style>
        <Style Selector="^:disabled /template/ TextBlock#PART_Watermark">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>